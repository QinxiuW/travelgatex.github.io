<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TravelgateX Documentation</title>
    <link>/</link>
    <description>Recent content on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API</title>
      <link>/mappea/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/paymentx/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/stats/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/travelgatex/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/mappea/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apiconnection/</guid>
      <description> GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:     </description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/paymentx/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apiconnection/</guid>
      <description> GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     </description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/stats/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apiconnection/</guid>
      <description> GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:     </description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/travelgatex/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiconnection/</guid>
      <description> GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    ResourceData:    ProductData:     </description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/mappea/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/paymentx/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/stats/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/travelgatex/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/mappea/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apiedge/</guid>
      <description> GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     </description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/paymentx/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apiedge/</guid>
      <description> GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     </description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/stats/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apiedge/</guid>
      <description> GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     </description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/travelgatex/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiedge/</guid>
      <description> GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     </description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/mappea/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/paymentx/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/stats/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/travelgatex/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/mappea/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessconnection/</guid>
      <description> GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):    Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/paymentx/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessconnection/</guid>
      <description> GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/stats/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessconnection/</guid>
      <description> GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):    Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/travelgatex/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessconnection/</guid>
      <description> GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  SupplierData:    OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/mappea/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/paymentx/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/stats/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/travelgatex/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/mappea/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessedge/</guid>
      <description> GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     </description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/paymentx/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessedge/</guid>
      <description> GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     </description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/stats/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessedge/</guid>
      <description> GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     </description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/travelgatex/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessedge/</guid>
      <description> GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     </description>
    </item>
    
    <item>
      <title>AccessFilter</title>
      <link>/travelgatex/reference/inputobjects/accessfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessfilter/</guid>
      <description> GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    </description>
    </item>
    
    <item>
      <title>AccessFilterInput</title>
      <link>/hotelx/reference/inputobjects/accessfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/accessfilterinput/</guid>
      <description>Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.
GraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AccessFilterInput</title>
      <link>/travelgatex/reference/inputobjects/accessfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessfilterinput/</guid>
      <description>Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.
GraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AccessInput</title>
      <link>/travelgatex/reference/inputobjects/accessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessinput/</guid>
      <description>Access input
GraphQL schema definition type AccessInput {  name: String    isActive: Boolean    code: ID    supplier: String    isTest: Boolean    user: String    password: String    urls: UrlsInput    parameters: [ParameterInput]    markets: [String!]    rateRules: [RateRulesType!]    shared: String    group: ID    owner: ID   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/hotelx/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/addon/</guid>
      <description> Additional information about the option
GraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.   </description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/travelgatex/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addon/</guid>
      <description> Additional information about the option
GraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.   </description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/hotelx/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/addons/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!</description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/travelgatex/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addons/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!</description>
    </item>
    
    <item>
      <title>AdminMutation</title>
      <link>/travelgatex/reference/objects/adminmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminmutation/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s for implementing GraphQL mutations.
GraphQL schema definition type AdminMutation {  createAccess( input: AccessInput!, ): Access    updateAccess( input: AccessInput!, ): Access    grantAccessToGroup( input: GroupInput!, ): Access    deleteAccessFromGroup( input: GroupInput!, ): Access    grantSupplierToGroup( input: GroupInput!, ): Supplier    deleteSupplierFromGroup( input: GroupInput!, ): Supplier    grantClientToGroup( input: GroupInput!, ): Client    deleteClientFromGroup( input: GroupInput!</description>
    </item>
    
    <item>
      <title>AdminQuery</title>
      <link>/travelgatex/reference/objects/adminquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminquery/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s GraphQL interface.
GraphQL schema definition type AdminQuery {  jwt: JWT    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    serviceApi( filter: ServiceApiFilter, ): ServiceApi    pointsOfSale( filter: PointOfSaleFilter, ): PointOfSaleConnection    profiles( filter: ProfileFilter, ): ProfileConnection    entities( filter: EntityFilter, ): EntityConnection    organizations(    codes: [ID!</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/hotelx/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/mappea/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/paymentx/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/stats/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/travelgatex/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/hotelx/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/advisemessagelevel/</guid>
      <description> GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/mappea/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/advisemessagelevel/</guid>
      <description> GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/paymentx/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/advisemessagelevel/</guid>
      <description> GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/stats/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/advisemessagelevel/</guid>
      <description> GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/travelgatex/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/advisemessagelevel/</guid>
      <description> GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>Airport</title>
      <link>/hotelx/reference/objects/airport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/airport/</guid>
      <description>Airport Type
GraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Airport</title>
      <link>/travelgatex/reference/objects/airport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/airport/</guid>
      <description>Airport Type
GraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>AirportData</title>
      <link>/hotelx/reference/objects/airportdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/airportdata/</guid>
      <description> Information about the airport
GraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport&amp;#39;s name  location(Location): The airport&amp;#39;s location   Required by Airport:  Airport Type   </description>
    </item>
    
    <item>
      <title>AirportData</title>
      <link>/travelgatex/reference/objects/airportdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/airportdata/</guid>
      <description> Information about the airport
GraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport&amp;#39;s name  location(Location): The airport&amp;#39;s location   Required by Airport:  Airport Type   </description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/hotelx/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/amenity/</guid>
      <description>An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.
GraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/travelgatex/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/amenity/</guid>
      <description>An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.
GraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ApplicationAreaType</title>
      <link>/hotelx/reference/enums/applicationareatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/applicationareatype/</guid>
      <description> Indicates where it applies
GraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.   </description>
    </item>
    
    <item>
      <title>ApplicationAreaType</title>
      <link>/travelgatex/reference/enums/applicationareatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/applicationareatype/</guid>
      <description> Indicates where it applies
GraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.   </description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/hotelx/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/auditdata/</guid>
      <description>Data sent and received in the supplier’s native format.
GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!</description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/travelgatex/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/auditdata/</guid>
      <description>Data sent and received in the supplier’s native format.
GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!</description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/hotelx/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/bed/</guid>
      <description> Contains information about a bed.
GraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not   </description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/travelgatex/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bed/</guid>
      <description> Contains information about a bed.
GraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not   </description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/hotelx/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/board/</guid>
      <description>Board type.
GraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!</description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/travelgatex/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/board/</guid>
      <description>Board type.
GraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!</description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/hotelx/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/boardconnection/</guid>
      <description> BoardList definition
GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/travelgatex/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardconnection/</guid>
      <description> BoardList definition
GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/hotelx/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/travelgatex/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/hotelx/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/boardedge/</guid>
      <description> BoardList Edge definition
GraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Board):   cursor(String!):    Required by BoardConnection:  BoardList definition   </description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/travelgatex/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardedge/</guid>
      <description> BoardList Edge definition
GraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Board):   cursor(String!):    Required by BoardConnection:  BoardList definition   </description>
    </item>
    
    <item>
      <title>BookPaxInput</title>
      <link>/hotelx/reference/inputobjects/bookpaxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/bookpaxinput/</guid>
      <description>Input BookPax contains basic information abaout pax suach as name, surname and age.
GraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The guest&amp;#39;s first name  surname(String!</description>
    </item>
    
    <item>
      <title>BookPaxInput</title>
      <link>/travelgatex/reference/inputobjects/bookpaxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookpaxinput/</guid>
      <description>Input BookPax contains basic information abaout pax suach as name, surname and age.
GraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The guest&amp;#39;s first name  surname(String!</description>
    </item>
    
    <item>
      <title>BookReferenceInput</title>
      <link>/hotelx/reference/inputobjects/bookreferenceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/bookreferenceinput/</guid>
      <description>Reference object that contains the client reference and/or supplier reference.
GraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): The client&amp;#39;s reference  supplier(String): The Supplier&amp;#39;s reference   Required by HotelCancelInput:  Cancellation Criteria.</description>
    </item>
    
    <item>
      <title>BookReferenceInput</title>
      <link>/travelgatex/reference/inputobjects/bookreferenceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookreferenceinput/</guid>
      <description>Reference object that contains the client reference and/or supplier reference.
GraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): The client&amp;#39;s reference  supplier(String): The Supplier&amp;#39;s reference   Required by HotelCancelInput:  Cancellation Criteria.</description>
    </item>
    
    <item>
      <title>BookRoomInput</title>
      <link>/hotelx/reference/inputobjects/bookroominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/bookroominput/</guid>
      <description> Input BookRoom contains list of pax and the room&amp;rsquo;s reference.
GraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int!): The room&amp;#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room   </description>
    </item>
    
    <item>
      <title>BookRoomInput</title>
      <link>/travelgatex/reference/inputobjects/bookroominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookroominput/</guid>
      <description> Input BookRoom contains list of pax and the room&amp;rsquo;s reference.
GraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int!): The room&amp;#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room   </description>
    </item>
    
    <item>
      <title>BookStatusType</title>
      <link>/hotelx/reference/enums/bookstatustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/bookstatustype/</guid>
      <description> Book status
GraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel   </description>
    </item>
    
    <item>
      <title>BookStatusType</title>
      <link>/travelgatex/reference/enums/bookstatustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/bookstatustype/</guid>
      <description> Book status
GraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel   </description>
    </item>
    
    <item>
      <title>BookableOptionSearch</title>
      <link>/hotelx/reference/interfaces/bookableoptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/interfaces/bookableoptionsearch/</guid>
      <description> GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key   </description>
    </item>
    
    <item>
      <title>BookableOptionSearch</title>
      <link>/travelgatex/reference/interfaces/bookableoptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/bookableoptionsearch/</guid>
      <description> GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key   </description>
    </item>
    
    <item>
      <title>Booking flow</title>
      <link>/hotelx/howtos/bookingflow/flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/flow/</guid>
      <description>Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.
 --                                            1. SEARCH  2. QUOTE  3.</description>
    </item>
    
    <item>
      <title>BookingCriteriaType</title>
      <link>/hotelx/reference/enums/bookingcriteriatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/bookingcriteriatype/</guid>
      <description> Indicates the type of criteria in the request of the booking list
GraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.   </description>
    </item>
    
    <item>
      <title>BookingCriteriaType</title>
      <link>/travelgatex/reference/enums/bookingcriteriatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/bookingcriteriatype/</guid>
      <description> Indicates the type of criteria in the request of the booking list
GraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.   </description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/hotelx/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/bookinghotel/</guid>
      <description>GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/travelgatex/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookinghotel/</guid>
      <description>GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/hotelx/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/bookingroom/</guid>
      <description>GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/travelgatex/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookingroom/</guid>
      <description>GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/hotelx/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/boolean/</guid>
      <description>The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  PageInfo:    HotelData:  Hotel data  DestinationData:  Information about destinantion  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/mappea/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  PageInfo:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    ClientData:    GroupData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/paymentx/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by PageInfo:    GroupData:    GroupCommonData:    MemberData:    APIData:    ResourceData:    RoleData:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    ClientData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/stats/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by PageInfo:    OperationDetailed:  Stats information per operation  AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    GroupData:    ClientData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/travelgatex/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/boolean/</guid>
      <description>The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by SupplierFilter:    ClientFilter:    EntityFilter:    PageInfo:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    ClientData:    GroupData:    APIData:    ResourceData:    RoleData:    ProfileData:  Profile data  HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>Build An OTA</title>
      <link>/travelgatex/tutorials/ota-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/tutorials/ota-site/</guid>
      <description>Creating your full OTA This topic describes how to build your own OTA using HotelX.
Before you begin  Basic knowledge of Angular Read HotelX, which contains information about the HotelX API  Scenario: Create an Online Travel Agency written in Angular For this quickstart tutorial, we have prepared a repository that contains the full Angular code for the OTA clone. All you need to do is to get TravelgateX credentials and connect it with the Angular application.</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/hotelx/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/businessrules/</guid>
      <description>List of business rules for filtering options based on your interests.
GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/travelgatex/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/businessrules/</guid>
      <description>List of business rules for filtering options based on your interests.
GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!</description>
    </item>
    
    <item>
      <title>BusinessRulesInput</title>
      <link>/hotelx/reference/inputobjects/businessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/businessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>BusinessRulesInput</title>
      <link>/travelgatex/reference/inputobjects/businessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/businessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>BusinessRulesType</title>
      <link>/hotelx/reference/enums/businessrulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/businessrulestype/</guid>
      <description> Business rules type
GraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.   </description>
    </item>
    
    <item>
      <title>BusinessRulesType</title>
      <link>/travelgatex/reference/enums/businessrulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/businessrulestype/</guid>
      <description> Business rules type
GraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.   </description>
    </item>
    
    <item>
      <title>CVC</title>
      <link>/paymentx/reference/scalars/cvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/cvc/</guid>
      <description> GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>CVC</title>
      <link>/travelgatex/reference/scalars/cvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/cvc/</guid>
      <description> GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/hotelx/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/cancelpenalty/</guid>
      <description>Contains information for cancellation penalities..
GraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!</description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/travelgatex/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpenalty/</guid>
      <description>Contains information for cancellation penalities..
GraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!</description>
    </item>
    
    <item>
      <title>CancelPenaltyType</title>
      <link>/hotelx/reference/enums/cancelpenaltytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/cancelpenaltytype/</guid>
      <description> Options type
GraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..   </description>
    </item>
    
    <item>
      <title>CancelPenaltyType</title>
      <link>/travelgatex/reference/enums/cancelpenaltytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/cancelpenaltytype/</guid>
      <description> Options type
GraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..   </description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/hotelx/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/cancelpolicy/</guid>
      <description> Information about a policy cancellation.
GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking   </description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/travelgatex/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpolicy/</guid>
      <description> Information about a policy cancellation.
GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking   </description>
    </item>
    
    <item>
      <title>CardNumber</title>
      <link>/paymentx/reference/scalars/cardnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/cardnumber/</guid>
      <description> GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>CardNumber</title>
      <link>/travelgatex/reference/scalars/cardnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/cardnumber/</guid>
      <description> GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/hotelx/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/category/</guid>
      <description>Category Type
GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!</description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/travelgatex/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/category/</guid>
      <description>Category Type
GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!</description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/hotelx/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/categoryconnection/</guid>
      <description> CategoryList definition
GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/travelgatex/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryconnection/</guid>
      <description> CategoryList definition
GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/hotelx/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/travelgatex/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/hotelx/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/categoryedge/</guid>
      <description> CategoryList Edge definition
GraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Category):   cursor(String!):    Required by CategoryConnection:  CategoryList definition   </description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/travelgatex/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryedge/</guid>
      <description> CategoryList Edge definition
GraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Category):   cursor(String!):    Required by CategoryConnection:  CategoryList definition   </description>
    </item>
    
    <item>
      <title>Certification Goals</title>
      <link>/hotelx/howtos/certification_process/goals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/certification_process/goals/</guid>
      <description>The Certification process intention is to test and ensure that your integration is performed correctly, this means, that functionality and implementation of the relevant and mandatory information are done correctly and without errors. All of this is focused to avoid issues with the final consumer, or he/she being misled by any incorrect information or not desirable API uses. Before starting the certification process, make sure you have followed the Welcome Pack instructions.</description>
    </item>
    
    <item>
      <title>ChannelX</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-channelx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-channelx/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>ChargeType</title>
      <link>/hotelx/reference/enums/chargetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/chargetype/</guid>
      <description> Charge Type
GraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.   </description>
    </item>
    
    <item>
      <title>ChargeType</title>
      <link>/travelgatex/reference/enums/chargetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/chargetype/</guid>
      <description> Charge Type
GraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.   </description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/mappea/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/paymentx/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/stats/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/travelgatex/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/mappea/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientconnection/</guid>
      <description> GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/paymentx/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientconnection/</guid>
      <description> GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/stats/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientconnection/</guid>
      <description> GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/travelgatex/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientconnection/</guid>
      <description> GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/mappea/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/paymentx/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/stats/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/travelgatex/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/mappea/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientedge/</guid>
      <description> GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     </description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/paymentx/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientedge/</guid>
      <description> GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     </description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/stats/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientedge/</guid>
      <description> GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     </description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/travelgatex/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientedge/</guid>
      <description> GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     </description>
    </item>
    
    <item>
      <title>ClientFilter</title>
      <link>/travelgatex/reference/inputobjects/clientfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/clientfilter/</guid>
      <description>GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!</description>
    </item>
    
    <item>
      <title>Common resources</title>
      <link>/travelgatex/concepts/common-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/common-resources/</guid>
      <description>On this page you will learn more about common resources used in TravelgateX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.
Supplier A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers.
Access An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>ConfigurationInput</title>
      <link>/hotelx/reference/inputobjects/configurationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/configurationinput/</guid>
      <description>The information and credentials required to access the supplier’s system.
GraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ConfigurationInput</title>
      <link>/travelgatex/reference/inputobjects/configurationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/configurationinput/</guid>
      <description>The information and credentials required to access the supplier’s system.
GraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Connect a New Supplier</title>
      <link>/hotelx/howtos/howto-connect-supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/howto-connect-supplier/</guid>
      <description>In order to connect to a new Supplier please follow the steps below:
 Login to our Connect Form Select the supplier you want to connect to and enter the connectivity credentials. A Jira ticket will be raised and you will receive a confirmation email. Our Activations Department will contact you when the process is ready.  In order to activate a new Supplier a few processes need to be executed - this process depends on each Supplier and it could take up to 24 hours.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/hotelx/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/contact/</guid>
      <description> Contact Data.
GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web   Required by HotelData:  Hotel data   </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/travelgatex/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/contact/</guid>
      <description> Contact Data.
GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web   Required by HotelData:  Hotel data   </description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/hotelx/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/coordinates/</guid>
      <description> Geographical coordinates corresponding to a location.
GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude   Required by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location   </description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/travelgatex/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/coordinates/</guid>
      <description> Geographical coordinates corresponding to a location.
GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude   Required by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location   </description>
    </item>
    
    <item>
      <title>Country</title>
      <link>/hotelx/reference/scalars/country/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/country/</guid>
      <description>The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes &amp;ldquo;ES&amp;rdquo;.
GraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Country</title>
      <link>/travelgatex/reference/scalars/country/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/country/</guid>
      <description>The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes &amp;ldquo;ES&amp;rdquo;.
GraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>CreateClientInput</title>
      <link>/travelgatex/reference/inputobjects/createclientinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createclientinput/</guid>
      <description>GraphQL schema definition type CreateClientInput {  name: String!    isActive: Boolean!    group: String!    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(String!</description>
    </item>
    
    <item>
      <title>CreateGroupInput</title>
      <link>/travelgatex/reference/inputobjects/creategroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/creategroupinput/</guid>
      <description>GraphQL schema definition type CreateGroupInput {  group: ID!    type: GroupTypeInput!    info: String    parent: ID!    template: Template   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields group(ID!):   type(GroupTypeInput!):   info(String):   parent(ID!</description>
    </item>
    
    <item>
      <title>CreateMemberInput</title>
      <link>/travelgatex/reference/inputobjects/creatememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/creatememberinput/</guid>
      <description>GraphQL schema definition type CreateMemberInput {  member: ID    info: String    type: MemberType!    group: ID!    role: ID!    resources: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID):   info(String):   type(MemberType!</description>
    </item>
    
    <item>
      <title>CreateOrganizationInput</title>
      <link>/travelgatex/reference/inputobjects/createorganizationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createorganizationinput/</guid>
      <description> GraphQL schema definition type CreateOrganizationInput {  user: ID!    info: String    organization: ID    template: OrganizationTemplate!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields user(ID!):   info(String):   organization(ID):   template(OrganizationTemplate!):    </description>
    </item>
    
    <item>
      <title>CreateProfileInput</title>
      <link>/travelgatex/reference/inputobjects/createprofileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createprofileinput/</guid>
      <description>GraphQL schema definition type CreateProfileInput {  label: String!    group: String!    type: ProfileType!    entities: EntitiesInput    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>CriteriaBookingDatesInput</title>
      <link>/hotelx/reference/inputobjects/criteriabookingdatesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/criteriabookingdatesinput/</guid>
      <description>Criteria by dates
GraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date.</description>
    </item>
    
    <item>
      <title>CriteriaBookingDatesInput</title>
      <link>/travelgatex/reference/inputobjects/criteriabookingdatesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/criteriabookingdatesinput/</guid>
      <description>Criteria by dates
GraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date.</description>
    </item>
    
    <item>
      <title>CriteriaBookingReferencesInput</title>
      <link>/hotelx/reference/inputobjects/criteriabookingreferencesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/criteriabookingreferencesinput/</guid>
      <description>Criteria by references
GraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.</description>
    </item>
    
    <item>
      <title>CriteriaBookingReferencesInput</title>
      <link>/travelgatex/reference/inputobjects/criteriabookingreferencesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/criteriabookingreferencesinput/</guid>
      <description>Criteria by references
GraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/hotelx/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/criteriasearch/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room.
GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/travelgatex/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/criteriasearch/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room.
GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Currency</title>
      <link>/hotelx/reference/scalars/currency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/currency/</guid>
      <description>The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes &amp;ldquo;EUR&amp;rdquo;.
GraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Currency</title>
      <link>/travelgatex/reference/scalars/currency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/currency/</guid>
      <description>The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes &amp;ldquo;EUR&amp;rdquo;.
GraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/hotelx/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/date/</guid>
      <description>The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/paymentx/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/date/</guid>
      <description> The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/travelgatex/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/date/</guid>
      <description>The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/hotelx/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by HotelXHotelFilterInput:  By default: Logical AND on all given filters.  HotelRuntimeConfiguration:    Board:  Board type.  Node:    Category:  Category Type  Hotel:  Hotel Type  Media:  Contains media information.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/mappea/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Node:    Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/paymentx/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by PaymentXStoredCardFilterInput:    PaymentXStoredCard:    Node:    Group:  Groups are organized hierarchically.  PointOfSale:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/stats/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/travelgatex/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Node:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>DateType</title>
      <link>/hotelx/reference/enums/datetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/datetype/</guid>
      <description> Indicates the type of dates
GraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates   </description>
    </item>
    
    <item>
      <title>DateType</title>
      <link>/travelgatex/reference/enums/datetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/datetype/</guid>
      <description> Indicates the type of dates
GraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates   </description>
    </item>
    
    <item>
      <title>DeleteGroupInput</title>
      <link>/travelgatex/reference/inputobjects/deletegroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deletegroupinput/</guid>
      <description> GraphQL schema definition type DeleteGroupInput {  group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields group(ID!):    </description>
    </item>
    
    <item>
      <title>DeleteMemberInput</title>
      <link>/travelgatex/reference/inputobjects/deletememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deletememberinput/</guid>
      <description> GraphQL schema definition type DeleteMemberInput {  member: ID!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID!):   group(ID!):    </description>
    </item>
    
    <item>
      <title>DeltaPriceInput</title>
      <link>/hotelx/reference/inputobjects/deltapriceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/deltapriceinput/</guid>
      <description>Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation.</description>
    </item>
    
    <item>
      <title>DeltaPriceInput</title>
      <link>/travelgatex/reference/inputobjects/deltapriceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deltapriceinput/</guid>
      <description>Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation.</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/hotelx/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/description/</guid>
      <description> Object description indicates the type and the description about something.
GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label   </description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/travelgatex/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/description/</guid>
      <description> Object description indicates the type and the description about something.
GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label   </description>
    </item>
    
    <item>
      <title>DescriptionType</title>
      <link>/hotelx/reference/enums/descriptiontype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/descriptiontype/</guid>
      <description> Indicates the type of description
GraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.   </description>
    </item>
    
    <item>
      <title>DescriptionType</title>
      <link>/travelgatex/reference/enums/descriptiontype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/descriptiontype/</guid>
      <description> Indicates the type of description
GraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.   </description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/hotelx/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/travelgatex/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/hotelx/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/destinationconnection/</guid>
      <description> DestinationList definition
GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/travelgatex/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationconnection/</guid>
      <description> DestinationList definition
GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/hotelx/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/travelgatex/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/hotelx/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/destinationedge/</guid>
      <description> DestinationList Edge definition
GraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Destination):   cursor(String!):    Required by DestinationConnection:  DestinationList definition   </description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/travelgatex/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationedge/</guid>
      <description> DestinationList Edge definition
GraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Destination):   cursor(String!):    Required by DestinationConnection:  DestinationList definition   </description>
    </item>
    
    <item>
      <title>DestinationType</title>
      <link>/hotelx/reference/enums/destinationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/destinationtype/</guid>
      <description> Indicates the type of destination
GraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location   </description>
    </item>
    
    <item>
      <title>DestinationType</title>
      <link>/travelgatex/reference/enums/destinationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/destinationtype/</guid>
      <description> Indicates the type of destination
GraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location   </description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/mappea/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/paymentx/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/stats/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/travelgatex/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/mappea/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/domaindata/</guid>
      <description> GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     </description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/paymentx/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/domaindata/</guid>
      <description> GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     </description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/stats/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/domaindata/</guid>
      <description> GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     </description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/travelgatex/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/domaindata/</guid>
      <description> GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/mappea/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/paymentx/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/stats/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/travelgatex/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DurationType</title>
      <link>/hotelx/reference/enums/durationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/durationtype/</guid>
      <description> Duration Type
GraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>DurationType</title>
      <link>/travelgatex/reference/enums/durationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/durationtype/</guid>
      <description> Duration Type
GraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>EntitiesInput</title>
      <link>/travelgatex/reference/inputobjects/entitiesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/entitiesinput/</guid>
      <description> GraphQL schema definition type EntitiesInput {  suppliers: [ID!]    clients: [ID!]    access: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields suppliers([ID!]):   clients([ID!]):   access([ID!]):    Required by CreateProfileInput:    UpdateEntitiesInput:     </description>
    </item>
    
    <item>
      <title>Entity</title>
      <link>/travelgatex/reference/objects/entity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entity/</guid>
      <description>GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>EntityConnection</title>
      <link>/travelgatex/reference/objects/entityconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityconnection/</guid>
      <description> GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  ProfileData:  Profile data   </description>
    </item>
    
    <item>
      <title>EntityEdge</title>
      <link>/travelgatex/reference/objects/entityedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityedge/</guid>
      <description> GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     </description>
    </item>
    
    <item>
      <title>EntityFilter</title>
      <link>/travelgatex/reference/inputobjects/entityfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/entityfilter/</guid>
      <description> GraphQL schema definition type EntityFilter {  codes: [ID!]    groups: [ID!]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields codes([ID!]):   groups([ID!]):   isActive(Boolean):   owner([ID!]):    </description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/hotelx/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/error/</guid>
      <description> Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   </description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/mappea/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/error/</guid>
      <description> Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/paymentx/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/error/</guid>
      <description> Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   </description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/stats/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/error/</guid>
      <description> Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   </description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/travelgatex/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/error/</guid>
      <description> Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/hotelx/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/exchange/</guid>
      <description>Provides information about the currency of original, and its rate applied over the results returned by the Supplier.
GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!</description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/travelgatex/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/exchange/</guid>
      <description>Provides information about the currency of original, and its rate applied over the results returned by the Supplier.
GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!</description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/hotelx/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/expiredateinput/</guid>
      <description> The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy   Required by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information   </description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/paymentx/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/expiredateinput/</guid>
      <description> The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy   Required by PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/travelgatex/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/expiredateinput/</guid>
      <description> The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy   Required by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/hotelx/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/externalmessage/</guid>
      <description> GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/mappea/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/externalmessage/</guid>
      <description> GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/paymentx/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/externalmessage/</guid>
      <description> GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/stats/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/externalmessage/</guid>
      <description> GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/travelgatex/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/externalmessage/</guid>
      <description> GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   </description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/hotelx/faqs/frequently-asked-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/faqs/frequently-asked-questions/</guid>
      <description>Hotels in test Do I have access to all the hotels in the test environment?
No, we use a test supplier, so there is a limited number of hotels in the database to be used.
Languages allowed Which are the languages allowed in HotelX?
The new aggregator allows every language, it will depend from each supplier.
Maximum hotels code How many hotels code are allowed to be requested at the same time?</description>
    </item>
    
    <item>
      <title>File</title>
      <link>/mappea/reference/objects/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/file/</guid>
      <description> GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):    Required by GetUploadedFilesData:     </description>
    </item>
    
    <item>
      <title>File</title>
      <link>/travelgatex/reference/objects/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/file/</guid>
      <description> GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):    Required by GetUploadedFilesData:     </description>
    </item>
    
    <item>
      <title>FilterInput</title>
      <link>/hotelx/reference/inputobjects/filterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/filterinput/</guid>
      <description>Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn&amp;rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: &amp;ldquo;deprecated from 2018-08-20. Please, use filterSearch&amp;rdquo;)
GraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>FilterInput</title>
      <link>/travelgatex/reference/inputobjects/filterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/filterinput/</guid>
      <description>Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn&amp;rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: &amp;ldquo;deprecated from 2018-08-20. Please, use filterSearch&amp;rdquo;)
GraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Float</title>
      <link>/hotelx/reference/scalars/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/float/</guid>
      <description>The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.
GraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>Float</title>
      <link>/travelgatex/reference/scalars/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/float/</guid>
      <description>The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.
GraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>Geoname</title>
      <link>/hotelx/reference/objects/geoname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/geoname/</guid>
      <description>Geoname type
GraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Geoname</title>
      <link>/travelgatex/reference/objects/geoname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/geoname/</guid>
      <description>Geoname type
GraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>GeonameData</title>
      <link>/hotelx/reference/objects/geonamedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/geonamedata/</guid>
      <description>Geoname data, which contain a reference to his parent location
GraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>GeonameData</title>
      <link>/travelgatex/reference/objects/geonamedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/geonamedata/</guid>
      <description>Geoname data, which contain a reference to his parent location
GraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>GetMappeaStatsData</title>
      <link>/mappea/reference/objects/getmappeastatsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getmappeastatsdata/</guid>
      <description> GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):    Required by GetMappeaStatsResponse:     </description>
    </item>
    
    <item>
      <title>GetMappeaStatsData</title>
      <link>/travelgatex/reference/objects/getmappeastatsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsdata/</guid>
      <description> GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):    Required by GetMappeaStatsResponse:     </description>
    </item>
    
    <item>
      <title>GetMappeaStatsResponse</title>
      <link>/mappea/reference/objects/getmappeastatsresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getmappeastatsresponse/</guid>
      <description> GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     </description>
    </item>
    
    <item>
      <title>GetMappeaStatsResponse</title>
      <link>/travelgatex/reference/objects/getmappeastatsresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsresponse/</guid>
      <description> GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     </description>
    </item>
    
    <item>
      <title>GetUploadedFilesData</title>
      <link>/mappea/reference/objects/getuploadedfilesdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getuploadedfilesdata/</guid>
      <description> GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields files([File]):    Required by GetUploadedFilesResponse:  ## GetUploadedFiles   </description>
    </item>
    
    <item>
      <title>GetUploadedFilesData</title>
      <link>/travelgatex/reference/objects/getuploadedfilesdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesdata/</guid>
      <description> GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields files([File]):    Required by GetUploadedFilesResponse:  ## GetUploadedFiles   </description>
    </item>
    
    <item>
      <title>GetUploadedFilesResponse</title>
      <link>/mappea/reference/objects/getuploadedfilesresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getuploadedfilesresponse/</guid>
      <description> GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     </description>
    </item>
    
    <item>
      <title>GetUploadedFilesResponse</title>
      <link>/travelgatex/reference/objects/getuploadedfilesresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesresponse/</guid>
      <description> GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     </description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/mappea/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/paymentx/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/stats/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/travelgatex/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/mappea/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/paymentx/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/stats/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/travelgatex/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/mappea/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupconnection/</guid>
      <description> GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):    Required by SupplierData:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:     </description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/paymentx/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupconnection/</guid>
      <description> GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    MemberData:    APIData:    AccessData:    SupplierData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/stats/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupconnection/</guid>
      <description> GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):    Required by AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:     </description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/travelgatex/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupconnection/</guid>
      <description> GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    GroupData:    APIData:     </description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/mappea/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/paymentx/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/stats/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/travelgatex/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/mappea/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupedge/</guid>
      <description> GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     </description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/paymentx/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupedge/</guid>
      <description> GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     </description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/stats/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupedge/</guid>
      <description> GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     </description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/travelgatex/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupedge/</guid>
      <description> GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     </description>
    </item>
    
    <item>
      <title>GroupInput</title>
      <link>/travelgatex/reference/inputobjects/groupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/groupinput/</guid>
      <description> GraphQL schema definition type GroupInput {  id: ID!    groups: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!): Id of the resource permissions to be granted.  groups([ID]): Groups that will see this resoruce.   </description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/mappea/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/grouptype/</guid>
      <description> GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/paymentx/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/grouptype/</guid>
      <description> GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/stats/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/grouptype/</guid>
      <description> GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/travelgatex/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/grouptype/</guid>
      <description> GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>GroupTypeInput</title>
      <link>/travelgatex/reference/enums/grouptypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/grouptypeinput/</guid>
      <description> GraphQL schema definition  enum GroupTypeInput{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by CreateGroupInput:     </description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/hotelx/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/holder/</guid>
      <description> Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname   Required by HotelBookingDetail:  Contains information about booking   </description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/paymentx/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/holder/</guid>
      <description> Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname   Required by PaymentXStoredCardData:     </description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/travelgatex/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/holder/</guid>
      <description> Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname   Required by HotelBookingDetail:  Contains information about booking  PaymentXStoredCardData:     </description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/hotelx/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/holderinput/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname   Required by HotelBookInput:  Criteria of book.</description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/paymentx/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/holderinput/</guid>
      <description> Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname   Required by PaymentXStoredCardFilterInput:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/travelgatex/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/holderinput/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname   Required by PaymentXStoredCardFilterInput:    HotelBookInput:  Criteria of book.</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/hotelx/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/travelgatex/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelBookInput</title>
      <link>/hotelx/reference/inputobjects/hotelbookinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelbookinput/</guid>
      <description>Criteria of book.
GraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>HotelBookInput</title>
      <link>/travelgatex/reference/inputobjects/hotelbookinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelbookinput/</guid>
      <description>Criteria of book.
GraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/hotelx/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/travelgatex/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/hotelx/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelbooking/</guid>
      <description>GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/travelgatex/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbooking/</guid>
      <description>GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/hotelx/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking
GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/travelgatex/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking
GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/hotelx/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier&amp;#39;s system  cancelReference(String): Cancellation ID in the Supplier&amp;#39;s system  status(BookStatusType): Booking Status.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/travelgatex/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier&amp;#39;s system  cancelReference(String): Cancellation ID in the Supplier&amp;#39;s system  status(BookStatusType): Booking Status.</description>
    </item>
    
    <item>
      <title>HotelCancelInput</title>
      <link>/hotelx/reference/inputobjects/hotelcancelinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelcancelinput/</guid>
      <description>Cancellation Criteria.
GraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.</description>
    </item>
    
    <item>
      <title>HotelCancelInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcancelinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcancelinput/</guid>
      <description>Cancellation Criteria.
GraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/hotelx/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/travelgatex/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/hotelx/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/travelgatex/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!</description>
    </item>
    
    <item>
      <title>HotelCriteriaBookingInput</title>
      <link>/hotelx/reference/inputobjects/hotelcriteriabookinginput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelcriteriabookinginput/</guid>
      <description>Criteria of book contains basic information to find a book or books.
GraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelCriteriaBookingInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriabookinginput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriabookinginput/</guid>
      <description>Criteria of book contains basic information to find a book or books.
GraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelCriteriaQuoteInput</title>
      <link>/hotelx/reference/inputobjects/hotelcriteriaquoteinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelcriteriaquoteinput/</guid>
      <description> The quote criteria contains the option reference id, block and language.
GraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request   </description>
    </item>
    
    <item>
      <title>HotelCriteriaQuoteInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/</guid>
      <description> The quote criteria contains the option reference id, block and language.
GraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request   </description>
    </item>
    
    <item>
      <title>HotelCriteriaSearchInput</title>
      <link>/hotelx/reference/inputobjects/hotelcriteriasearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelcriteriasearchinput/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.
GraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelCriteriaSearchInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriasearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriasearchinput/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.
GraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/hotelx/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/travelgatex/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/hotelx/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hoteledge/</guid>
      <description> HotelList Edge definition
GraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):    Required by HotelConnection:  HotelList definition   </description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/travelgatex/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteledge/</guid>
      <description> HotelList Edge definition
GraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):    Required by HotelConnection:  HotelList definition   </description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/hotelx/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote(s)
GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.</description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/travelgatex/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote(s)
GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/hotelx/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description
GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/travelgatex/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description
GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/hotelx/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelquote/</guid>
      <description>GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/travelgatex/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelquote/</guid>
      <description>GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfiguration</title>
      <link>/hotelx/reference/objects/hotelruntimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelruntimeconfiguration/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfiguration</title>
      <link>/travelgatex/reference/objects/hotelruntimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeconfiguration/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfigurationData</title>
      <link>/hotelx/reference/objects/hotelruntimeconfigurationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelruntimeconfigurationdata/</guid>
      <description> GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object   Required by HotelRuntimeConfiguration:     </description>
    </item>
    
    <item>
      <title>HotelRuntimeConfigurationData</title>
      <link>/travelgatex/reference/objects/hotelruntimeconfigurationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeconfigurationdata/</guid>
      <description> GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object   Required by HotelRuntimeConfiguration:     </description>
    </item>
    
    <item>
      <title>HotelRuntimeParameter</title>
      <link>/hotelx/reference/objects/hotelruntimeparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelruntimeparameter/</guid>
      <description>template of all fields used by the supplier
GraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelRuntimeParameter</title>
      <link>/travelgatex/reference/objects/hotelruntimeparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeparameter/</guid>
      <description>template of all fields used by the supplier
GraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/hotelx/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelsearch/</guid>
      <description>Results from Avail Hotel; contains all the available options for a given date and itinerary
GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/travelgatex/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelsearch/</guid>
      <description>Results from Avail Hotel; contains all the available options for a given date and itinerary
GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelSettingsInput</title>
      <link>/hotelx/reference/inputobjects/hotelsettingsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelsettingsinput/</guid>
      <description>Settings that you can edit for this avail. Values are loaded by default in our Back Office.
GraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!</description>
    </item>
    
    <item>
      <title>HotelSettingsInput</title>
      <link>/travelgatex/reference/inputobjects/hotelsettingsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelsettingsinput/</guid>
      <description>Settings that you can edit for this avail. Values are loaded by default in our Back Office.
GraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!</description>
    </item>
    
    <item>
      <title>HotelXAccessInput</title>
      <link>/hotelx/reference/inputobjects/hotelxaccessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxaccessinput/</guid>
      <description>AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.
GraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXAccessInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxaccessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxaccessinput/</guid>
      <description>AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.
GraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXAudit</title>
      <link>/hotelx/reference/objects/hotelxaudit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxaudit/</guid>
      <description> GraphQL schema definition type HotelXAudit {  audit: Int    register: Int    ratio: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Int):   register(Int):   ratio(Int):    Required by HotelXCommonSettingsData:     </description>
    </item>
    
    <item>
      <title>HotelXAudit</title>
      <link>/travelgatex/reference/objects/hotelxaudit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxaudit/</guid>
      <description> GraphQL schema definition type HotelXAudit {  audit: Int    register: Int    ratio: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Int):   register(Int):   ratio(Int):    Required by HotelXCommonSettingsData:     </description>
    </item>
    
    <item>
      <title>HotelXAuditInput</title>
      <link>/hotelx/reference/inputobjects/hotelxauditinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxauditinput/</guid>
      <description> GraphQL schema definition type HotelXAuditInput {  audit: Boolean!    register: Boolean!    ratio: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Boolean!):   register(Boolean!):   ratio(Int!): Ratio of audit in ms   Required by HotelXCommonSettingsDataInput:     </description>
    </item>
    
    <item>
      <title>HotelXAuditInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxauditinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxauditinput/</guid>
      <description> GraphQL schema definition type HotelXAuditInput {  audit: Boolean!    register: Boolean!    ratio: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Boolean!):   register(Boolean!):   ratio(Int!): Ratio of audit in ms   Required by HotelXCommonSettingsDataInput:     </description>
    </item>
    
    <item>
      <title>HotelXBoardQueryInput</title>
      <link>/hotelx/reference/inputobjects/hotelxboardqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxboardqueryinput/</guid>
      <description> GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.   </description>
    </item>
    
    <item>
      <title>HotelXBoardQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxboardqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxboardqueryinput/</guid>
      <description> GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.   </description>
    </item>
    
    <item>
      <title>HotelXBusinessRulesInput</title>
      <link>/hotelx/reference/inputobjects/hotelxbusinessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxbusinessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>HotelXBusinessRulesInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>HotelXCategoryQueryInput</title>
      <link>/hotelx/reference/inputobjects/hotelxcategoryqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxcategoryqueryinput/</guid>
      <description> GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.   </description>
    </item>
    
    <item>
      <title>HotelXCategoryQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/</guid>
      <description> GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.   </description>
    </item>
    
    <item>
      <title>HotelXCommonSettings</title>
      <link>/hotelx/reference/objects/hotelxcommonsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxcommonsettings/</guid>
      <description> GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages   Required by HotelXQuery:    HotelXMutation:     </description>
    </item>
    
    <item>
      <title>HotelXCommonSettings</title>
      <link>/travelgatex/reference/objects/hotelxcommonsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxcommonsettings/</guid>
      <description> GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages   Required by HotelXQuery:    HotelXMutation:     </description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsData</title>
      <link>/hotelx/reference/objects/hotelxcommonsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxcommonsettingsdata/</guid>
      <description> GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout    audit: HotelXAudit   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   audit(HotelXAudit):    Required by HotelXCommonSettings:     </description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsData</title>
      <link>/travelgatex/reference/objects/hotelxcommonsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxcommonsettingsdata/</guid>
      <description> GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout    audit: HotelXAudit   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   audit(HotelXAudit):    Required by HotelXCommonSettings:     </description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsDataInput</title>
      <link>/hotelx/reference/inputobjects/hotelxcommonsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxcommonsettingsdatainput/</guid>
      <description> GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!    audit: HotelXAuditInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   audit(HotelXAuditInput!):    </description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsDataInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/</guid>
      <description> GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!    audit: HotelXAuditInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   audit(HotelXAuditInput!):    </description>
    </item>
    
    <item>
      <title>HotelXDefaultPlugin</title>
      <link>/hotelx/reference/objects/hotelxdefaultplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxdefaultplugin/</guid>
      <description>GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPlugin</title>
      <link>/travelgatex/reference/objects/hotelxdefaultplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultplugin/</guid>
      <description>GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginInput</title>
      <link>/hotelx/reference/inputobjects/hotelxdefaultplugininput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxdefaultplugininput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultplugininput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultplugininput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStep</title>
      <link>/hotelx/reference/objects/hotelxdefaultpluginstep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxdefaultpluginstep/</guid>
      <description> GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):    </description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStep</title>
      <link>/travelgatex/reference/objects/hotelxdefaultpluginstep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultpluginstep/</guid>
      <description> GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):    </description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStepInput</title>
      <link>/hotelx/reference/inputobjects/hotelxdefaultpluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxdefaultpluginstepinput/</guid>
      <description> GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):    </description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStepInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/</guid>
      <description> GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):    </description>
    </item>
    
    <item>
      <title>HotelXDefaultSettings</title>
      <link>/hotelx/reference/objects/hotelxdefaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxdefaultsettings/</guid>
      <description> GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages   Required by HotelXQuery:    HotelXMutation:     </description>
    </item>
    
    <item>
      <title>HotelXDefaultSettings</title>
      <link>/travelgatex/reference/objects/hotelxdefaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultsettings/</guid>
      <description> GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages   Required by HotelXQuery:    HotelXMutation:     </description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsData</title>
      <link>/hotelx/reference/objects/hotelxdefaultsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxdefaultsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsData {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsData</title>
      <link>/travelgatex/reference/objects/hotelxdefaultsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsData {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsDataInput</title>
      <link>/hotelx/reference/inputobjects/hotelxdefaultsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxdefaultsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsDataInput {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsDataInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsDataInput {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXDestinationListInput</title>
      <link>/hotelx/reference/inputobjects/hotelxdestinationlistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxdestinationlistinput/</guid>
      <description> GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page   </description>
    </item>
    
    <item>
      <title>HotelXDestinationListInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdestinationlistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdestinationlistinput/</guid>
      <description> GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page   </description>
    </item>
    
    <item>
      <title>HotelXDestinationSearcherInput</title>
      <link>/hotelx/reference/inputobjects/hotelxdestinationsearcherinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxdestinationsearcherinput/</guid>
      <description> GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type   </description>
    </item>
    
    <item>
      <title>HotelXDestinationSearcherInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/</guid>
      <description> GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type   </description>
    </item>
    
    <item>
      <title>HotelXFilterInput</title>
      <link>/hotelx/reference/inputobjects/hotelxfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxfilterinput/</guid>
      <description> GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded   </description>
    </item>
    
    <item>
      <title>HotelXFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfilterinput/</guid>
      <description> GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded   </description>
    </item>
    
    <item>
      <title>HotelXFilterPluginTypeInput</title>
      <link>/hotelx/reference/inputobjects/hotelxfilterplugintypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxfilterplugintypeinput/</guid>
      <description>GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!</description>
    </item>
    
    <item>
      <title>HotelXFilterPluginTypeInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/</guid>
      <description>GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!</description>
    </item>
    
    <item>
      <title>HotelXFilterSearchInput</title>
      <link>/hotelx/reference/inputobjects/hotelxfiltersearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxfiltersearchinput/</guid>
      <description>GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.</description>
    </item>
    
    <item>
      <title>HotelXFilterSearchInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfiltersearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfiltersearchinput/</guid>
      <description>GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.</description>
    </item>
    
    <item>
      <title>HotelXHotelFilterInput</title>
      <link>/hotelx/reference/inputobjects/hotelxhotelfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxhotelfilterinput/</guid>
      <description>By default: Logical AND on all given filters.
GraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXHotelFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxhotelfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxhotelfilterinput/</guid>
      <description>By default: Logical AND on all given filters.
GraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXHotelListInput</title>
      <link>/hotelx/reference/inputobjects/hotelxhotellistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxhotellistinput/</guid>
      <description>GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelXHotelListInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxhotellistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxhotellistinput/</guid>
      <description>GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/travelgatex/reference/objects/hotelxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxmutation/</guid>
      <description>GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!</description>
    </item>
    
    <item>
      <title>HotelXParameter</title>
      <link>/hotelx/reference/objects/hotelxparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxparameter/</guid>
      <description> GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!):   value(String!):    </description>
    </item>
    
    <item>
      <title>HotelXParameter</title>
      <link>/travelgatex/reference/objects/hotelxparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxparameter/</guid>
      <description> GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!):   value(String!):    </description>
    </item>
    
    <item>
      <title>HotelXPluginFilterInput</title>
      <link>/hotelx/reference/inputobjects/hotelxpluginfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxpluginfilterinput/</guid>
      <description> GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude   Required by HotelXFilterSearchInput:    HotelXFilterInput:     </description>
    </item>
    
    <item>
      <title>HotelXPluginFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxpluginfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxpluginfilterinput/</guid>
      <description> GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude   Required by HotelXFilterSearchInput:    HotelXFilterInput:     </description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/hotelx/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/schema/query/</guid>
      <description>GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!</description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/travelgatex/reference/objects/hotelxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxquery/</guid>
      <description>GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!</description>
    </item>
    
    <item>
      <title>HotelXRoomQueryInput</title>
      <link>/hotelx/reference/inputobjects/hotelxroomqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxroomqueryinput/</guid>
      <description>GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.</description>
    </item>
    
    <item>
      <title>HotelXRoomQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxroomqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxroomqueryinput/</guid>
      <description>GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.</description>
    </item>
    
    <item>
      <title>HotelXSupplierInput</title>
      <link>/hotelx/reference/inputobjects/hotelxsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/hotelxsupplierinput/</guid>
      <description>Supplier object. Contains its own settings, code and access.
GraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier.</description>
    </item>
    
    <item>
      <title>HotelXSupplierInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxsupplierinput/</guid>
      <description>Supplier object. Contains its own settings, code and access.
GraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier.</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatus</title>
      <link>/hotelx/reference/objects/hotelxupdatestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxupdatestatus/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatus</title>
      <link>/travelgatex/reference/objects/hotelxupdatestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxupdatestatus/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatusData</title>
      <link>/hotelx/reference/objects/hotelxupdatestatusdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/hotelxupdatestatusdata/</guid>
      <description> GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):    Required by HotelXUpdateStatus:     </description>
    </item>
    
    <item>
      <title>HotelXUpdateStatusData</title>
      <link>/travelgatex/reference/objects/hotelxupdatestatusdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxupdatestatusdata/</guid>
      <description> GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):    Required by HotelXUpdateStatus:     </description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/hotelx/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by HotelXBoardQueryInput:    HotelXCategoryQueryInput:    HotelXHotelListInput:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/mappea/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by MappeaMapSupplierInput:  # MapSupplier  MappeaSupplierConfirmedInput:    SupplierDetected:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  SupplierData:    Node:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/paymentx/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/stats/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by Stats:  The service used to access the stats of every connection that uses the HUB  AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/travelgatex/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by AccessFilter:    SupplierFilter:    ClientFilter:    ServiceApi:  Information related to a Service API  PointOfSaleFilter:    ProfileFilter:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/hotelx/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/int/</guid>
      <description>The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.</description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/mappea/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by File:    GetMappeaStatsData:    MappeaConfirmUploadInput:  ## ConfirmUpload  MappeaMapSupplierInput:  # MapSupplier  UploadFileData:    SupplierDetected:    SupplierData:    GroupData:     </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/paymentx/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by PaymentXExpireDate:  The card expiration date  GroupData:    SupplierData:    ExpireDateInput:  The card expiration date   </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/stats/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by Ratios:  Ratios details  OperationDetailed:  Stats information per operation  SupplierData:    GroupData:    StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/travelgatex/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/int/</guid>
      <description>The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by SupplierFilter:    SupplierData:    GroupData:    ServiceOperation:  Information related to an API operation  RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>/hotelx/reference/scalars/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/json/</guid>
      <description> The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: &amp;ldquo;{\&amp;ldquo;int\&amp;rdquo;: 1, \&amp;ldquo;string\&amp;rdquo;: \&amp;ldquo;value\&amp;ldquo;}&amp;rdquo;.
GraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   </description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>/travelgatex/reference/scalars/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/json/</guid>
      <description> The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: &amp;ldquo;{\&amp;ldquo;int\&amp;rdquo;: 1, \&amp;ldquo;string\&amp;rdquo;: \&amp;ldquo;value\&amp;ldquo;}&amp;rdquo;.
GraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   </description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>/travelgatex/reference/scalars/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/jwt/</guid>
      <description> JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.
GraphQL schema definition scalar JWT   Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>Language</title>
      <link>/hotelx/reference/scalars/language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/language/</guid>
      <description>The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes &amp;ldquo;en&amp;rdquo;.
GraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Language</title>
      <link>/travelgatex/reference/scalars/language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/language/</guid>
      <description>The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes &amp;ldquo;en&amp;rdquo;.
GraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/hotelx/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/location/</guid>
      <description>Indicates the location of the hotel
GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/travelgatex/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/location/</guid>
      <description>Indicates the location of the hotel
GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/mappea/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/paymentx/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/stats/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/travelgatex/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/mappea/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupconnection/</guid>
      <description> GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     </description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/paymentx/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupconnection/</guid>
      <description> GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     </description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/stats/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupconnection/</guid>
      <description> GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     </description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/travelgatex/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupconnection/</guid>
      <description> GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     </description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/mappea/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/paymentx/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/stats/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/travelgatex/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/mappea/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupedge/</guid>
      <description> GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/paymentx/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupedge/</guid>
      <description> GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/stats/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupedge/</guid>
      <description> GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/travelgatex/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupedge/</guid>
      <description> GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/hotelx/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/map/</guid>
      <description> Map codes.
GraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.   </description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/travelgatex/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/map/</guid>
      <description> Map codes.
GraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.   </description>
    </item>
    
    <item>
      <title>MappeaConfirmUploadInput</title>
      <link>/mappea/reference/inputobjects/mappeaconfirmuploadinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeaconfirmuploadinput/</guid>
      <description> ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):    </description>
    </item>
    
    <item>
      <title>MappeaConfirmUploadInput</title>
      <link>/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/</guid>
      <description> ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):    </description>
    </item>
    
    <item>
      <title>MappeaGetMappeaStatsInput</title>
      <link>/mappea/reference/inputobjects/mappeagetmappeastatsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeagetmappeastatsinput/</guid>
      <description> GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):    </description>
    </item>
    
    <item>
      <title>MappeaGetMappeaStatsInput</title>
      <link>/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/</guid>
      <description> GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):    </description>
    </item>
    
    <item>
      <title>MappeaMapSupplierInput</title>
      <link>/mappea/reference/inputobjects/mappeamapsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeamapsupplierinput/</guid>
      <description> MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):    </description>
    </item>
    
    <item>
      <title>MappeaMapSupplierInput</title>
      <link>/travelgatex/reference/inputobjects/mappeamapsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeamapsupplierinput/</guid>
      <description> MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):    </description>
    </item>
    
    <item>
      <title>MappeaMutation</title>
      <link>/travelgatex/reference/objects/mappeamutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeamutation/</guid>
      <description>GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!</description>
    </item>
    
    <item>
      <title>MappeaQuery</title>
      <link>/mappea/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/schema/query/</guid>
      <description> GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):    </description>
    </item>
    
    <item>
      <title>MappeaQuery</title>
      <link>/travelgatex/reference/objects/mappeaquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeaquery/</guid>
      <description>GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):    Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>MappeaSupplierConfirmedInput</title>
      <link>/mappea/reference/inputobjects/mappeasupplierconfirmedinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeasupplierconfirmedinput/</guid>
      <description> GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):    </description>
    </item>
    
    <item>
      <title>MappeaSupplierConfirmedInput</title>
      <link>/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/</guid>
      <description> GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):    </description>
    </item>
    
    <item>
      <title>MappeaUploadFileInput</title>
      <link>/mappea/reference/inputobjects/mappeauploadfileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeauploadfileinput/</guid>
      <description>UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!</description>
    </item>
    
    <item>
      <title>MappeaUploadFileInput</title>
      <link>/travelgatex/reference/inputobjects/mappeauploadfileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeauploadfileinput/</guid>
      <description>UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/hotelx/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/travelgatex/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/hotelx/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/travelgatex/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/hotelx/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/travelgatex/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/hotelx/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/travelgatex/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>MarkupRuleType</title>
      <link>/hotelx/reference/enums/markupruletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/markupruletype/</guid>
      <description> Indicates what type of value is the markup, by percentage or is an import.
GraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:     </description>
    </item>
    
    <item>
      <title>MarkupRuleType</title>
      <link>/travelgatex/reference/enums/markupruletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/markupruletype/</guid>
      <description> Indicates what type of value is the markup, by percentage or is an import.
GraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:     </description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/hotelx/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/travelgatex/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/mappea/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/paymentx/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/stats/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/travelgatex/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/mappea/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberconnection/</guid>
      <description> GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/paymentx/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberconnection/</guid>
      <description> GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/stats/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberconnection/</guid>
      <description> GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/travelgatex/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberconnection/</guid>
      <description> GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/mappea/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/paymentx/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/stats/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/travelgatex/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/mappea/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberedge/</guid>
      <description> GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     </description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/paymentx/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberedge/</guid>
      <description> GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     </description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/stats/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberedge/</guid>
      <description> GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     </description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/travelgatex/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberedge/</guid>
      <description> GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     </description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/mappea/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/membertype/</guid>
      <description> GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     </description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/paymentx/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/membertype/</guid>
      <description> GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     </description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/stats/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/membertype/</guid>
      <description> GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     </description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/travelgatex/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/membertype/</guid>
      <description> GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    CreateMemberInput:     </description>
    </item>
    
    <item>
      <title>MetadataType</title>
      <link>/hotelx/reference/enums/metadatatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/metadatatype/</guid>
      <description> Indicates value type of current paramter
GraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier   </description>
    </item>
    
    <item>
      <title>MetadataType</title>
      <link>/travelgatex/reference/enums/metadatatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/metadatatype/</guid>
      <description> Indicates value type of current paramter
GraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier   </description>
    </item>
    
    <item>
      <title>Method</title>
      <link>/travelgatex/reference/enums/method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/method/</guid>
      <description> GraphQL schema definition  enum Method{   ADD,    DEL,   }   Required by UpdateMemberInput:     </description>
    </item>
    
    <item>
      <title>ModeType</title>
      <link>/stats/reference/enums/modetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/modetype/</guid>
      <description> Mode to select which kind of stats do you want query
GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)   </description>
    </item>
    
    <item>
      <title>ModeType</title>
      <link>/travelgatex/reference/enums/modetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/modetype/</guid>
      <description> Mode to select which kind of stats do you want query
GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)   </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/hotelx/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/interfaces/node/</guid>
      <description> GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/mappea/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/interfaces/node/</guid>
      <description> GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/paymentx/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/interfaces/node/</guid>
      <description> GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/stats/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/interfaces/node/</guid>
      <description> GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/travelgatex/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/node/</guid>
      <description> GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   </description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/hotelx/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/occupancy/</guid>
      <description> Information about occupancy.
GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.   </description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/travelgatex/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/occupancy/</guid>
      <description> Information about occupancy.
GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.   </description>
    </item>
    
    <item>
      <title>OnlyStatusResponse</title>
      <link>/mappea/reference/objects/onlystatusresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/onlystatusresponse/</guid>
      <description> Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):    Required by MappeaMutation:     </description>
    </item>
    
    <item>
      <title>OnlyStatusResponse</title>
      <link>/travelgatex/reference/objects/onlystatusresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/onlystatusresponse/</guid>
      <description> Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):    Required by MappeaMutation:     </description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/mappea/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/paymentx/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/stats/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/travelgatex/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/mappea/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationconnection/</guid>
      <description> GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     </description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/paymentx/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationconnection/</guid>
      <description> GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     </description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/stats/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationconnection/</guid>
      <description> GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     </description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/travelgatex/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationconnection/</guid>
      <description> GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  APIData:     </description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/mappea/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/paymentx/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/stats/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/travelgatex/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/stats/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/travelgatex/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/mappea/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationedge/</guid>
      <description> GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     </description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/paymentx/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationedge/</guid>
      <description> GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     </description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/stats/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationedge/</guid>
      <description> GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     </description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/travelgatex/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationedge/</guid>
      <description> GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/mappea/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/paymentx/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/stats/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/travelgatex/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/mappea/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/paymentx/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/stats/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/travelgatex/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>OrganizationConnection</title>
      <link>/travelgatex/reference/objects/organizationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationconnection/</guid>
      <description> GraphQL schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/mappea/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/paymentx/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/stats/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/travelgatex/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationEdge</title>
      <link>/travelgatex/reference/objects/organizationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationedge/</guid>
      <description> GraphQL schema definition type OrganizationEdge {  node: Organization    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Organization):   cursor(String!):    Required by OrganizationConnection:     </description>
    </item>
    
    <item>
      <title>OrganizationTemplate</title>
      <link>/travelgatex/reference/enums/organizationtemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/organizationtemplate/</guid>
      <description> GraphQL schema definition  enum OrganizationTemplate{   ORGANIZATION_DEFAULT,   }   Required by CreateOrganizationInput:     </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/channelx/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/channelx/overview/</guid>
      <description>Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:
 Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself!</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/flightx/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/flightx/overview/</guid>
      <description>This page shows you how to perform basic hotel book using GraphQL Playground.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/getting-started/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/overview/</guid>
      <description>TravelgateX provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface).
Completely rebuilt in GraphQL from our many years of experience with travel XML integrations, we are offering state of the art, cutting edge API technology that is quick to learn and makes integration simple and fast.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/hotelx/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/overview/</guid>
      <description>The HotelX API is a powerful accomodation aggregation solution that will speed up your travel websites and apps and expand your catalogue of hotel booking services.
Using HotelX, you can improve your hotel search response times and their accuracy by customizing aggregated responses based on your preferred criteria.
The below map shows our architecture and the average impact on response rates caused by each layer.
  Each and every layer described in the this figure is explained as follows:</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/hotelx/plugins/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/overview/</guid>
      <description>Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific functionalities. Any Partner can develop custom Plugins, nevertheless HotelX, HotelX has developed many Plugins available for anyone to use out of the box.
Flows HotelX query or mutation determine what flow is executed. Plugins can be executed in different Queries or Mutations:
 Search Quote Book Cancel  Steps Step is the minium container where plugins are executed sequentially.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/insights/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights/overview/</guid>
      <description>This page shows you how to perform basic hotel book using GraphQL Playground.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/mappea/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/overview/</guid>
      <description>{{ % wip % }}</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/stats/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/overview/</guid>
      <description>This page shows you how to perform basic hotel book using GraphQL Playground.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/travelgatex/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/overview/</guid>
      <description>This page provides an overview of the TravelgateX platform.
GraphQL Gateway TravelgateX is the travel API completely based in GraphQL. Unlike many legacy XML Soap APIs, GraphQL enables each client to ask for and receive exactly the data that is needed. Learn more by reading our Learning GraphQL guides.
Our Gateway is the only endpoint to access all of our APIs. It is written in NodeJS. This makes it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/travelgatex/security/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/security/overview/</guid>
      <description>This page describes the how security is implemented in TravelgateX platform.
Introduction TravelgateX offers a fine-grained access control and visibility for centrally managing Resources, which are granted to Partners belonging to Organizations.
Authentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it&amp;rsquo;s an API Key or a JSON Web Token (JWT).</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/hotelx/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/pageinfo/</guid>
      <description> GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by BoardConnection:  BoardList definition  CategoryConnection:  CategoryList definition  HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition   </description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/mappea/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/pageinfo/</guid>
      <description> GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by AccessConnection:    GroupConnection:    MemberConnection:    APIConnection:    ProductConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/paymentx/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pageinfo/</guid>
      <description> GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by PaymentXStoredCardConnection:    GroupConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ProductConnection:     </description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/stats/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/pageinfo/</guid>
      <description> GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by StatsConnection:    GroupConnection:    AccessConnection:    MemberConnection:    APIConnection:    ProductConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ManagedGroupConnection:     </description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/travelgatex/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pageinfo/</guid>
      <description> GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by AccessConnection:    SupplierConnection:    ClientConnection:    PointOfSaleConnection:    ProfileConnection:    EntityConnection:    OrganizationConnection:    ProductConnection:    MemberConnection:    GroupConnection:    APIConnection:    ResourceConnection:    RoleConnection:    OperationConnection:    ManagedGroupConnection:    BoardConnection:  BoardList definition  CategoryConnection:  CategoryList definition  HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  PaymentXStoredCardConnection:    StatsConnection:     </description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/mappea/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/paymentx/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/stats/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/travelgatex/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>ParameterInput</title>
      <link>/hotelx/reference/inputobjects/parameterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/parameterinput/</guid>
      <description>Parameters Input.
GraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.</description>
    </item>
    
    <item>
      <title>ParameterInput</title>
      <link>/travelgatex/reference/inputobjects/parameterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/parameterinput/</guid>
      <description>Parameters Input.
GraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.</description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/hotelx/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/pax/</guid>
      <description> Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.   </description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/travelgatex/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pax/</guid>
      <description> Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.   </description>
    </item>
    
    <item>
      <title>PaxInput</title>
      <link>/hotelx/reference/inputobjects/paxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/paxinput/</guid>
      <description> Pax object that contains the pax age.
GraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Pax age.   </description>
    </item>
    
    <item>
      <title>PaxInput</title>
      <link>/travelgatex/reference/inputobjects/paxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paxinput/</guid>
      <description> Pax object that contains the pax age.
GraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Pax age.   </description>
    </item>
    
    <item>
      <title>PaymentCardInput</title>
      <link>/hotelx/reference/inputobjects/paymentcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/paymentcardinput/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentCardInput</title>
      <link>/travelgatex/reference/inputobjects/paymentcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentcardinput/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentType</title>
      <link>/hotelx/reference/enums/paymenttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/paymenttype/</guid>
      <description> Options payment type
GraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description   </description>
    </item>
    
    <item>
      <title>PaymentType</title>
      <link>/travelgatex/reference/enums/paymenttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/paymenttype/</guid>
      <description> Options payment type
GraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description   </description>
    </item>
    
    <item>
      <title>PaymentXExpireDate</title>
      <link>/paymentx/reference/objects/paymentxexpiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxexpiredate/</guid>
      <description> The card expiration date
GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy   Required by PaymentXStoredCardData:     </description>
    </item>
    
    <item>
      <title>PaymentXExpireDate</title>
      <link>/travelgatex/reference/objects/paymentxexpiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxexpiredate/</guid>
      <description> The card expiration date
GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy   Required by PaymentXStoredCardData:     </description>
    </item>
    
    <item>
      <title>PaymentXMutation</title>
      <link>/travelgatex/reference/objects/paymentxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxmutation/</guid>
      <description>GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card   Required by Mutation:  The root query for implementing GraphQL mutations.</description>
    </item>
    
    <item>
      <title>PaymentXQuery</title>
      <link>/paymentx/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/schema/query/</guid>
      <description>GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!</description>
    </item>
    
    <item>
      <title>PaymentXQuery</title>
      <link>/travelgatex/reference/objects/paymentxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxquery/</guid>
      <description>GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCard</title>
      <link>/paymentx/reference/objects/paymentxstoredcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcard/</guid>
      <description>GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCard</title>
      <link>/travelgatex/reference/objects/paymentxstoredcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcard/</guid>
      <description>GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardConnection</title>
      <link>/paymentx/reference/objects/paymentxstoredcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcardconnection/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):    Required by PaymentXQuery:     </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardConnection</title>
      <link>/travelgatex/reference/objects/paymentxstoredcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcardconnection/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):    Required by PaymentXQuery:     </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardData</title>
      <link>/paymentx/reference/objects/paymentxstoredcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcarddata/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardData</title>
      <link>/travelgatex/reference/objects/paymentxstoredcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcarddata/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardEdge</title>
      <link>/paymentx/reference/objects/paymentxstoredcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcardedge/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):    Required by PaymentXStoredCardConnection:     </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardEdge</title>
      <link>/travelgatex/reference/objects/paymentxstoredcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcardedge/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):    Required by PaymentXStoredCardConnection:     </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardFilterInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardFilterInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardIDInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardidinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardidinput/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query   </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardIDInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardidinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardidinput/</guid>
      <description> GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query   </description>
    </item>
    
    <item>
      <title>PaymentXStoredCardInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PluginStepInput</title>
      <link>/hotelx/reference/inputobjects/pluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/pluginstepinput/</guid>
      <description> Plugin to execute.
GraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.   </description>
    </item>
    
    <item>
      <title>PluginStepInput</title>
      <link>/travelgatex/reference/inputobjects/pluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pluginstepinput/</guid>
      <description> Plugin to execute.
GraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.   </description>
    </item>
    
    <item>
      <title>PluginStepType</title>
      <link>/hotelx/reference/enums/pluginsteptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/pluginsteptype/</guid>
      <description> Plugin Step Type. https://docs.travelgatex.com/hotelx/plugins/overview/
GraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:     </description>
    </item>
    
    <item>
      <title>PluginStepType</title>
      <link>/travelgatex/reference/enums/pluginsteptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/pluginsteptype/</guid>
      <description> Plugin Step Type. https://docs.travelgatex.com/hotelx/plugins/overview/
GraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:     </description>
    </item>
    
    <item>
      <title>PluginType</title>
      <link>/hotelx/reference/enums/plugintype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/plugintype/</guid>
      <description> Plugin Type. https://docs.travelgatex.com/hotelx/plugins/overview/
GraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:     </description>
    </item>
    
    <item>
      <title>PluginType</title>
      <link>/travelgatex/reference/enums/plugintype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/plugintype/</guid>
      <description> Plugin Type. https://docs.travelgatex.com/hotelx/plugins/overview/
GraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:     </description>
    </item>
    
    <item>
      <title>PluginsInput</title>
      <link>/hotelx/reference/inputobjects/pluginsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/pluginsinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!</description>
    </item>
    
    <item>
      <title>PluginsInput</title>
      <link>/travelgatex/reference/inputobjects/pluginsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pluginsinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/paymentx/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/travelgatex/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PointOfSaleConnection</title>
      <link>/travelgatex/reference/objects/pointofsaleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleconnection/</guid>
      <description> GraphQL schema definition type PointOfSaleConnection {  edges: [PointOfSaleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PointOfSaleEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/paymentx/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsaledata/</guid>
      <description> GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner   Required by PointOfSale:     </description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/travelgatex/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaledata/</guid>
      <description> GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner   Required by PointOfSale:     </description>
    </item>
    
    <item>
      <title>PointOfSaleEdge</title>
      <link>/travelgatex/reference/objects/pointofsaleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleedge/</guid>
      <description> GraphQL schema definition type PointOfSaleEdge {  node: PointOfSale    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(PointOfSale):   cursor(String!):    Required by PointOfSaleConnection:     </description>
    </item>
    
    <item>
      <title>PointOfSaleFilter</title>
      <link>/travelgatex/reference/inputobjects/pointofsalefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pointofsalefilter/</guid>
      <description> GraphQL schema definition type PointOfSaleFilter {  code: [ID]    groupID: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code([ID]):   groupID([ID]):   owner([ID!]):    </description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/hotelx/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.
GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/travelgatex/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.
GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/hotelx/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/travelgatex/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.</description>
    </item>
    
    <item>
      <title>Priceable</title>
      <link>/hotelx/reference/interfaces/priceable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/interfaces/priceable/</guid>
      <description>GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!</description>
    </item>
    
    <item>
      <title>Priceable</title>
      <link>/travelgatex/reference/interfaces/priceable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/priceable/</guid>
      <description>GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/mappea/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/paymentx/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/stats/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/travelgatex/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/mappea/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productconnection/</guid>
      <description> GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     </description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/paymentx/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productconnection/</guid>
      <description> GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     </description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/stats/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productconnection/</guid>
      <description> GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     </description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/travelgatex/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productconnection/</guid>
      <description> GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:     </description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/mappea/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/paymentx/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/stats/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/travelgatex/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/mappea/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productedge/</guid>
      <description> GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     </description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/paymentx/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productedge/</guid>
      <description> GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     </description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/stats/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productedge/</guid>
      <description> GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     </description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/travelgatex/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productedge/</guid>
      <description> GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     </description>
    </item>
    
    <item>
      <title>Profile</title>
      <link>/travelgatex/reference/objects/profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profile/</guid>
      <description>GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ProfileConnection</title>
      <link>/travelgatex/reference/objects/profileconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileconnection/</guid>
      <description> GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>ProfileData</title>
      <link>/travelgatex/reference/objects/profiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profiledata/</guid>
      <description>Profile data
GraphQL schema definition type ProfileData {  code: ID!    label: String    type: ProfileType    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ProfileEdge</title>
      <link>/travelgatex/reference/objects/profileedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileedge/</guid>
      <description> GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     </description>
    </item>
    
    <item>
      <title>ProfileFilter</title>
      <link>/travelgatex/reference/inputobjects/profilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/profilefilter/</guid>
      <description> GraphQL schema definition type ProfileFilter {  profileIDs: [ID]    groupIDs: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields profileIDs([ID]):   groupIDs([ID]):   owner([ID!]):    </description>
    </item>
    
    <item>
      <title>ProfileType</title>
      <link>/travelgatex/reference/enums/profiletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/profiletype/</guid>
      <description> GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   Required by ProfileData:  Profile data  CreateProfileInput:    UpdateProfileInput:     </description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/hotelx/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.</description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/travelgatex/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/hotelx/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/property/</guid>
      <description> Indicates Property type
GraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code   Required by HotelData:  Hotel data   </description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/travelgatex/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/property/</guid>
      <description> Indicates Property type
GraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code   Required by HotelData:  Hotel data   </description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/mappea/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/paymentx/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/stats/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/travelgatex/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Query</title>
      <link>/travelgatex/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/schema/query/</guid>
      <description>The query root of TravelgateX&amp;rsquo;s GraphQL interface.
GraphQL schema definition type Query {  admin: AdminQuery    hotelX: HotelXQuery    mappea: MappeaQuery    paymentX: PaymentXQuery    stats: StatsQuery   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields admin(AdminQuery): The admin query root of TravelgateX&amp;#39;s for implementing GraphQL query.</description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>/getting-started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/quickstart/</guid>
      <description>Four steps to using our API If you&amp;rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below:
 STEP 1: Get to know our APIs. Read through our documentation and test some sample calls in our API Playground. You can use a test API key and start experimenting with our APIs straight away.</description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/hotelx/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the rate code.</description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/travelgatex/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the rate code.</description>
    </item>
    
    <item>
      <title>RateRulesFilterInput</title>
      <link>/hotelx/reference/inputobjects/raterulesfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/raterulesfilterinput/</guid>
      <description>If requested, only options with the specified rateRules will be returned
GraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!</description>
    </item>
    
    <item>
      <title>RateRulesFilterInput</title>
      <link>/travelgatex/reference/inputobjects/raterulesfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/raterulesfilterinput/</guid>
      <description>If requested, only options with the specified rateRules will be returned
GraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!</description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/hotelx/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/mappea/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/paymentx/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/stats/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/travelgatex/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/stats/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!</description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/travelgatex/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/hotelx/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/reference/</guid>
      <description> Contains reference codes.
GraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel   </description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/travelgatex/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/reference/</guid>
      <description> Contains reference codes.
GraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel   </description>
    </item>
    
    <item>
      <title>RelayInput</title>
      <link>/hotelx/reference/inputobjects/relayinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/relayinput/</guid>
      <description> GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):    </description>
    </item>
    
    <item>
      <title>RelayInput</title>
      <link>/travelgatex/reference/inputobjects/relayinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/relayinput/</guid>
      <description> GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):    </description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/hotelx/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.</description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/travelgatex/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/mappea/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/paymentx/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/stats/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/travelgatex/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/mappea/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourceconnection/</guid>
      <description> GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     </description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/paymentx/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourceconnection/</guid>
      <description> GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by APIData:    RoleData:     </description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/stats/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourceconnection/</guid>
      <description> GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     </description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/travelgatex/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceconnection/</guid>
      <description> GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  APIData:    RoleData:     </description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/mappea/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/paymentx/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/stats/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/travelgatex/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/mappea/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourceedge/</guid>
      <description> GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     </description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/paymentx/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourceedge/</guid>
      <description> GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     </description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/stats/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourceedge/</guid>
      <description> GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     </description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/travelgatex/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceedge/</guid>
      <description> GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     </description>
    </item>
    
    <item>
      <title>Response</title>
      <link>/hotelx/reference/interfaces/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/interfaces/response/</guid>
      <description>GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.</description>
    </item>
    
    <item>
      <title>Response</title>
      <link>/travelgatex/reference/interfaces/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/response/</guid>
      <description>GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/hotelx/release-notes/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/release-notes/roadmap/</guid>
      <description>We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.
Here is the GitHub project with Public Roadmap of TravelgateX.
The Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/travelgatex/release-notes/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/roadmap/</guid>
      <description>We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.
Here is the GitHub project with Public Roadmap of TravelgateX.
The Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/mappea/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/paymentx/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/stats/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/travelgatex/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/mappea/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roleconnection/</guid>
      <description> GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ResourceData:    GroupData:     </description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/paymentx/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roleconnection/</guid>
      <description> GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by GroupData:    MemberData:    ResourceData:     </description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/stats/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roleconnection/</guid>
      <description> GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ResourceData:    GroupData:     </description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/travelgatex/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleconnection/</guid>
      <description> GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  MemberData:    GroupData:    ResourceData:     </description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/mappea/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/paymentx/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/stats/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/travelgatex/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/mappea/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roleedge/</guid>
      <description> GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     </description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/paymentx/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roleedge/</guid>
      <description> GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     </description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/stats/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roleedge/</guid>
      <description> GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     </description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/travelgatex/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleedge/</guid>
      <description> GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     </description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/mappea/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/roletype/</guid>
      <description> GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     </description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/paymentx/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/roletype/</guid>
      <description> GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     </description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/stats/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/roletype/</guid>
      <description> GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     </description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/travelgatex/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/roletype/</guid>
      <description> GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     </description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/hotelx/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/travelgatex/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/hotelx/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomconnection/</guid>
      <description> RoomList definition
GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/travelgatex/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomconnection/</guid>
      <description> RoomList definition
GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/hotelx/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/travelgatex/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/hotelx/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/travelgatex/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/hotelx/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomedge/</guid>
      <description> RoomList Edge definition
GraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):    Required by RoomConnection:  RoomList definition   </description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/travelgatex/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomedge/</guid>
      <description> RoomList Edge definition
GraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):    Required by RoomConnection:  RoomList definition   </description>
    </item>
    
    <item>
      <title>RoomInput</title>
      <link>/hotelx/reference/inputobjects/roominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/roominput/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomInput</title>
      <link>/travelgatex/reference/inputobjects/roominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/roominput/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/hotelx/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.   Required by Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/travelgatex/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.   Required by Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/hotelx/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/travelgatex/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/hotelx/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/rule/</guid>
      <description>GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/travelgatex/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rule/</guid>
      <description>GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!</description>
    </item>
    
    <item>
      <title>ServiceApi</title>
      <link>/travelgatex/reference/objects/serviceapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceapi/</guid>
      <description>Information related to a Service API
GraphQL schema definition type ServiceApi {  code: ID!    name: String!    operations: [ServiceOperation]    error: [Error!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Service API ID  name(String!</description>
    </item>
    
    <item>
      <title>ServiceApiFilter</title>
      <link>/travelgatex/reference/inputobjects/serviceapifilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/serviceapifilter/</guid>
      <description> GraphQL schema definition type ServiceApiFilter {  ApiName: String    OperationName: String    OperationType: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields ApiName(String):   OperationName(String):   OperationType(String):    </description>
    </item>
    
    <item>
      <title>ServiceApiType</title>
      <link>/stats/reference/enums/serviceapitype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/serviceapitype/</guid>
      <description> Services Api available.
GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   </description>
    </item>
    
    <item>
      <title>ServiceApiType</title>
      <link>/travelgatex/reference/enums/serviceapitype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/serviceapitype/</guid>
      <description> Services Api available.
GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   </description>
    </item>
    
    <item>
      <title>ServiceOperation</title>
      <link>/travelgatex/reference/objects/serviceoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceoperation/</guid>
      <description>Information related to an API operation
GraphQL schema definition type ServiceOperation {  code: ID!    name: String!    type: String!    travelOperation: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Service Operation ID  name(String!</description>
    </item>
    
    <item>
      <title>ServiceOperationType</title>
      <link>/stats/reference/enums/serviceoperationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/serviceoperationtype/</guid>
      <description> GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>ServiceOperationType</title>
      <link>/travelgatex/reference/enums/serviceoperationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/serviceoperationtype/</guid>
      <description> GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/hotelx/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/servicestatus/</guid>
      <description> Indicates the status of the service
GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/travelgatex/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/servicestatus/</guid>
      <description> Indicates the status of the service
GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description   Required by HotelXQuery:     </description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>/hotelx/concepts/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/settings/</guid>
      <description>On this page you will learn more about settings in HotelX.
What are settings? Settings are the common configuration that will be used in order to build the request to the supplier/s.
There are two kind of settings, overridable and partially overridable. You can find the partially overridable settings in the first level of settings and are known as HotelX_Settings. These settings are formed by some non-overridable settings such as &amp;ldquo;group&amp;rdquo; and &amp;ldquo;testMode&amp;rdquo;, some overridable global settings such as &amp;ldquo;timeout&amp;rdquo;, &amp;ldquo;auditTransactions&amp;rdquo;, etc.</description>
    </item>
    
    <item>
      <title>SettingsBaseInput</title>
      <link>/hotelx/reference/inputobjects/settingsbaseinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/settingsbaseinput/</guid>
      <description>Contains the time out and business rules of a supplier or an access.
GraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.</description>
    </item>
    
    <item>
      <title>SettingsBaseInput</title>
      <link>/travelgatex/reference/inputobjects/settingsbaseinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/settingsbaseinput/</guid>
      <description>Contains the time out and business rules of a supplier or an access.
GraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/hotelx/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/stat/</guid>
      <description>GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds   Required by StatsRequest:  Contains internal information.</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/travelgatex/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stat/</guid>
      <description>GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds   Required by StatsRequest:  Contains internal information.</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/hotelx/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/stataccess/</guid>
      <description>GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/travelgatex/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stataccess/</guid>
      <description>GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/hotelx/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/statplugin/</guid>
      <description> GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time   Required by StatsRequest:  Contains internal information.  StatAccess:     </description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/travelgatex/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statplugin/</guid>
      <description> GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time   Required by StatsRequest:  Contains internal information.  StatAccess:     </description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/hotelx/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/stattransaction/</guid>
      <description>GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!</description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/travelgatex/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stattransaction/</guid>
      <description>GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/stats/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/travelgatex/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsAsset</title>
      <link>/stats/reference/objects/statsasset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsasset/</guid>
      <description>Asset of an specific error
GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!</description>
    </item>
    
    <item>
      <title>StatsAsset</title>
      <link>/travelgatex/reference/objects/statsasset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsasset/</guid>
      <description>Asset of an specific error
GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!</description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/stats/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsconnection/</guid>
      <description> GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):    Required by StatsQuery:     </description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/travelgatex/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsconnection/</guid>
      <description> GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):    Required by StatsQuery:     </description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/stats/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(Access!</description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/travelgatex/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(Access!</description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/stats/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsedge/</guid>
      <description> GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Stats):   cursor(String!):    Required by StatsConnection:     </description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/travelgatex/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsedge/</guid>
      <description> GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Stats):   cursor(String!):    Required by StatsConnection:     </description>
    </item>
    
    <item>
      <title>StatsFilterInput</title>
      <link>/stats/reference/inputobjects/statsfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/inputobjects/statsfilterinput/</guid>
      <description>Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)
GraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!</description>
    </item>
    
    <item>
      <title>StatsFilterInput</title>
      <link>/travelgatex/reference/inputobjects/statsfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/statsfilterinput/</guid>
      <description>Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)
GraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/stats/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/travelgatex/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>StatsInfoTypes</title>
      <link>/stats/reference/enums/statsinfotypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/statsinfotypes/</guid>
      <description> GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error   </description>
    </item>
    
    <item>
      <title>StatsInfoTypes</title>
      <link>/travelgatex/reference/enums/statsinfotypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/statsinfotypes/</guid>
      <description> GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error   </description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/stats/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/schema/query/</guid>
      <description>GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/travelgatex/reference/objects/statsquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsquery/</guid>
      <description>GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/hotelx/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/travelgatex/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>StatusType</title>
      <link>/hotelx/reference/enums/statustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/statustype/</guid>
      <description> Indicartes options status
GraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)   </description>
    </item>
    
    <item>
      <title>StatusType</title>
      <link>/travelgatex/reference/enums/statustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/statustype/</guid>
      <description> Indicartes options status
GraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)   </description>
    </item>
    
    <item>
      <title>String</title>
      <link>/hotelx/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by ServiceStatus:  Indicates the status of the service  RelayInput:    HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  HotelXDestinationSearcherInput:    HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/mappea/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by MappeaGetMappeaStatsInput:  # GetMappeaStats  Error:  Application errors  Warning:  Application warnings  File:    GetMappeaStatsData:    MappeaUploadFileInput:  ## UploadFile  UploadFileData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  AccessEdge:    PageInfo:    AccessData:    Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/paymentx/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by AdviseMessage:  List of advise messages.  PaymentXStoredCardIDInput:    ExternalMessage:    HolderInput:  Holder object that contains the occupant&amp;#39;s (pax&amp;#39;s) name and surname.  PaymentXStoredCardEdge:    PageInfo:    PaymentXStoredCardData:    Holder:  Holder object that contains the occupant&amp;#39;s (pax&amp;#39;s) name and surname.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/stats/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/string/</guid>
      <description> The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:  List of advise messages.  AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  AccessEdge:    OrganizationData:    GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:     </description>
    </item>
    
    <item>
      <title>String</title>
      <link>/travelgatex/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by ServiceApiFilter:    ServiceApi:  Information related to a Service API  AccessEdge:    PageInfo:    AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>/community/style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/community/style-guide/</guid>
      <description>This document provides guidance for contributors to the TravelgateX Platform Community site.
 Caveats Types of documentation Designing a doc Visual assets File organization in GitHub General content guidelines General style guidelines Markdown usage Voice and tone Including source code Writing resources  Caveats Let&amp;rsquo;s get these things out of the way right up front:
 Don&amp;rsquo;t sell or do marketing. -&amp;gt; TBD Don&amp;rsquo;t editorialize. Document. Assure that the content you&amp;rsquo;re writting is not duplicated on another page, avoid incosistences.</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/hotelx/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/travelgatex/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplementType</title>
      <link>/hotelx/reference/enums/supplementtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/supplementtype/</guid>
      <description> Supplement Type
GraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>SupplementType</title>
      <link>/travelgatex/reference/enums/supplementtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/supplementtype/</guid>
      <description> Supplement Type
GraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/mappea/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/paymentx/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/stats/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/travelgatex/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/mappea/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierconnection/</guid>
      <description> GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/paymentx/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplierconnection/</guid>
      <description> GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    OrganizationData:     </description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/stats/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplierconnection/</guid>
      <description> GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/travelgatex/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierconnection/</guid>
      <description> GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:     </description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/mappea/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/paymentx/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/stats/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/travelgatex/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierDetected</title>
      <link>/mappea/reference/objects/supplierdetected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierdetected/</guid>
      <description> GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):    </description>
    </item>
    
    <item>
      <title>SupplierDetected</title>
      <link>/travelgatex/reference/objects/supplierdetected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdetected/</guid>
      <description> GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):    </description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/mappea/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplieredge/</guid>
      <description> GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     </description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/paymentx/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplieredge/</guid>
      <description> GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     </description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/stats/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplieredge/</guid>
      <description> GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     </description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/travelgatex/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplieredge/</guid>
      <description> GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     </description>
    </item>
    
    <item>
      <title>SupplierFilter</title>
      <link>/travelgatex/reference/inputobjects/supplierfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/supplierfilter/</guid>
      <description>GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/hotelx/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/travelgatex/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>TagRuntimeType</title>
      <link>/hotelx/reference/enums/tagruntimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/tagruntimetype/</guid>
      <description> Indicates xml tag used by the current parameter
GraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier   </description>
    </item>
    
    <item>
      <title>TagRuntimeType</title>
      <link>/travelgatex/reference/enums/tagruntimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/tagruntimetype/</guid>
      <description> Indicates xml tag used by the current parameter
GraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier   </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>/travelgatex/reference/enums/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/template/</guid>
      <description> GraphQL schema definition  enum Template{   FOLDER_DEFAULT,   }   Required by CreateGroupInput:     </description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/hotelx/reference/objects/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/text/</guid>
      <description> GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields text(String!):   language(Language!):    </description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/travelgatex/reference/objects/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/text/</guid>
      <description> GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields text(String!):   language(Language!):    </description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/hotelx/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/timeout/</guid>
      <description>GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/travelgatex/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/timeout/</guid>
      <description>GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>TimeoutInput</title>
      <link>/hotelx/reference/inputobjects/timeoutinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/timeoutinput/</guid>
      <description>GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>TimeoutInput</title>
      <link>/travelgatex/reference/inputobjects/timeoutinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/timeoutinput/</guid>
      <description>GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/hotelx/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/travelgatex/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/hotelx/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/mappea/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/paymentx/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/stats/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/travelgatex/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s  Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>UnitTimeType</title>
      <link>/hotelx/reference/enums/unittimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/enums/unittimetype/</guid>
      <description> Unit Time Type
GraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>UnitTimeType</title>
      <link>/travelgatex/reference/enums/unittimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/unittimetype/</guid>
      <description> Unit Time Type
GraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.   </description>
    </item>
    
    <item>
      <title>UpdateClientInput</title>
      <link>/travelgatex/reference/inputobjects/updateclientinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateclientinput/</guid>
      <description> GraphQL schema definition type UpdateClientInput {  code: ID!    name: String    isActive: Boolean    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(String): Client complete name  isActive(Boolean): Indicates whether a Client is active or inactive  owner(ID): Client owner   </description>
    </item>
    
    <item>
      <title>UpdateEntitiesInput</title>
      <link>/travelgatex/reference/inputobjects/updateentitiesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateentitiesinput/</guid>
      <description> GraphQL schema definition type UpdateEntitiesInput {  code: ID!    entities: EntitiesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Profile Code  entities(EntitiesInput): Entities to add/remove   </description>
    </item>
    
    <item>
      <title>UpdateGroupInput</title>
      <link>/travelgatex/reference/inputobjects/updategroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updategroupinput/</guid>
      <description> GraphQL schema definition type UpdateGroupInput {  api: ID!    group: ID!    info: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields api(ID!):   group(ID!):   info(String):    </description>
    </item>
    
    <item>
      <title>UpdateMemberInput</title>
      <link>/travelgatex/reference/inputobjects/updatememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updatememberinput/</guid>
      <description>GraphQL schema definition type UpdateMemberInput {  member: ID!    info: String    group: ID!    role: ID!    resources: [ID!]!    method: Method!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID!</description>
    </item>
    
    <item>
      <title>UpdateProfileInput</title>
      <link>/travelgatex/reference/inputobjects/updateprofileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateprofileinput/</guid>
      <description>GraphQL schema definition type UpdateProfileInput {  code: ID!    label: String    type: ProfileType    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>UploadFileData</title>
      <link>/mappea/reference/objects/uploadfiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/uploadfiledata/</guid>
      <description> GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):    Required by UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>UploadFileData</title>
      <link>/travelgatex/reference/objects/uploadfiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfiledata/</guid>
      <description> GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):    Required by UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>UploadFileResponse</title>
      <link>/mappea/reference/objects/uploadfileresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/uploadfileresponse/</guid>
      <description> GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):    Required by MappeaMutation:     </description>
    </item>
    
    <item>
      <title>UploadFileResponse</title>
      <link>/travelgatex/reference/objects/uploadfileresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfileresponse/</guid>
      <description> GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):    Required by MappeaMutation:     </description>
    </item>
    
    <item>
      <title>Uploading Strategies</title>
      <link>/travelgatex/data-automation/uploading-strategies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/data-automation/uploading-strategies/</guid>
      <description>How to upload data to the platform There are two ways of uploading data to the platform:
 Secure File Transfer Protocol (SFTP) GraphQL mutation  We recommend continuing to use SFTP at present while we build out more GraphQL resources.
While you can make your updates via a mutation, we have not yet written up resources to show you how to do that.
If you require these resources immediately, please contact us via Slack, Jira or by raising an issue in GitHub.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/mappea/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/paymentx/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/stats/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/travelgatex/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>UrlsInput</title>
      <link>/hotelx/reference/inputobjects/urlsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/inputobjects/urlsinput/</guid>
      <description>URLs Input
GraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>UrlsInput</title>
      <link>/travelgatex/reference/inputobjects/urlsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/urlsinput/</guid>
      <description>URLs Input
GraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/hotelx/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/objects/warning/</guid>
      <description> Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description   </description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/mappea/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/warning/</guid>
      <description> Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description   Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/travelgatex/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/warning/</guid>
      <description> Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description   Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:     </description>
    </item>
    
    <item>
      <title>Writting release notes</title>
      <link>/community/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/community/release-notes/</guid>
      <description>This document assists on write release notes with the changelog of products.
 Release Notes Organization How to keep a good changelog  General Principles  What is a changelog? Why keep a changelog? Who needs a changelog?   How do I make a good changelog?  Guiding Principles Types of changes  How can I reduce the effort required to maintain a changelogs document? Can changelogs be bad?</description>
    </item>
    
    <item>
      <title>Access, Supplier and Context</title>
      <link>/hotelx/concepts/accesses-supplier-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/accesses-supplier-context/</guid>
      <description>On this page you will learn more about Core Entities used in HotelX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.
Supplier Product segmentation over a Supplier API implementation. Each Supplier has a Supplier code. These are unique values and they are used consistently throughout all TravelgateX implementations. See our Supplier database, or ask us via our Jira Service desk for a list of Supplier codes.</description>
    </item>
    
    <item>
      <title>Blacklist</title>
      <link>/hotelx/plugins/black-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/black-list/</guid>
      <description>The blacklist plugin is used to ignore hotel code(s) when we a search query is executed. There are 2 types of blacklists:
 Filter hotel code of a specific Access Filter hotel codes of a specific Supplier  Loading a blacklist is as easy as following the steps below:
Access Blacklist Blacklist is applied for specific Access
File Format The file should be in the below format:
 Encoding: UTF-8</description>
    </item>
    
    <item>
      <title>Booking Flow</title>
      <link>/hotelx/concepts/search-mode/booking-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/search-mode/booking-flow/</guid>
      <description>Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.
 --                                            1. SEARCH  2. QUOTE  3.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/hotelx/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/release-notes/changelog/</guid>
      <description>It makes it easier for users and contributors to see the most notable changes that have been made on HotelX product.
All notable changes on our platform will be documented on this page. 2018-12-04  Fix booking timeout issue    Added warning if any option has been discarded by CommissionX and CurrencyX plugins   2018-11-29  Fix filter maxSize Destination    Adapt Hotel-Room, Hotel-Board, Hotel-Category to new organization.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/travelgatex/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/changelog/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.
All notable changes on TravelgateX platform will be documented in this page. 2019-01-11  The DEFAULT_TEMPLATE option has been modified.The permissions given to the owner were : iam:all:viewer Now: all:all:1a This is for future updates. Ignore it for the time being. The owner of the organization now has an admin permission all across the apis: org:api:rsc:crud1xaf.</description>
    </item>
    
    <item>
      <title>Common Errors</title>
      <link>/hotelx/faqs/common-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/faqs/common-errors/</guid>
      <description>Error 204 - No Results Found Error “204 No results found” is a common error that you can receive in the Search Query response. This error means that the product you are trying to obtain is not available.
There are several potential reasons as to why this error occurs:
 The product is not available for the dates in the request. The product is not available for the number of passengers selected in the request.</description>
    </item>
    
    <item>
      <title>Configure HotelX Security</title>
      <link>/travelgatex/tutorials/howto-configure-permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/tutorials/howto-configure-permissions/</guid>
      <description>Granting Permissions This topic describes how to configure permissions for a organization using HotelX and Stats.
Before you begin  Read IAM, which contains information about how TravelgateX manages security Read HotelX, which contains information about the HotelX API  Scenario: Organization buying suppliers through HotelX In this scenario, organanization org_test logs on to TravelgateX in order to use HotelX to buy product from suppliers.
Distribution will be made through 2 different channels, end users will use org_test_B2C_site whereas that org_test_B2B_site will be used for business users.</description>
    </item>
    
    <item>
      <title>FlightsX</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-flightsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-flightsx/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>GraphQL Overview</title>
      <link>/learning-graphql/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/overview/</guid>
      <description>What is GraphQL? GraphQL is a query language for your API. It was first designed by Facebook. It&amp;rsquo;s a new way of dealing with and managing data models via API, and is especially useful for decoupling client from server logic.
 GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/hotelx/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!</description>
    </item>
    
    <item>
      <title>How to apply</title>
      <link>/hotelx/howtos/certification_process/howtoapply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/certification_process/howtoapply/</guid>
      <description>Our Certification Process should be completed once you have finished the development.
Once Certification Process logs have been delivered through our Customer Care service desk, we will review it and advise you once the integration is certified.
 Within your WelcomePack email you should have received a user to access our customer care portal. Click on Certification Process option and upload or drag and drop your logs. You will be issued a WECARE ticket number.</description>
    </item>
    
    <item>
      <title>Identity and access management</title>
      <link>/travelgatex/security/identity-access-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/security/identity-access-management/</guid>
      <description>This section provides an overview of Identity and access management.
TravelgateX identity and acccess management lets administrators authorize who can take action on specific resources, giving you full control and internal visibility to manage resources centrally.
Identity and access management provides an unified view of your security policy across your entire organization, with built-in auditing to ease compliance processes.
As an administrator, when you register with us, we provide you with login details to access your TravelgateX account, including a username and password.</description>
    </item>
    
    <item>
      <title>MappeaMutation</title>
      <link>/mappea/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/hotelx/plugins/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/mapping/</guid>
      <description>The map plugins are used to change the supplier codes to client codes or vice versa. There are four types:
 Hotel map  Board Map  Room Map  Rate Map   Our map formats share a common structure. In order to load your maps you just need to follow the instructions below:
Example files You can download example for the files structure here
Entity Maps File Format The file should be in the following format:</description>
    </item>
    
    <item>
      <title>Mutation</title>
      <link>/travelgatex/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/schema/mutation/</guid>
      <description>The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server
GraphQL schema definition type Mutation {  admin: AdminMutation    hotelX: HotelXMutation    mappea: MappeaMutation    paymentX: PaymentXMutation   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.</description>
    </item>
    
    <item>
      <title>PaymentXMutation</title>
      <link>/paymentx/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/schema/mutation/</guid>
      <description> GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card   </description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>/hotelx/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/quickstart/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/6972ecae51e849fe8c49305bf0032dfe\/raw\x22,\x22divname\x22:\x22div_authorization\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/533a8e1259e5245a4c3f590964ec506d\/raw\x22,\x22divname\x22:\x22div_search\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/b4e691b2b1567c0a80f5926b833170e1\/raw\x22,\x22divname\x22:\x22div_quote\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/bbbb043c0cdfe1adb33a897f69a04e2f\/raw\x22,\x22divname\x22:\x22div_book\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/034dcbeb8affb2c4875b2046ea385c0d\/raw\x22,\x22divname\x22:\x22div_cancel\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/36e1ade6d5eb2a074dc6cb1141ac2136\/raw\x22,\x22divname\x22:\x22div_bookinglist\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Quotas &amp; Limits</title>
      <link>/travelgatex/concepts/quotas-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/quotas-limits/</guid>
      <description>Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:
 Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself!</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/hotelx/plugins/aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/aggregation/</guid>
      <description>Aggregation plugins extends HotelX allowing filtering Supplier options and responses using different business rules.
KeyFilter Filters Supplier options based on field keys applying a selector function over field values.
It&amp;rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.
 Field Keys as a combination of:  SupplierCode  HotelCode BoardCode RoomCode Refundable Market PaymentType Promotion Supplement Surcharges Rate rules    Parameters    key value type condition description     primaryKey string mandatory It is the criteria used to aggregate, the value is a set of criteria separated by commas, the possible values are:</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>/learning-graphql/basic_concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/basic_concepts/</guid>
      <description>What are Queries &amp;amp; Mutations There are two basic operations in GraphQL schemas:  Queries: Requesting data from a data model. An example Query would be: checking availability of hotels for a particular date and location  Mutations: Making changes and carrying out transactions on data in the data model. An example Mutation would be: making a booking to reserve a hotel room on a particular date.
Queries Queries ask the system to provide some data, based on specfic parameters.</description>
    </item>
    
    <item>
      <title>Check configuration</title>
      <link>/hotelx/checkconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/checkconfig/</guid>
      <description>This query allows you to retrieve relevant information like supplier access code (link a lo que es el access), supplier name, supplier configuration, supplier context, type of connection: test or live; active or not. You can then use this information to perform other queries/mutations.
To run this query, you should send within the headers your Apikey
{ admin{ accesses{ edges{ node{ accessData{ name isActive code supplier{ supplierData{ code name isActive provider{ code name isActive isPublic } context } } isTest user password parameters{ key value } } } } } } }  </description>
    </item>
    
    <item>
      <title>Commission</title>
      <link>/hotelx/plugins/net-price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/net-price/</guid>
      <description>Net Price is an optional plugin and allows to net all the prices in an option.
 NetpriceX
 CommissionX (NetpriceX Extended funcionality)
  NetPriceX Goals This plugin receives an Option by parameter and returns an Option with all the prices with net value. This plugin reads information of commissions from ftp. It is mandatory to load at least supplier&amp;rsquo;s commission file. Depending of the files in ftp, this plugin can apply two different commission values over prices.</description>
    </item>
    
    <item>
      <title>Commission supplier</title>
      <link>/hotelx/plugins/format-files/commission_supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/commission_supplier/</guid>
      <description>The commission supplier file should be in the below format:
Commission supplier File Format The file should be in the below format:
 Encoding: UTF-8  File Name: commission_supplier.csv  supplier commission  Extension file: csv Headers:  supplier → supplier code commission → commission value, decimal separator must be point (&amp;ldquo;.&amp;rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>/getting-started/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/concepts/</guid>
      <description>The TravelgateX platform and APIs all use a consistent set of basic concepts so that whatever API you use on our platform, you can be confident that it will work with the same definitions as all of the others you are familiar with.
Here is an overview of the key concepts of our platform.
Access An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier.</description>
    </item>
    
    <item>
      <title>GraphQL Schema Changes</title>
      <link>/hotelx/release-notes/graphql-schema-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/release-notes/graphql-schema-changes/</guid>
      <description>The GraphQL HotelX schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.
Check out this list of new releases and changes applied on the HotelX GraphQL API.
Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>GraphQL Schema Changes</title>
      <link>/travelgatex/release-notes/graphql-schema-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/graphql-schema-changes/</guid>
      <description>The GraphQL schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.
Check out this list of new releases and changes applied on the TravelgateX GraphQL API.
2018-11-20 ✅ Input field CreateOrganizationInput.organization changed type from ID! to ID
✅ Field country was added to object type GeonameData
2018-11-07 🛑 Field asserts was removed from object type StatsInfo</description>
    </item>
    
    <item>
      <title>Mappea</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-mappea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-mappea/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/hotelx/plugins/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/markup/</guid>
      <description>Markups type plugins permits to apply markup percentages over a price, markup is a field in price composed of a set of rules and a new price with an added percentage, the percentage is the sum of every rule applied.
Although this plugin can be customized, we already offer an implementation.
MarkupX This markup implementation is supported by our web application which permits the management of an organization&amp;rsquo;s rules, the modification of these rules are applied in your product at real time.</description>
    </item>
    
    <item>
      <title>Playground</title>
      <link>/getting-started/playground/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/playground/</guid>
      <description>Try it For Yourself API Playground is an interactive, fun, and super quick way to get to know our APIs.
In the API Playground, as you start to type the query, it will autocomplete with the fields available to complete your query parameters. You can also click on the green Schema button on the right of the Playground window to learn more about our data model and to see all of the options available for building your query.</description>
    </item>
    
    <item>
      <title>Preference</title>
      <link>/hotelx/plugins/preference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/preference/</guid>
      <description>Preference is an optional plugin and allows to offer options preferentially in relation to the rules informed by the client.
Preference Goals The preference plugin offers those options that match with rule preferences reported. By doing this, the options will be returned in a preferential way.
Sequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the preference will be evaluated.</description>
    </item>
    
    <item>
      <title>Quotas &amp; Limits</title>
      <link>/hotelx/concepts/quotas-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/quotas-limits/</guid>
      <description>HotelX limits the maximum rate of requests and graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice</description>
    </item>
    
    <item>
      <title>Request Headers</title>
      <link>/travelgatex/concepts/request-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/request-headers/</guid>
      <description>The following HTTP request headers are relevant to all request methods (GET, PUT, POST and DELETE) and they are required in all API requests.
Authorization (Required) The HTTP Authorization request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header.
Syntax Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;  Directives &amp;lt;type&amp;gt;:
 ApiKey Bearer  &amp;lt;credential&amp;gt;: String</description>
    </item>
    
    <item>
      <title>Safety Margin</title>
      <link>/hotelx/plugins/safety_margin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/safety_margin/</guid>
      <description>Safety Margin is an optional plugin that allows discarding options that have a commission lower than expected. The expected commission has to be loaded in safety-margin file, and is the commission over net, in other words, ganancy percentage over option&amp;rsquo;s cost.
Safety Margin Goals The safety margin plugin discards those options that have a commission lower than expected. By doing this, only options that have a commission over net, equal or lower than those reported in the file will be returned.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/hotelx/howtos/bookingflow/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/search/</guid>
      <description>Search is the first operation in the booking flow. It allows to check which available rooms there are for the requested hotels or for the hotels in the requested destination for a given range of dates and for a given pax distribution.
Advanced criteria It explains different parameters that can be set up in the request Mandatory
 CheckIn: check-in date for the booking. Format: YYYY-MM-DD CheckOut: check-out date for the booking.</description>
    </item>
    
    <item>
      <title>Search Single Mode &amp; Multi Mode</title>
      <link>/hotelx/concepts/search-mode/search-single-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/search-mode/search-single-mode/</guid>
      <description>On this page you will learn about Transactional Booking Flow to Search, quote and confirm a reservation. You will also see the difference between the Search Single Mode VS Search Multi Mode.
Search Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that they want to use.</description>
    </item>
    
    <item>
      <title>Search Single Mode &amp; Multi Mode</title>
      <link>/hotelx/concepts/search-single-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/search-single-mode/</guid>
      <description>On this page you will learn about Transactional Booking Flow to Search, quote and confirm a reservation. You will also see the difference between the Search Single Mode VS Search Multi Mode.
Search Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that they want to use.</description>
    </item>
    
    <item>
      <title>Use cases</title>
      <link>/hotelx/howtos/certification_process/usecases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/certification_process/usecases/</guid>
      <description>To ensure that your connection to our HotelX API is set up correctly, you’ll need to make the following test scenario. You can choose the hotel and dates you prefer:
 Case 1: 1 room with 2 Adults for a Package rate rule. Case 2: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old for a non-refundable rate. Case 3: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old and 1 room for 3 adults for a refundable rate.</description>
    </item>
    
    <item>
      <title>Currency Converter</title>
      <link>/hotelx/plugins/converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/converter/</guid>
      <description>Currency converter is an optional plugin and allows to apply currency conversion over all the prices in one Option.
CurrencyX This plugin receives an Option and a currency and returns the same option with currency conversion applied over all the prices. It reads the information about rates from a file located in our ftp. Is mandatory that this file exists in the ftp and satisfies all the requirements below. Otherwise, an error will be returned.</description>
    </item>
    
    <item>
      <title>Hotel Commission</title>
      <link>/hotelx/plugins/format-files/commission_netprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/commission_netprice/</guid>
      <description>The commission file should be in the below format:
Hotel Commission File Format The hotel commission file should be in the below format:
 Encoding: UTF-8  File Name: commission_hotel.csv  commission hotel  Extension file: csv Headers:  supplier → supplier code  hotel → hotel code  commission → commission value, decimal separator must be point (&amp;ldquo;.&amp;rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.</description>
    </item>
    
    <item>
      <title>Inventory</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-inventory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-inventory/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Management Flow</title>
      <link>/hotelx/concepts/management-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/management-flow/</guid>
      <description>On this page you will learn how to manage and control bookings and management flow. Managing operations can be used in order to operate above Seller&amp;rsquo;s bookings.
Cancellation Performs a Seller booking cancellation.
Operation { &amp;quot;mutation&amp;quot;: { &amp;quot;hotelX&amp;quot;: { &amp;quot;cancel&amp;quot;: { } } } }  PlayGround Samples  cancel   Booking Performs a seller booking list.
In this case you can search the bookings with references or by dates, the dates can be arrival dates or booking dates.</description>
    </item>
    
    <item>
      <title>Processor</title>
      <link>/hotelx/plugins/processor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/processor/</guid>
      <description>Processor plugins extends HotelX allowing multiple operation types. It can modify request and response messages, allowing a full range of operations:
 Split arrays Join arrays Modify object values Add or remove object instances  </description>
    </item>
    
    <item>
      <title>Quote</title>
      <link>/hotelx/howtos/bookingflow/quote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/quote/</guid>
      <description>Quote is an operation used to assess and valuate the rate before the actual booking. It returns the same information as the Search response for a hotel rate with up-to-date price, along with additional information regarding the rate: rate breakdown and cancellation policies.
Advanced criteria It explains different parameters that can be set up in the request (it indicates which ones are mandatory)
 optionRefId: Identifier of the option chosen in Search.</description>
    </item>
    
    <item>
      <title>Search by destination</title>
      <link>/hotelx/plugins/search_by_destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/search_by_destination/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/74a01699ccc7f7a8f043f6583e64fcde\/raw\x22,\x22divname\x22:\x22div_admin_destinations\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/f820c0508f7d47432eaad34823d426e0\/raw\x22,\x22divname\x22:\x22div_searchbydestinations\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Thinking in GraphQL</title>
      <link>/learning-graphql/thinking_in_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/thinking_in_graphql/</guid>
      <description>A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. With GraphQL, you can choose exactly what data you want to retrieve. GraphQL is a typed query language. That means that it has a lot of predictability, as each piece of data has its own type, so we know what sort of data we will be getting back.</description>
    </item>
    
    <item>
      <title>Book</title>
      <link>/hotelx/howtos/bookingflow/book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/book/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/31d4d32ea8e8bc8ab5d7bc3910df72c0\/raw\x22,\x22divname\x22:\x22div_booking\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>ChannelX breaking changes</title>
      <link>/channelx/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/channelx/release-notes/breaking-changes/</guid>
      <description>Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:
 Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself!</description>
    </item>
    
    <item>
      <title>Content</title>
      <link>/hotelx/concepts/content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/content/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/aeb082e484710ebf6b7a4ec5173064cc\/raw\x22,\x22divname\x22:\x22div_hotels\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/4737228c495b09566474fa2db38fc72d\/raw\x22,\x22divname\x22:\x22div_destinations\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/519b4223de8b44cb20c5c33212c62654\/raw\x22,\x22divname\x22:\x22div_boards\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/0815561e9c25ce49bc416dbc73f36388\/raw\x22,\x22divname\x22:\x22div_rooms\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/aa1be23b8c9229c8363c142036afb1f5\/raw\x22,\x22divname\x22:\x22div_categories\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/hotelx/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon.   2018-07-26  Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/mappea/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Product.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/paymentx/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22.To be removed soon. Removal of error from Product.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/stats/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/release-notes/breaking-changes/</guid>
      <description> Changes history of deprecated notes previously announced No deletions to date </description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/travelgatex/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon.   2019-01-11  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 .</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/hotelx/plugins/format-files/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/group/</guid>
      <description>The hotel group file should be in the below format:
 Encoding: UTF-8  File Name: context_entity_group.csv  Context Entity (file will be indexed by this field). Format (indicates format file)  Extension file: csv Headers:  key → Entity. hotelCodes → hotel code chainCodes → chain code destinationCodes → destination code  Delimiter: Comma (“,”)  Directory: /F[folder code]\Maps/HotelX\Hotel/  Sample File Name: context_entity_group.csv
Data:
Hotel entity example</description>
    </item>
    
    <item>
      <title>Speed</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-speed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-speed/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>/learning-graphql/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tools/</guid>
      <description>Top tools to develop in GraphQL Here is a collection of tools we&amp;rsquo;ve been using that have help us develop in GraphQL:
Schemas Design  APIs Guru&amp;rsquo;s graphql-faker  Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We&amp;rsquo;ve used many libraries and packages to help us, hereby our list:</description>
    </item>
    
    <item>
      <title>Booking List</title>
      <link>/hotelx/howtos/bookingflow/booklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/booklist/</guid>
      <description>The Booking operation allows to retrieve a booking (or bookings) with all its details from the booking reference locator. The most important information returned for each booking in the list is: - Booking reference - Booking holder - Booking pax - Hotel, rooms and boards confirmed - Booking rates
Advanced criteria Explain different parameters can be set up on the request (indicate which ones are mandatory)
How to request     a5b25332a7a5683d602efeb87233a9c7 You can ask for bookings by client reference (XTG-XXXXXX) or by supplier reference.</description>
    </item>
    
    <item>
      <title>Commission</title>
      <link>/hotelx/plugins/format-files/commission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/commission/</guid>
      <description>The commission file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential commission  Extension file: csv Headers:
 ruleId → rule identifier supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkin date Date format checkInTo → checkout date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Development</title>
      <link>/hotelx/plugins/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/development/</guid>
      <description>On this page you will learn how to develop your own HotelX Plugin.</description>
    </item>
    
    <item>
      <title>Entity Table values</title>
      <link>/hotelx/plugins/format-files/entity_table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/entity_table/</guid>
      <description>We have different combinations values from entities values this table show this combinations:
   entity chainCodes destinationCodes hotelCodes     chain Yes No No   hotel No No Yes   destination No Yes No    </description>
    </item>
    
    <item>
      <title>Insights</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-insights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-insights/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Ranking</title>
      <link>/hotelx/concepts/ranking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/concepts/ranking/</guid>
      <description>On this page you will learn how to rank hotels.
Overview On this page, you will learn how to manage content data such as hotels, boards, categories, etc. in your site. Hotel Content operations allow changes to be made into static methods on HotelX, so that hotels can be divided into different rankings or priorities in order to facilitate the mapping process.
The main goal of this process is to create a hotel ranking and divide the whole portfolio in order to make the hotel list more manageable.</description>
    </item>
    
    <item>
      <title>Safety margin</title>
      <link>/hotelx/plugins/format-files/safety_margin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/safety_margin/</guid>
      <description>The safety margin file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential safetymargin  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkinfrom date Date format checkInTo → checkinto date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Tutorials &amp; Resources</title>
      <link>/learning-graphql/tutorials_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tutorials_resources/</guid>
      <description>Although GraphQL is a very young technology, it&amp;rsquo;s quickly gaining momentum and already has a fast growing yet vast ecosystem. Apart from Facebook&amp;rsquo;s and Graphql.org&amp;rsquo;s official documentation, there are more and more development teams embracing this technology and you can now find a lot of articles, tutorial and videos talking about it.
We want to be part of this community and hopefully help you discover this new technology and its features.</description>
    </item>
    
    <item>
      <title>Cancellation</title>
      <link>/hotelx/howtos/bookingflow/cancellation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/bookingflow/cancellation/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/1b160cfcf47b1c4d1deada1a18ae98b6\/raw\x22,\x22divname\x22:\x22div_cancellation\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Distribution</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-distribution/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Entities</title>
      <link>/hotelx/plugins/entity_table_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/entity_table_file/</guid>
      <description>Entities processed types: Sequential Type of processing sequentially, the first rule that coincides will be the one applied.
Supplier Rules applied or indexed at the supplier level.
Access Rules applied or indexed at the access level.
Hotel The key to indexing is of the hotel type, we hope that the reference is by a hotel code where the type will be given by the context.
Destination Idem hotel.</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/travelgatex/frequently-asked-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/frequently-asked-questions/</guid>
      <description>What is TravelgateX? TravelgateX platform provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface). Instead of having to deal with REST APIs, you&amp;rsquo;ll be able to use full poser of GraphQL to interact with your data.</description>
    </item>
    
    <item>
      <title>Supplier Order</title>
      <link>/hotelx/plugins/format-files/supplier_order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/supplier_order/</guid>
      <description>The supplier order file should be in the below format:
 Encoding: UTF-8 File Name:  supplier_order  Extension file: csv Headers:
 ruleId → rule identifier supplierCodes → supplier code  List file fields
|Field | Mandatory | Excluded fileds* | Multi-value | |---|---|---|---| |ruleId| Yes | - | No | |supplierCodes| Yes | - | Yes |  Delimiter: Comma (“,”)
 Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;)</description>
    </item>
    
    <item>
      <title>Useful information</title>
      <link>/hotelx/howtos/howto-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/howtos/howto-book/</guid>
      <description>HotelX Settings In HotelX there are different configuration level settings for a request. With these settings, you can configure some aspect of the request:
   Field Description     context It indicates the context codes that you want to send and to receive.   Timeout It sets the requested timeout in the different query and mutation types:* search * quote * book (includes cancel and booking)    Language The language you want to use in the request.</description>
    </item>
    
    <item>
      <title>Net compare</title>
      <link>/hotelx/plugins/format-files/netcompare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/netcompare/</guid>
      <description>The net compare file should be in the format below:
 Encoding: UTF-8 File Name:  context sequential netCompare  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-stats/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Preference</title>
      <link>/hotelx/plugins/format-files/preference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotelx/plugins/format-files/preference/</guid>
      <description>The preference file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential preference  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>travelgatex.com</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-web/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the web.
Web site Link
All notable changes to this product will be documented in this page. 2018-10-09  Added press module with releases, asses, medias, newsletter, blog and contact. Added the possiblity to add apis to a team. Added second functional version of stats.    Changed the query to obtain team permissions.</description>
    </item>
    
    <item>
      <title>footer</title>
      <link>/_footer/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_footer/</guid>
      <description>Lorem ipsum dolor sit amet.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_header/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/guion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guion/</guid>
      <description>Getting Started pagetitle = &amp;ldquo;&amp;rdquo; GOAL: información basica para empezar a desarrollar
Overview GOAL: Explicar el who, why, how de la plataforma
 WHO: Equipos tecnicos para consumir servicios de travel
 WHY: search &amp;amp; book travel multi-products &amp;amp; multi-source
 WHY: Using the Storefront API, you can:
 HOW: Plataforma: Multi-Producto &amp;amp; Multi-Source
 HOW: Diagrama Platforma
 HOW: Utilización de GraphQL: EndPoint único
 WHY: Fast. Scalable. Reliable.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>github contributors Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester.</description>
    </item>
    
  </channel>
</rss>