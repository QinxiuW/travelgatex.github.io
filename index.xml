<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TravelgateX Documentation</title>
    <link>/</link>
    <description>Recent content on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API</title>
      <link>/alerts-x/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/logging/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/mappea/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/paymentx/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/stats/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>API</title>
      <link>/travelgatex/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/alerts-x/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/logging/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/mappea/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/paymentx/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/stats/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/travelgatex/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    ResourceData:    ProductData:</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/alerts-x/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/logging/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/mappea/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/paymentx/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/stats/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/travelgatex/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/alerts-x/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/logging/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/mappea/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/paymentx/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/stats/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/travelgatex/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(API):   cursor(String!):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/alerts-x/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/access/</guid>
      <description>GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/logging/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/mappea/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/paymentx/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/stats/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/travelgatex/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/alerts-x/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/logging/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/mappea/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/paymentx/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/stats/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/travelgatex/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  SupplierData:    OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/alerts-x/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/logging/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/mappea/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/paymentx/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/stats/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/travelgatex/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/alerts-x/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/logging/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/mappea/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/paymentx/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/stats/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/travelgatex/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Access):   cursor(String!):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AccessFilter</title>
      <link>/alerts-x/reference/inputobjects/accessfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/accessfilter/</guid>
      <description>GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):</description>
    </item>
    
    <item>
      <title>AccessFilter</title>
      <link>/travelgatex/reference/inputobjects/accessfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessfilter/</guid>
      <description>GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):</description>
    </item>
    
    <item>
      <title>AccessFilterInput</title>
      <link>/hotel-x/reference/inputobjects/accessfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/accessfilterinput/</guid>
      <description>Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.
GraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AccessFilterInput</title>
      <link>/travelgatex/reference/inputobjects/accessfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessfilterinput/</guid>
      <description>Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.
GraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AccessInput</title>
      <link>/travelgatex/reference/inputobjects/accessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/accessinput/</guid>
      <description>Access input
GraphQL schema definition type AccessInput {  name: String    isActive: Boolean    code: ID    supplier: String    isTest: Boolean    user: String    password: String    urls: UrlsInput    parameters: [ParameterInput]    markets: [String!]    rateRules: [RateRulesType!]    shared: String    group: ID    owner: ID   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/hotel-x/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/addon/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.</description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/travelgatex/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addon/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.</description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/hotel-x/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/addons/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!</description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/travelgatex/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addons/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!</description>
    </item>
    
    <item>
      <title>AdminMutation</title>
      <link>/travelgatex/reference/objects/adminmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminmutation/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s for implementing GraphQL mutations.
GraphQL schema definition type AdminMutation {  createAccess( input: AccessInput!, ): Access    updateAccess( input: AccessInput!, ): Access    grantAccessToGroup( input: GroupInput!, ): Access    deleteAccessFromGroup( input: GroupInput!, ): Access    grantSupplierToGroup( input: GroupInput!, ): Supplier    deleteSupplierFromGroup( input: GroupInput!, ): Supplier    grantClientToGroup( input: GroupInput!, ): Client    deleteClientFromGroup( input: GroupInput!</description>
    </item>
    
    <item>
      <title>AdminQuery</title>
      <link>/travelgatex/reference/objects/adminquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminquery/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s GraphQL interface.
GraphQL schema definition type AdminQuery {  jwt: JWT    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    serviceApi( filter: ServiceApiFilter, ): ServiceApi    pointsOfSale( filter: PointOfSaleFilter, ): PointOfSaleConnection    profiles( filter: ProfileFilter, ): ProfileConnection    entities( filter: EntityFilter, ): EntityConnection    organizations(    codes: [ID!</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/alerts-x/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/advisemessage/</guid>
      <description>GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/hotel-x/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/logging/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/mappea/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/paymentx/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/stats/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessage</title>
      <link>/travelgatex/reference/objects/advisemessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/advisemessage/</guid>
      <description>List of advise messages.
GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/alerts-x/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/hotel-x/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/logging/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/mappea/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/paymentx/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/stats/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>AdviseMessageLevel</title>
      <link>/travelgatex/reference/enums/advisemessagelevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/advisemessagelevel/</guid>
      <description>GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>Airport</title>
      <link>/hotel-x/reference/objects/airport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/airport/</guid>
      <description>Airport Type
GraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Airport</title>
      <link>/travelgatex/reference/objects/airport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/airport/</guid>
      <description>Airport Type
GraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>AirportData</title>
      <link>/hotel-x/reference/objects/airportdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/airportdata/</guid>
      <description>Information about the airport
GraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport&amp;#39;s name  location(Location): The airport&amp;#39;s location</description>
    </item>
    
    <item>
      <title>AirportData</title>
      <link>/travelgatex/reference/objects/airportdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/airportdata/</guid>
      <description>Information about the airport
GraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport&amp;#39;s name  location(Location): The airport&amp;#39;s location</description>
    </item>
    
    <item>
      <title>Alert</title>
      <link>/alerts-x/reference/objects/alert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alert/</guid>
      <description>Alert node
GraphQL schema definition type Alert {  code: ID!    alertData: AlertData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>AlertConfiguration</title>
      <link>/alerts-x/reference/objects/alertconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alertconfiguration/</guid>
      <description>GraphQL schema definition type AlertConfiguration {  alertType: AlertType!    periodicity: Int    window: Int    timesToAlert: Int!    typeConfiguration: AlertTypeConfiguration    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int    email( type: EmailType, ): [Email]!    hubStatus( isInclusive: Boolean!, ): [HubStatus!]    errorCode( isInclusive: Boolean!</description>
    </item>
    
    <item>
      <title>AlertConfigurationInputAverageTime</title>
      <link>/alerts-x/reference/inputobjects/alertconfigurationinputaveragetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertconfigurationinputaveragetime/</guid>
      <description>Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0.</description>
    </item>
    
    <item>
      <title>AlertConfigurationInputErrorRate</title>
      <link>/alerts-x/reference/inputobjects/alertconfigurationinputerrorrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertconfigurationinputerrorrate/</guid>
      <description>Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.
GraphQL schema definition type AlertConfigurationInputErrorRate {  toCheck: [Int!</description>
    </item>
    
    <item>
      <title>AlertConfigurationInputNoTraffic</title>
      <link>/alerts-x/reference/inputobjects/alertconfigurationinputnotraffic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertconfigurationinputnotraffic/</guid>
      <description>Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.
GraphQL schema definition type AlertConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int!    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!</description>
    </item>
    
    <item>
      <title>AlertConfigurationInputPeakTraffic</title>
      <link>/alerts-x/reference/inputobjects/alertconfigurationinputpeaktraffic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertconfigurationinputpeaktraffic/</guid>
      <description>Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .
GraphQL schema definition type AlertConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int!    timesToAlert: Int!    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!</description>
    </item>
    
    <item>
      <title>AlertConnection</title>
      <link>/alerts-x/reference/objects/alertconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alertconnection/</guid>
      <description>Alert list
GraphQL schema definition type AlertConnection {  edges: [AlertEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([AlertEdge]):   pageInfo(PageInfo!):   count(Int!):   
Required by AlertData:    AlertsXQuery:</description>
    </item>
    
    <item>
      <title>AlertCriteriaInput</title>
      <link>/alerts-x/reference/inputobjects/alertcriteriainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertcriteriainput/</guid>
      <description>GraphQL schema definition type AlertCriteriaInput {  alertCodes: [ID!]    isActive: Boolean    groups: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields alertCodes([ID!]):   isActive(Boolean):   groups([ID!]):</description>
    </item>
    
    <item>
      <title>AlertData</title>
      <link>/alerts-x/reference/objects/alertdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alertdata/</guid>
      <description>GraphQL schema definition type AlertData {  code: ID!    name: String    description: String    configuration: AlertConfiguration!    isActive: Boolean!    history( relay: RelayInput, filter: AlertFilterInput, ): AlertConnection!    editor: Member!    events( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>AlertEdge</title>
      <link>/alerts-x/reference/objects/alertedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alertedge/</guid>
      <description>GraphQL schema definition type AlertEdge {  node: Alert    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Alert):   cursor(String!):   
Required by AlertConnection:  Alert list</description>
    </item>
    
    <item>
      <title>AlertFilterInput</title>
      <link>/alerts-x/reference/inputobjects/alertfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertfilterinput/</guid>
      <description>GraphQL schema definition type AlertFilterInput {  AND: [AlertFilterInput!]    OR: [AlertFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>AlertGroupInput</title>
      <link>/alerts-x/reference/inputobjects/alertgroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertgroupinput/</guid>
      <description>GraphQL schema definition type AlertGroupInput {  code: ID!    comercialType: ComercialType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   comercialType(ComercialType!):   isInclusive(Boolean!):</description>
    </item>
    
    <item>
      <title>AlertGroups</title>
      <link>/alerts-x/reference/enums/alertgroups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/alertgroups/</guid>
      <description> GraphQL schema definition  enum AlertGroups{   ACCESS,    CLIENT,    SUPPLIER,    SUPPLIER_EXTERNAL,    XTG,    OPERATION,    HUB_STATUS,    ERROR_CODE,    ERROR_TYPE,    GROUP_ORG_SELLER,    GROUP_ORG_BUYER,    GROUP_FOLDER_SELLER,    GROUP_FOLDER_BUYER,    GROUP_PRODUCT_SELLER,    GROUP_PRODUCT_BUYER,   }   </description>
    </item>
    
    <item>
      <title>AlertInput</title>
      <link>/alerts-x/reference/inputobjects/alertinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertinput/</guid>
      <description>Alert information. Only one configuration has to be set at once.
GraphQL schema definition type AlertInput {  name: String    description: String    configurationNoTraffic: AlertConfigurationInputNoTraffic    configurationErrorRate: AlertConfigurationInputErrorRate    configurationAverageTime: AlertConfigurationInputAverageTime    configurationPeakTraffic: AlertConfigurationInputPeakTraffic    isActive: Boolean!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>AlertObjectInput</title>
      <link>/alerts-x/reference/inputobjects/alertobjectinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertobjectinput/</guid>
      <description>GraphQL schema definition type AlertObjectInput {  code: ID!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   isInclusive(Boolean!):</description>
    </item>
    
    <item>
      <title>AlertType</title>
      <link>/alerts-x/reference/enums/alerttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/alerttype/</guid>
      <description>GraphQL schema definition  enum AlertType{   ERROR_RATE,    AVERAGE_TIME,    NO_TRAFFIC,    PEAK_TRAFFIC,   }   Required by AlertConfiguration:</description>
    </item>
    
    <item>
      <title>AlertTypeConfiguration</title>
      <link>/alerts-x/reference/objects/alerttypeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/alerttypeconfiguration/</guid>
      <description>Depending on the talert type, typeConfiguration will use some fields
GraphQL schema definition type AlertTypeConfiguration {  historicalWindow: Int    offset: Int    max_average: Int    toCheck: [Int!]    toCompare: [Int!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AlertUpdateConfigurationInputAverageTime</title>
      <link>/alerts-x/reference/inputobjects/alertupdateconfigurationinputaveragetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertupdateconfigurationinputaveragetime/</guid>
      <description>Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0.</description>
    </item>
    
    <item>
      <title>AlertUpdateConfigurationInputErrorRate</title>
      <link>/alerts-x/reference/inputobjects/alertupdateconfigurationinputerrorrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertupdateconfigurationinputerrorrate/</guid>
      <description>Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.
GraphQL schema definition type AlertUpdateConfigurationInputErrorRate {  toCheck: [Int!</description>
    </item>
    
    <item>
      <title>AlertUpdateConfigurationInputNoTraffic</title>
      <link>/alerts-x/reference/inputobjects/alertupdateconfigurationinputnotraffic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertupdateconfigurationinputnotraffic/</guid>
      <description>Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.
GraphQL schema definition type AlertUpdateConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!</description>
    </item>
    
    <item>
      <title>AlertUpdateConfigurationInputPeakTraffic</title>
      <link>/alerts-x/reference/inputobjects/alertupdateconfigurationinputpeaktraffic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertupdateconfigurationinputpeaktraffic/</guid>
      <description>Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .
GraphQL schema definition type AlertUpdateConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int    timesToAlert: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!</description>
    </item>
    
    <item>
      <title>AlertUpdateInput</title>
      <link>/alerts-x/reference/inputobjects/alertupdateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/alertupdateinput/</guid>
      <description>GraphQL schema definition type AlertUpdateInput {  name: String    description: String    configurationNoTraffic: AlertUpdateConfigurationInputNoTraffic    configurationErrorRate: AlertUpdateConfigurationInputErrorRate    configurationAverageTime: AlertUpdateConfigurationInputAverageTime    configurationPeakTraffic: AlertUpdateConfigurationInputPeakTraffic    isActive: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>AlertsXQuery</title>
      <link>/alerts-x/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/schema/query/</guid>
      <description>GraphQL schema definition type AlertsXQuery {  alerts(    relay: RelayInput,     filter: AlertFilterInput,     criteria: AlertCriteriaInput!,     ): AlertConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields alerts(AlertConnection!): Query to obtain Alerts</description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/hotel-x/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/amenity/</guid>
      <description>An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.
GraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/travelgatex/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/amenity/</guid>
      <description>An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.
GraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ApplicationAreaType</title>
      <link>/hotel-x/reference/enums/applicationareatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/applicationareatype/</guid>
      <description>Indicates where it applies
GraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.</description>
    </item>
    
    <item>
      <title>ApplicationAreaType</title>
      <link>/travelgatex/reference/enums/applicationareatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/applicationareatype/</guid>
      <description>Indicates where it applies
GraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.</description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/hotel-x/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/auditdata/</guid>
      <description>Data sent and received in the supplier’s native format.
GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!</description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/travelgatex/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/auditdata/</guid>
      <description>Data sent and received in the supplier’s native format.
GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!</description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/hotel-x/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/bed/</guid>
      <description>Contains information about a bed.
GraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not</description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/travelgatex/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bed/</guid>
      <description>Contains information about a bed.
GraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not</description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/hotel-x/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/board/</guid>
      <description>Board type.
GraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!</description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/travelgatex/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/board/</guid>
      <description>Board type.
GraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!</description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/hotel-x/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/boardconnection/</guid>
      <description>BoardList definition
GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page  
Required by HotelXQuery:</description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/travelgatex/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardconnection/</guid>
      <description>BoardList definition
GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page  
Required by HotelXQuery:</description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/hotel-x/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/travelgatex/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/hotel-x/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/boardedge/</guid>
      <description>BoardList Edge definition
GraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Board):   cursor(String!):   
Required by BoardConnection:  BoardList definition</description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/travelgatex/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardedge/</guid>
      <description>BoardList Edge definition
GraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Board):   cursor(String!):   
Required by BoardConnection:  BoardList definition</description>
    </item>
    
    <item>
      <title>BookPaxInput</title>
      <link>/hotel-x/reference/inputobjects/bookpaxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/bookpaxinput/</guid>
      <description>Input BookPax contains basic information abaout pax suach as name, surname and age.
GraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The guest&amp;#39;s first name  surname(String!</description>
    </item>
    
    <item>
      <title>BookPaxInput</title>
      <link>/travelgatex/reference/inputobjects/bookpaxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookpaxinput/</guid>
      <description>Input BookPax contains basic information abaout pax suach as name, surname and age.
GraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The guest&amp;#39;s first name  surname(String!</description>
    </item>
    
    <item>
      <title>BookReferenceInput</title>
      <link>/hotel-x/reference/inputobjects/bookreferenceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/bookreferenceinput/</guid>
      <description>Reference object that contains the client reference and/or supplier reference.
GraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): The client&amp;#39;s reference  supplier(String): The Supplier&amp;#39;s reference</description>
    </item>
    
    <item>
      <title>BookReferenceInput</title>
      <link>/travelgatex/reference/inputobjects/bookreferenceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookreferenceinput/</guid>
      <description>Reference object that contains the client reference and/or supplier reference.
GraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): The client&amp;#39;s reference  supplier(String): The Supplier&amp;#39;s reference</description>
    </item>
    
    <item>
      <title>BookRoomInput</title>
      <link>/hotel-x/reference/inputobjects/bookroominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/bookroominput/</guid>
      <description>Input BookRoom contains list of pax and the room&amp;rsquo;s reference.
GraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int!): The room&amp;#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room</description>
    </item>
    
    <item>
      <title>BookRoomInput</title>
      <link>/travelgatex/reference/inputobjects/bookroominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/bookroominput/</guid>
      <description>Input BookRoom contains list of pax and the room&amp;rsquo;s reference.
GraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int!): The room&amp;#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room</description>
    </item>
    
    <item>
      <title>BookStatusType</title>
      <link>/hotel-x/reference/enums/bookstatustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/bookstatustype/</guid>
      <description>Book status
GraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel</description>
    </item>
    
    <item>
      <title>BookStatusType</title>
      <link>/travelgatex/reference/enums/bookstatustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/bookstatustype/</guid>
      <description>Book status
GraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel</description>
    </item>
    
    <item>
      <title>BookableOptionSearch</title>
      <link>/hotel-x/reference/interfaces/bookableoptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/interfaces/bookableoptionsearch/</guid>
      <description>GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key</description>
    </item>
    
    <item>
      <title>BookableOptionSearch</title>
      <link>/travelgatex/reference/interfaces/bookableoptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/bookableoptionsearch/</guid>
      <description>GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key</description>
    </item>
    
    <item>
      <title>Booking flow</title>
      <link>/hotel-x/howtos/bookingflow/flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/flow/</guid>
      <description>Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.
 --                                            1. SEARCH  2. QUOTE  3.</description>
    </item>
    
    <item>
      <title>BookingCriteriaType</title>
      <link>/hotel-x/reference/enums/bookingcriteriatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/bookingcriteriatype/</guid>
      <description>Indicates the type of criteria in the request of the booking list
GraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.</description>
    </item>
    
    <item>
      <title>BookingCriteriaType</title>
      <link>/travelgatex/reference/enums/bookingcriteriatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/bookingcriteriatype/</guid>
      <description>Indicates the type of criteria in the request of the booking list
GraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.</description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/hotel-x/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/bookinghotel/</guid>
      <description>GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/travelgatex/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookinghotel/</guid>
      <description>GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/hotel-x/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/bookingroom/</guid>
      <description>GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/travelgatex/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookingroom/</guid>
      <description>GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/alerts-x/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/boolean/</guid>
      <description>The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by AlertCriteriaInput:    PageInfo:    AlertData:    AlertConfiguration:    MemberData:    GroupData:    GroupCommonData:    APIData:    ResourceData:    RoleData:    AccessData:    SupplierData:    Provider:    ClientFilter:    OrganizationData:    ClientData:    SupplierFilter:    AlertInput:  Alert information.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/hotel-x/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/boolean/</guid>
      <description>The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  PageInfo:    HotelData:  Hotel data  DestinationData:  Information about destinantion  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/logging/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by PageInfo:    OperationDetailed:  Stats information per operation  AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    GroupData:    ClientData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/mappea/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  PageInfo:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    ClientData:    GroupData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/paymentx/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by PageInfo:    GroupData:    GroupCommonData:    MemberData:    APIData:    ResourceData:    RoleData:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    ClientData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/stats/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/boolean/</guid>
      <description> The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by PageInfo:    OperationDetailed:  Stats information per operation  AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    GroupData:    ClientData:     </description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/travelgatex/reference/scalars/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/boolean/</guid>
      <description>The Boolean scalar type represents true or false.
GraphQL schema definition scalar Boolean   Required by SupplierFilter:    ClientFilter:    EntityFilter:    PageInfo:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    ClientData:    GroupData:    APIData:    ResourceData:    RoleData:    ProfileData:  Profile data  HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>Build An OTA</title>
      <link>/travelgatex/tutorials/ota-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/tutorials/ota-site/</guid>
      <description>Creating your full OTA This topic describes how to build your own OTA using HotelX.
Before you begin  Basic knowledge of Angular Read HotelX, which contains information about the HotelX API  Scenario: Create an Online Travel Agency written in Angular For this quickstart tutorial, we have prepared a repository that contains the full Angular code for the OTA clone. All you need to do is to get TravelgateX credentials and connect it with the Angular application.</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/hotel-x/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/businessrules/</guid>
      <description>List of business rules for filtering options based on your interests.
GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/travelgatex/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/businessrules/</guid>
      <description>List of business rules for filtering options based on your interests.
GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!</description>
    </item>
    
    <item>
      <title>BusinessRulesInput</title>
      <link>/hotel-x/reference/inputobjects/businessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/businessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>BusinessRulesInput</title>
      <link>/travelgatex/reference/inputobjects/businessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/businessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>BusinessRulesType</title>
      <link>/hotel-x/reference/enums/businessrulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/businessrulestype/</guid>
      <description>Business rules type
GraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.</description>
    </item>
    
    <item>
      <title>BusinessRulesType</title>
      <link>/travelgatex/reference/enums/businessrulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/businessrulestype/</guid>
      <description>Business rules type
GraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.</description>
    </item>
    
    <item>
      <title>CVC</title>
      <link>/paymentx/reference/scalars/cvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/cvc/</guid>
      <description>GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>CVC</title>
      <link>/travelgatex/reference/scalars/cvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/cvc/</guid>
      <description>GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/hotel-x/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/cancelpenalty/</guid>
      <description>Contains information for cancellation penalities..
GraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!</description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/travelgatex/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpenalty/</guid>
      <description>Contains information for cancellation penalities..
GraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!</description>
    </item>
    
    <item>
      <title>CancelPenaltyType</title>
      <link>/hotel-x/reference/enums/cancelpenaltytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/cancelpenaltytype/</guid>
      <description>Options type
GraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..</description>
    </item>
    
    <item>
      <title>CancelPenaltyType</title>
      <link>/travelgatex/reference/enums/cancelpenaltytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/cancelpenaltytype/</guid>
      <description>Options type
GraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..</description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/hotel-x/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/cancelpolicy/</guid>
      <description>Information about a policy cancellation.
GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties</description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/travelgatex/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpolicy/</guid>
      <description>Information about a policy cancellation.
GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties</description>
    </item>
    
    <item>
      <title>CardNumber</title>
      <link>/paymentx/reference/scalars/cardnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/cardnumber/</guid>
      <description>GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>CardNumber</title>
      <link>/travelgatex/reference/scalars/cardnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/cardnumber/</guid>
      <description>GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/hotel-x/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/category/</guid>
      <description>Category Type
GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!</description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/travelgatex/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/category/</guid>
      <description>Category Type
GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!</description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/hotel-x/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/categoryconnection/</guid>
      <description>CategoryList definition
GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page  
Required by HotelXQuery:</description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/travelgatex/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryconnection/</guid>
      <description>CategoryList definition
GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page  
Required by HotelXQuery:</description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/hotel-x/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/travelgatex/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/hotel-x/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/categoryedge/</guid>
      <description>CategoryList Edge definition
GraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Category):   cursor(String!):   
Required by CategoryConnection:  CategoryList definition</description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/travelgatex/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryedge/</guid>
      <description>CategoryList Edge definition
GraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Category):   cursor(String!):   
Required by CategoryConnection:  CategoryList definition</description>
    </item>
    
    <item>
      <title>Certification Goals</title>
      <link>/hotel-x/howtos/certification_process/goals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/certification_process/goals/</guid>
      <description>The Certification process intention is to test and ensure that your integration is performed correctly, this means, that functionality and implementation of the relevant and mandatory information are done correctly and without errors. All of this is focused to avoid issues with the final consumer, or he/she being misled by any incorrect information or not desirable API uses. Before starting the certification process, make sure you have followed the Welcome Pack instructions.</description>
    </item>
    
    <item>
      <title>ChannelX</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-channelx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-channelx/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>ChargeType</title>
      <link>/hotel-x/reference/enums/chargetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/chargetype/</guid>
      <description>Charge Type
GraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.</description>
    </item>
    
    <item>
      <title>ChargeType</title>
      <link>/travelgatex/reference/enums/chargetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/chargetype/</guid>
      <description>Charge Type
GraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/alerts-x/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/client/</guid>
      <description>GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/logging/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/mappea/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/paymentx/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/stats/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/travelgatex/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/alerts-x/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/logging/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/mappea/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/paymentx/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/stats/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/travelgatex/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/alerts-x/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/logging/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/mappea/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/paymentx/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/stats/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/travelgatex/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/alerts-x/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/logging/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/mappea/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/paymentx/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/stats/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/travelgatex/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Client):   cursor(String!):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ClientFilter</title>
      <link>/alerts-x/reference/inputobjects/clientfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/clientfilter/</guid>
      <description>GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!</description>
    </item>
    
    <item>
      <title>ClientFilter</title>
      <link>/travelgatex/reference/inputobjects/clientfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/clientfilter/</guid>
      <description>GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!</description>
    </item>
    
    <item>
      <title>ComercialType</title>
      <link>/alerts-x/reference/enums/comercialtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/comercialtype/</guid>
      <description>GraphQL schema definition  enum ComercialType{   SELLER,    BUYER,   }   Required by AlertGroupInput:</description>
    </item>
    
    <item>
      <title>Common resources</title>
      <link>/travelgatex/concepts/common-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/common-resources/</guid>
      <description>On this page you will learn more about common resources used in TravelgateX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.
Supplier A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers.
Access An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>ConfigurationInput</title>
      <link>/hotel-x/reference/inputobjects/configurationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/configurationinput/</guid>
      <description>The information and credentials required to access the supplier’s system.
GraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ConfigurationInput</title>
      <link>/travelgatex/reference/inputobjects/configurationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/configurationinput/</guid>
      <description>The information and credentials required to access the supplier’s system.
GraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Connect a New Supplier</title>
      <link>/hotel-x/howtos/howto-connect-supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/howto-connect-supplier/</guid>
      <description>In order to connect to a new Supplier please follow the steps below:
 Login to our Connect Form Select the supplier you want to connect to and enter the connectivity credentials. A Jira ticket will be raised and you will receive a confirmation email. Our Activations Department will contact you when the process is ready.  In order to activate a new Supplier a few processes need to be executed - this process depends on each Supplier and it could take up to 24 hours.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/hotel-x/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/contact/</guid>
      <description>Contact Data.
GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/travelgatex/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/contact/</guid>
      <description>Contact Data.
GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web</description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/hotel-x/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/coordinates/</guid>
      <description>Geographical coordinates corresponding to a location.
GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude  
Required by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location</description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/travelgatex/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/coordinates/</guid>
      <description>Geographical coordinates corresponding to a location.
GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude  
Required by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location</description>
    </item>
    
    <item>
      <title>Country</title>
      <link>/hotel-x/reference/scalars/country/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/country/</guid>
      <description>The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes &amp;ldquo;ES&amp;rdquo;.
GraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Country</title>
      <link>/travelgatex/reference/scalars/country/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/country/</guid>
      <description>The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes &amp;ldquo;ES&amp;rdquo;.
GraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>CreateClientInput</title>
      <link>/travelgatex/reference/inputobjects/createclientinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createclientinput/</guid>
      <description>GraphQL schema definition type CreateClientInput {  name: String!    isActive: Boolean!    group: String!    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(String!</description>
    </item>
    
    <item>
      <title>CreateGroupInput</title>
      <link>/travelgatex/reference/inputobjects/creategroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/creategroupinput/</guid>
      <description>GraphQL schema definition type CreateGroupInput {  group: ID!    type: GroupTypeInput!    info: String    parent: ID!    template: Template   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields group(ID!):   type(GroupTypeInput!):   info(String):   parent(ID!</description>
    </item>
    
    <item>
      <title>CreateMemberInput</title>
      <link>/travelgatex/reference/inputobjects/creatememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/creatememberinput/</guid>
      <description>GraphQL schema definition type CreateMemberInput {  member: ID    info: String    type: MemberType!    group: ID!    role: ID!    resources: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID):   info(String):   type(MemberType!</description>
    </item>
    
    <item>
      <title>CreateOrganizationInput</title>
      <link>/travelgatex/reference/inputobjects/createorganizationinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createorganizationinput/</guid>
      <description>GraphQL schema definition type CreateOrganizationInput {  user: ID!    info: String    organization: ID    template: OrganizationTemplate!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields user(ID!):   info(String):   organization(ID):   template(OrganizationTemplate!):</description>
    </item>
    
    <item>
      <title>CreateProfileInput</title>
      <link>/travelgatex/reference/inputobjects/createprofileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/createprofileinput/</guid>
      <description>GraphQL schema definition type CreateProfileInput {  label: String!    group: String!    type: ProfileType!    entities: EntitiesInput    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>CriteriaBookingDatesInput</title>
      <link>/hotel-x/reference/inputobjects/criteriabookingdatesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/criteriabookingdatesinput/</guid>
      <description>Criteria by dates
GraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date.</description>
    </item>
    
    <item>
      <title>CriteriaBookingDatesInput</title>
      <link>/travelgatex/reference/inputobjects/criteriabookingdatesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/criteriabookingdatesinput/</guid>
      <description>Criteria by dates
GraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date.</description>
    </item>
    
    <item>
      <title>CriteriaBookingReferencesInput</title>
      <link>/hotel-x/reference/inputobjects/criteriabookingreferencesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/criteriabookingreferencesinput/</guid>
      <description>Criteria by references
GraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.</description>
    </item>
    
    <item>
      <title>CriteriaBookingReferencesInput</title>
      <link>/travelgatex/reference/inputobjects/criteriabookingreferencesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/criteriabookingreferencesinput/</guid>
      <description>Criteria by references
GraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/hotel-x/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/criteriasearch/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room.
GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/travelgatex/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/criteriasearch/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room.
GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Currency</title>
      <link>/hotel-x/reference/scalars/currency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/currency/</guid>
      <description>The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes &amp;ldquo;EUR&amp;rdquo;.
GraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Currency</title>
      <link>/travelgatex/reference/scalars/currency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/currency/</guid>
      <description>The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes &amp;ldquo;EUR&amp;rdquo;.
GraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/hotel-x/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/date/</guid>
      <description>The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/paymentx/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/date/</guid>
      <description> The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     </description>
    </item>
    
    <item>
      <title>Date</title>
      <link>/travelgatex/reference/scalars/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/date/</guid>
      <description>The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22&amp;rdquo;.
GraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/alerts-x/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/datetime/</guid>
      <description>GraphQL schema definition scalar DateTime   Required by AlertFilterInput:    Alert:   Alert node  Node:    Member:    Group:    API:    Resource:    Operation:    ManagedGroup:    Role:    Access:    Supplier:    Organization:    Domain:    Product:    Client:    Event:  Event triggered</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/hotel-x/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by HotelXHotelFilterInput:  By default: Logical AND on all given filters.  HotelRuntimeConfiguration:    Board:  Board type.  Node:    Category:  Category Type  Hotel:  Hotel Type  Media:  Contains media information.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/logging/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/mappea/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Node:    Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/paymentx/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by PaymentXStoredCardFilterInput:    PaymentXStoredCard:    Node:    Group:  Groups are organized hierarchically.  PointOfSale:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/stats/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>/travelgatex/reference/scalars/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/datetime/</guid>
      <description>The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: &amp;ldquo;2017-10-22T13:57:31.123Z&amp;rdquo;.
GraphQL schema definition scalar DateTime   Required by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Node:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>DateType</title>
      <link>/hotel-x/reference/enums/datetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/datetype/</guid>
      <description>Indicates the type of dates
GraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates</description>
    </item>
    
    <item>
      <title>DateType</title>
      <link>/travelgatex/reference/enums/datetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/datetype/</guid>
      <description>Indicates the type of dates
GraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates</description>
    </item>
    
    <item>
      <title>DeleteGroupInput</title>
      <link>/travelgatex/reference/inputobjects/deletegroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deletegroupinput/</guid>
      <description>GraphQL schema definition type DeleteGroupInput {  group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields group(ID!):</description>
    </item>
    
    <item>
      <title>DeleteMemberInput</title>
      <link>/travelgatex/reference/inputobjects/deletememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deletememberinput/</guid>
      <description>GraphQL schema definition type DeleteMemberInput {  member: ID!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID!):   group(ID!):</description>
    </item>
    
    <item>
      <title>DeltaPriceInput</title>
      <link>/hotel-x/reference/inputobjects/deltapriceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/deltapriceinput/</guid>
      <description>Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation.</description>
    </item>
    
    <item>
      <title>DeltaPriceInput</title>
      <link>/travelgatex/reference/inputobjects/deltapriceinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/deltapriceinput/</guid>
      <description>Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation.</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/hotel-x/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/description/</guid>
      <description>Object description indicates the type and the description about something.
GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/travelgatex/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/description/</guid>
      <description>Object description indicates the type and the description about something.
GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label</description>
    </item>
    
    <item>
      <title>DescriptionType</title>
      <link>/hotel-x/reference/enums/descriptiontype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/descriptiontype/</guid>
      <description>Indicates the type of description
GraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.</description>
    </item>
    
    <item>
      <title>DescriptionType</title>
      <link>/travelgatex/reference/enums/descriptiontype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/descriptiontype/</guid>
      <description>Indicates the type of description
GraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.</description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/hotel-x/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/travelgatex/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/hotel-x/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/destinationconnection/</guid>
      <description>DestinationList definition
GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/travelgatex/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationconnection/</guid>
      <description>DestinationList definition
GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/hotel-x/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/travelgatex/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/hotel-x/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/destinationedge/</guid>
      <description>DestinationList Edge definition
GraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Destination):   cursor(String!):   
Required by DestinationConnection:  DestinationList definition</description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/travelgatex/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationedge/</guid>
      <description>DestinationList Edge definition
GraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Destination):   cursor(String!):   
Required by DestinationConnection:  DestinationList definition</description>
    </item>
    
    <item>
      <title>DestinationType</title>
      <link>/hotel-x/reference/enums/destinationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/destinationtype/</guid>
      <description>Indicates the type of destination
GraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location</description>
    </item>
    
    <item>
      <title>DestinationType</title>
      <link>/travelgatex/reference/enums/destinationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/destinationtype/</guid>
      <description>Indicates the type of destination
GraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/alerts-x/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/logging/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/mappea/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/paymentx/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/stats/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/travelgatex/reference/objects/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/domain/</guid>
      <description>GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/alerts-x/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/logging/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/mappea/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/paymentx/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/stats/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainData</title>
      <link>/travelgatex/reference/objects/domaindata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/domaindata/</guid>
      <description>GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   
Required by Domain:</description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/alerts-x/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/domainname/</guid>
      <description>GraphQL schema definition scalar DomainName   Required by DomainData:</description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/logging/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/mappea/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/paymentx/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/stats/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DomainName</title>
      <link>/travelgatex/reference/scalars/domainname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/domainname/</guid>
      <description> Scalar for type Domain
GraphQL schema definition scalar DomainName   Required by DomainData:     </description>
    </item>
    
    <item>
      <title>DurationType</title>
      <link>/hotel-x/reference/enums/durationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/durationtype/</guid>
      <description>Duration Type
GraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>DurationType</title>
      <link>/travelgatex/reference/enums/durationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/durationtype/</guid>
      <description>Duration Type
GraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>Email</title>
      <link>/alerts-x/reference/scalars/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/email/</guid>
      <description> GraphQL schema definition scalar Email   </description>
    </item>
    
    <item>
      <title>EmailInput</title>
      <link>/alerts-x/reference/inputobjects/emailinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/emailinput/</guid>
      <description>GraphQL schema definition type EmailInput {  address: ID!    type: EmailType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields address(ID!):   type(EmailType!):   
Required by AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.</description>
    </item>
    
    <item>
      <title>EmailType</title>
      <link>/alerts-x/reference/enums/emailtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/emailtype/</guid>
      <description>GraphQL schema definition  enum EmailType{   BCC,    TO,   }   Required by EmailInput:</description>
    </item>
    
    <item>
      <title>EntitiesInput</title>
      <link>/travelgatex/reference/inputobjects/entitiesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/entitiesinput/</guid>
      <description>GraphQL schema definition type EntitiesInput {  suppliers: [ID!]    clients: [ID!]    access: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields suppliers([ID!]):   clients([ID!]):   access([ID!]):   
Required by CreateProfileInput:    UpdateEntitiesInput:</description>
    </item>
    
    <item>
      <title>Entity</title>
      <link>/travelgatex/reference/objects/entity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entity/</guid>
      <description>GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>EntityConnection</title>
      <link>/travelgatex/reference/objects/entityconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityconnection/</guid>
      <description>GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  ProfileData:  Profile data</description>
    </item>
    
    <item>
      <title>EntityEdge</title>
      <link>/travelgatex/reference/objects/entityedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityedge/</guid>
      <description>GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Entity):   cursor(String!):   
Required by EntityConnection:</description>
    </item>
    
    <item>
      <title>EntityFilter</title>
      <link>/travelgatex/reference/inputobjects/entityfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/entityfilter/</guid>
      <description>GraphQL schema definition type EntityFilter {  codes: [ID!]    groups: [ID!]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields codes([ID!]):   groups([ID!]):   isActive(Boolean):   owner([ID!]):</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/alerts-x/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/error/</guid>
      <description>GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/hotel-x/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/logging/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/mappea/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/paymentx/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/stats/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/travelgatex/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description</description>
    </item>
    
    <item>
      <title>Error and Warning</title>
      <link>/hotel-x/concepts/errorwarning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/errorwarning/</guid>
      <description>In this chapter we will list the errors and warnings of HotelX booking flow.
Error list In the table below, we have structured a relation of all the Errors that can be returned in HotelX booking flow
   Code Type Description Explanation     ACCESS_ERROR VALIDATION_ERROR No valid accesses found The access is not found or it has no permission, or you are using a test access and you need to add the testMode.</description>
    </item>
    
    <item>
      <title>ErrorCodeInput</title>
      <link>/alerts-x/reference/inputobjects/errorcodeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/errorcodeinput/</guid>
      <description>GraphQL schema definition type ErrorCodeInput {  code: Int!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(Int!):   isInclusive(Boolean!):</description>
    </item>
    
    <item>
      <title>ErrorType</title>
      <link>/alerts-x/reference/enums/errortype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/errortype/</guid>
      <description>GraphQL schema definition  enum ErrorType{   OK,    PROVIDER,    TIMEOUT,    INTEGRATION,   }   Required by ErrorTypeInput:</description>
    </item>
    
    <item>
      <title>ErrorTypeInput</title>
      <link>/alerts-x/reference/inputobjects/errortypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/errortypeinput/</guid>
      <description>GraphQL schema definition type ErrorTypeInput {  code: ErrorType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ErrorType!):   isInclusive(Boolean!):</description>
    </item>
    
    <item>
      <title>Event</title>
      <link>/alerts-x/reference/objects/event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/event/</guid>
      <description>Event triggered
GraphQL schema definition type Event {  code: ID!    eventData: EventData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>EventConnection</title>
      <link>/alerts-x/reference/objects/eventconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/eventconnection/</guid>
      <description>Events list
GraphQL schema definition type EventConnection {  edges: [EventEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([EventEdge]):   pageInfo(PageInfo!):   count(Int!):   
Required by AlertData:    EventData:  Event data</description>
    </item>
    
    <item>
      <title>EventData</title>
      <link>/alerts-x/reference/objects/eventdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/eventdata/</guid>
      <description>Event data
GraphQL schema definition type EventData {  code: ID!    groupBy: String    status: EventType!    details: String!    history( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>EventEdge</title>
      <link>/alerts-x/reference/objects/eventedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/eventedge/</guid>
      <description>GraphQL schema definition type EventEdge {  node: Event    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Event):   cursor(String!):   
Required by EventConnection:  Events list</description>
    </item>
    
    <item>
      <title>EventType</title>
      <link>/alerts-x/reference/enums/eventtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/eventtype/</guid>
      <description>GraphQL schema definition  enum EventType{   OK,    ALERTING,   }   Required by EventData:  Event data</description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/hotel-x/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/exchange/</guid>
      <description>Provides information about the currency of original, and its rate applied over the results returned by the Supplier.
GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!</description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/travelgatex/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/exchange/</guid>
      <description>Provides information about the currency of original, and its rate applied over the results returned by the Supplier.
GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!</description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/hotel-x/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/expiredateinput/</guid>
      <description>The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information</description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/paymentx/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/expiredateinput/</guid>
      <description>The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>ExpireDateInput</title>
      <link>/travelgatex/reference/inputobjects/expiredateinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/expiredateinput/</guid>
      <description>The card expiration date
GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  PaymentXStoredCardInput:</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/alerts-x/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String):   message(String!):   
Required by AdviseMessage:</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/hotel-x/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/logging/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/mappea/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/paymentx/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/stats/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/travelgatex/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/hotel-x/faqs/frequently-asked-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/faqs/frequently-asked-questions/</guid>
      <description>General Where can I find object explanations/definitions? You can find it on our Schema
Languages allowed Which are the languages allowed in HotelX? The new aggregator allows every language, it will depend on each supplier.
List of suppliers available Is it possible to see the whole list of suppliers and to look at their hotel databases and prices somewhere? Here you will find the list of the sellers already connected to our platform.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>/mappea/reference/objects/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/file/</guid>
      <description>GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):   
Required by GetUploadedFilesData:</description>
    </item>
    
    <item>
      <title>File</title>
      <link>/travelgatex/reference/objects/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/file/</guid>
      <description>GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):   
Required by GetUploadedFilesData:</description>
    </item>
    
    <item>
      <title>FilterInput</title>
      <link>/hotel-x/reference/inputobjects/filterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/filterinput/</guid>
      <description>Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn&amp;rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: &amp;ldquo;deprecated from 2018-08-20. Please, use filterSearch&amp;rdquo;)
GraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>FilterInput</title>
      <link>/travelgatex/reference/inputobjects/filterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/filterinput/</guid>
      <description>Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn&amp;rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: &amp;ldquo;deprecated from 2018-08-20. Please, use filterSearch&amp;rdquo;)
GraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Float</title>
      <link>/hotel-x/reference/scalars/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/float/</guid>
      <description>The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.
GraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>Float</title>
      <link>/travelgatex/reference/scalars/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/float/</guid>
      <description>The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.
GraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>Geoname</title>
      <link>/hotel-x/reference/objects/geoname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/geoname/</guid>
      <description>Geoname type
GraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Geoname</title>
      <link>/travelgatex/reference/objects/geoname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/geoname/</guid>
      <description>Geoname type
GraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>GeonameData</title>
      <link>/hotel-x/reference/objects/geonamedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/geonamedata/</guid>
      <description>Geoname data, which contain a reference to his parent location
GraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>GeonameData</title>
      <link>/travelgatex/reference/objects/geonamedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/geonamedata/</guid>
      <description>Geoname data, which contain a reference to his parent location
GraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>GetMappeaStatsData</title>
      <link>/mappea/reference/objects/getmappeastatsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getmappeastatsdata/</guid>
      <description>GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):</description>
    </item>
    
    <item>
      <title>GetMappeaStatsData</title>
      <link>/travelgatex/reference/objects/getmappeastatsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsdata/</guid>
      <description>GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):</description>
    </item>
    
    <item>
      <title>GetMappeaStatsResponse</title>
      <link>/mappea/reference/objects/getmappeastatsresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getmappeastatsresponse/</guid>
      <description>GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>GetMappeaStatsResponse</title>
      <link>/travelgatex/reference/objects/getmappeastatsresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsresponse/</guid>
      <description>GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>GetUploadedFilesData</title>
      <link>/mappea/reference/objects/getuploadedfilesdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getuploadedfilesdata/</guid>
      <description> GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields files([File]):   
Required by GetUploadedFilesResponse:  ## GetUploadedFiles   </description>
    </item>
    
    <item>
      <title>GetUploadedFilesData</title>
      <link>/travelgatex/reference/objects/getuploadedfilesdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesdata/</guid>
      <description> GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields files([File]):   
Required by GetUploadedFilesResponse:  ## GetUploadedFiles   </description>
    </item>
    
    <item>
      <title>GetUploadedFilesResponse</title>
      <link>/mappea/reference/objects/getuploadedfilesresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/getuploadedfilesresponse/</guid>
      <description>GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>GetUploadedFilesResponse</title>
      <link>/travelgatex/reference/objects/getuploadedfilesresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesresponse/</guid>
      <description>GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/alerts-x/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/group/</guid>
      <description>GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/logging/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/mappea/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/paymentx/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/stats/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/travelgatex/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/alerts-x/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/logging/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/mappea/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/paymentx/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/stats/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupCommonData</title>
      <link>/travelgatex/reference/interfaces/groupcommondata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/groupcommondata/</guid>
      <description>GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/alerts-x/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by MemberData:    GroupData:    GroupCommonData:    APIData:    AccessData:    SupplierData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/logging/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/mappea/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by SupplierData:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/paymentx/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    MemberData:    APIData:    AccessData:    SupplierData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/stats/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/travelgatex/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    GroupData:    APIData:</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/alerts-x/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/logging/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/mappea/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/paymentx/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/stats/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/travelgatex/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/alerts-x/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/logging/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/mappea/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/paymentx/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/stats/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/travelgatex/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Group):   cursor(String!):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>GroupInput</title>
      <link>/travelgatex/reference/inputobjects/groupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/groupinput/</guid>
      <description>GraphQL schema definition type GroupInput {  id: ID!    groups: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!): Id of the resource permissions to be granted.  groups([ID]): Groups that will see this resoruce.</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/alerts-x/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/logging/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/mappea/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/paymentx/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/stats/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupType</title>
      <link>/travelgatex/reference/enums/grouptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/grouptype/</guid>
      <description>GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>GroupTypeInput</title>
      <link>/travelgatex/reference/enums/grouptypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/grouptypeinput/</guid>
      <description>GraphQL schema definition  enum GroupTypeInput{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by CreateGroupInput:</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/hotel-x/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/holder/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname  
Required by HotelBookingDetail:  Contains information about booking</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/paymentx/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/holder/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname  
Required by PaymentXStoredCardData:</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/travelgatex/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/holder/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname  
Required by HotelBookingDetail:  Contains information about booking  PaymentXStoredCardData:</description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/hotel-x/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/holderinput/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname</description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/paymentx/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/holderinput/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname</description>
    </item>
    
    <item>
      <title>HolderInput</title>
      <link>/travelgatex/reference/inputobjects/holderinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/holderinput/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): The card holder&amp;#39;s name  surname(String!): The card holder&amp;#39;s surname</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/hotel-x/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/travelgatex/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelBookInput</title>
      <link>/hotel-x/reference/inputobjects/hotelbookinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelbookinput/</guid>
      <description>Criteria of book.
GraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>HotelBookInput</title>
      <link>/travelgatex/reference/inputobjects/hotelbookinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelbookinput/</guid>
      <description>Criteria of book.
GraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/hotel-x/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/travelgatex/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/hotel-x/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelbooking/</guid>
      <description>GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/travelgatex/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbooking/</guid>
      <description>GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/hotel-x/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking
GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/travelgatex/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking
GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/hotel-x/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier&amp;#39;s system  cancelReference(String): Cancellation ID in the Supplier&amp;#39;s system  status(BookStatusType): Booking Status.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/travelgatex/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier&amp;#39;s system  cancelReference(String): Cancellation ID in the Supplier&amp;#39;s system  status(BookStatusType): Booking Status.</description>
    </item>
    
    <item>
      <title>HotelCancelInput</title>
      <link>/hotel-x/reference/inputobjects/hotelcancelinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelcancelinput/</guid>
      <description>Cancellation Criteria.
GraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.</description>
    </item>
    
    <item>
      <title>HotelCancelInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcancelinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcancelinput/</guid>
      <description>Cancellation Criteria.
GraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/hotel-x/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/travelgatex/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/hotel-x/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/travelgatex/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!</description>
    </item>
    
    <item>
      <title>HotelCriteriaBookingInput</title>
      <link>/hotel-x/reference/inputobjects/hotelcriteriabookinginput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelcriteriabookinginput/</guid>
      <description>Criteria of book contains basic information to find a book or books.
GraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelCriteriaBookingInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriabookinginput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriabookinginput/</guid>
      <description>Criteria of book contains basic information to find a book or books.
GraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelCriteriaQuoteInput</title>
      <link>/hotel-x/reference/inputobjects/hotelcriteriaquoteinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelcriteriaquoteinput/</guid>
      <description>The quote criteria contains the option reference id, block and language.
GraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request</description>
    </item>
    
    <item>
      <title>HotelCriteriaQuoteInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/</guid>
      <description>The quote criteria contains the option reference id, block and language.
GraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request</description>
    </item>
    
    <item>
      <title>HotelCriteriaSearchInput</title>
      <link>/hotel-x/reference/inputobjects/hotelcriteriasearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelcriteriasearchinput/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.
GraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelCriteriaSearchInput</title>
      <link>/travelgatex/reference/inputobjects/hotelcriteriasearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelcriteriasearchinput/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.
GraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/hotel-x/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/travelgatex/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/hotel-x/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hoteledge/</guid>
      <description>HotelList Edge definition
GraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):   
Required by HotelConnection:  HotelList definition</description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/travelgatex/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteledge/</guid>
      <description>HotelList Edge definition
GraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):   
Required by HotelConnection:  HotelList definition</description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/hotel-x/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote(s)
GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.</description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/travelgatex/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote(s)
GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/hotel-x/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description
GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/travelgatex/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description
GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/hotel-x/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelquote/</guid>
      <description>GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/travelgatex/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelquote/</guid>
      <description>GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfiguration</title>
      <link>/hotel-x/reference/objects/hotelruntimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelruntimeconfiguration/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfiguration</title>
      <link>/travelgatex/reference/objects/hotelruntimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeconfiguration/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfigurationData</title>
      <link>/hotel-x/reference/objects/hotelruntimeconfigurationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelruntimeconfigurationdata/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object  
Required by HotelRuntimeConfiguration:</description>
    </item>
    
    <item>
      <title>HotelRuntimeConfigurationData</title>
      <link>/travelgatex/reference/objects/hotelruntimeconfigurationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeconfigurationdata/</guid>
      <description>GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object  
Required by HotelRuntimeConfiguration:</description>
    </item>
    
    <item>
      <title>HotelRuntimeParameter</title>
      <link>/hotel-x/reference/objects/hotelruntimeparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelruntimeparameter/</guid>
      <description>template of all fields used by the supplier
GraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelRuntimeParameter</title>
      <link>/travelgatex/reference/objects/hotelruntimeparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelruntimeparameter/</guid>
      <description>template of all fields used by the supplier
GraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/hotel-x/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelsearch/</guid>
      <description>Results from Avail Hotel; contains all the available options for a given date and itinerary
GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/travelgatex/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelsearch/</guid>
      <description>Results from Avail Hotel; contains all the available options for a given date and itinerary
GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelSettingsInput</title>
      <link>/hotel-x/reference/inputobjects/hotelsettingsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelsettingsinput/</guid>
      <description>Settings that you can edit for this avail. Values are loaded by default in our Back Office.
GraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!</description>
    </item>
    
    <item>
      <title>HotelSettingsInput</title>
      <link>/travelgatex/reference/inputobjects/hotelsettingsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelsettingsinput/</guid>
      <description>Settings that you can edit for this avail. Values are loaded by default in our Back Office.
GraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!</description>
    </item>
    
    <item>
      <title>HotelXAccessInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxaccessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxaccessinput/</guid>
      <description>AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.
GraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXAccessInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxaccessinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxaccessinput/</guid>
      <description>AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.
GraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXAudit</title>
      <link>/travelgatex/reference/objects/hotelxaudit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxaudit/</guid>
      <description>GraphQL schema definition type HotelXAudit {  audit: Int    register: Int    ratio: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Int):   register(Int):   ratio(Int):   
Required by HotelXCommonSettingsData:</description>
    </item>
    
    <item>
      <title>HotelXAuditInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxauditinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxauditinput/</guid>
      <description>GraphQL schema definition type HotelXAuditInput {  audit: Boolean!    register: Boolean!    ratio: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields audit(Boolean!):   register(Boolean!):   ratio(Int!): Ratio of audit in ms  
Required by HotelXCommonSettingsDataInput:</description>
    </item>
    
    <item>
      <title>HotelXBoardQueryInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxboardqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxboardqueryinput/</guid>
      <description>GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.</description>
    </item>
    
    <item>
      <title>HotelXBoardQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxboardqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxboardqueryinput/</guid>
      <description>GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.</description>
    </item>
    
    <item>
      <title>HotelXBusinessRulesInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxbusinessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxbusinessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>HotelXBusinessRulesInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/</guid>
      <description>List of business rules to use as filter on the options.
GraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.</description>
    </item>
    
    <item>
      <title>HotelXCategoryQueryInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxcategoryqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxcategoryqueryinput/</guid>
      <description>GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.</description>
    </item>
    
    <item>
      <title>HotelXCategoryQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/</guid>
      <description>GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.</description>
    </item>
    
    <item>
      <title>HotelXCommonSettings</title>
      <link>/hotel-x/reference/objects/hotelxcommonsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxcommonsettings/</guid>
      <description>GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages  
Required by HotelXQuery:    HotelXMutation:</description>
    </item>
    
    <item>
      <title>HotelXCommonSettings</title>
      <link>/travelgatex/reference/objects/hotelxcommonsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxcommonsettings/</guid>
      <description>GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages  
Required by HotelXQuery:    HotelXMutation:</description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsData</title>
      <link>/hotel-x/reference/objects/hotelxcommonsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxcommonsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout    audit: HotelXAudit   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   audit(HotelXAudit):</description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsData</title>
      <link>/travelgatex/reference/objects/hotelxcommonsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxcommonsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout    audit: HotelXAudit   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   audit(HotelXAudit):</description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsDataInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxcommonsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxcommonsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!    audit: HotelXAuditInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   audit(HotelXAuditInput!):</description>
    </item>
    
    <item>
      <title>HotelXCommonSettingsDataInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!    audit: HotelXAuditInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   audit(HotelXAuditInput!):</description>
    </item>
    
    <item>
      <title>HotelXDefaultPlugin</title>
      <link>/hotel-x/reference/objects/hotelxdefaultplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxdefaultplugin/</guid>
      <description>GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPlugin</title>
      <link>/travelgatex/reference/objects/hotelxdefaultplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultplugin/</guid>
      <description>GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxdefaultplugininput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxdefaultplugininput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultplugininput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultplugininput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStep</title>
      <link>/hotel-x/reference/objects/hotelxdefaultpluginstep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxdefaultpluginstep/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStep</title>
      <link>/travelgatex/reference/objects/hotelxdefaultpluginstep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultpluginstep/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStepInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxdefaultpluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxdefaultpluginstepinput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):</description>
    </item>
    
    <item>
      <title>HotelXDefaultPluginStepInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/</guid>
      <description>GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettings</title>
      <link>/hotel-x/reference/objects/hotelxdefaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxdefaultsettings/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages  
Required by HotelXQuery:    HotelXMutation:</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettings</title>
      <link>/travelgatex/reference/objects/hotelxdefaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultsettings/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages  
Required by HotelXQuery:    HotelXMutation:</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsData</title>
      <link>/hotel-x/reference/objects/hotelxdefaultsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxdefaultsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsData {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsData</title>
      <link>/travelgatex/reference/objects/hotelxdefaultsettingsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxdefaultsettingsdata/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsData {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsDataInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxdefaultsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxdefaultsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsDataInput {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXDefaultSettingsDataInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/</guid>
      <description>GraphQL schema definition type HotelXDefaultSettingsDataInput {  clientName: ID!    context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>HotelXDestinationListInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxdestinationlistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxdestinationlistinput/</guid>
      <description>GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page</description>
    </item>
    
    <item>
      <title>HotelXDestinationListInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdestinationlistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdestinationlistinput/</guid>
      <description>GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page</description>
    </item>
    
    <item>
      <title>HotelXDestinationSearcherInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxdestinationsearcherinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxdestinationsearcherinput/</guid>
      <description>GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type</description>
    </item>
    
    <item>
      <title>HotelXDestinationSearcherInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/</guid>
      <description>GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type</description>
    </item>
    
    <item>
      <title>HotelXFilterInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxfilterinput/</guid>
      <description>GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded</description>
    </item>
    
    <item>
      <title>HotelXFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfilterinput/</guid>
      <description>GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded</description>
    </item>
    
    <item>
      <title>HotelXFilterPluginTypeInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxfilterplugintypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxfilterplugintypeinput/</guid>
      <description>GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!</description>
    </item>
    
    <item>
      <title>HotelXFilterPluginTypeInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/</guid>
      <description>GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!</description>
    </item>
    
    <item>
      <title>HotelXFilterSearchInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxfiltersearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxfiltersearchinput/</guid>
      <description>GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.</description>
    </item>
    
    <item>
      <title>HotelXFilterSearchInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxfiltersearchinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxfiltersearchinput/</guid>
      <description>GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.</description>
    </item>
    
    <item>
      <title>HotelXHotelFilterInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxhotelfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxhotelfilterinput/</guid>
      <description>By default: Logical AND on all given filters.
GraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXHotelFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxhotelfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxhotelfilterinput/</guid>
      <description>By default: Logical AND on all given filters.
GraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>HotelXHotelListInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxhotellistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxhotellistinput/</guid>
      <description>GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelXHotelListInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxhotellistinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxhotellistinput/</guid>
      <description>GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/travelgatex/reference/objects/hotelxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxmutation/</guid>
      <description>GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!</description>
    </item>
    
    <item>
      <title>HotelXParameter</title>
      <link>/hotel-x/reference/objects/hotelxparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxparameter/</guid>
      <description>GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!):   value(String!):</description>
    </item>
    
    <item>
      <title>HotelXParameter</title>
      <link>/travelgatex/reference/objects/hotelxparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxparameter/</guid>
      <description>GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!):   value(String!):</description>
    </item>
    
    <item>
      <title>HotelXPluginFilterInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxpluginfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxpluginfilterinput/</guid>
      <description>GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude  
Required by HotelXFilterSearchInput:    HotelXFilterInput:</description>
    </item>
    
    <item>
      <title>HotelXPluginFilterInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxpluginfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxpluginfilterinput/</guid>
      <description>GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude  
Required by HotelXFilterSearchInput:    HotelXFilterInput:</description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/hotel-x/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/schema/query/</guid>
      <description>GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!</description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/travelgatex/reference/objects/hotelxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxquery/</guid>
      <description>GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!</description>
    </item>
    
    <item>
      <title>HotelXRoomQueryInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxroomqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxroomqueryinput/</guid>
      <description>GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.</description>
    </item>
    
    <item>
      <title>HotelXRoomQueryInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxroomqueryinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxroomqueryinput/</guid>
      <description>GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.</description>
    </item>
    
    <item>
      <title>HotelXSupplierInput</title>
      <link>/hotel-x/reference/inputobjects/hotelxsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/hotelxsupplierinput/</guid>
      <description>Supplier object. Contains its own settings, code and access.
GraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier.</description>
    </item>
    
    <item>
      <title>HotelXSupplierInput</title>
      <link>/travelgatex/reference/inputobjects/hotelxsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/hotelxsupplierinput/</guid>
      <description>Supplier object. Contains its own settings, code and access.
GraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier.</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatus</title>
      <link>/hotel-x/reference/objects/hotelxupdatestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxupdatestatus/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatus</title>
      <link>/travelgatex/reference/objects/hotelxupdatestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxupdatestatus/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatusData</title>
      <link>/hotel-x/reference/objects/hotelxupdatestatusdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/hotelxupdatestatusdata/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):   
Required by HotelXUpdateStatus:</description>
    </item>
    
    <item>
      <title>HotelXUpdateStatusData</title>
      <link>/travelgatex/reference/objects/hotelxupdatestatusdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxupdatestatusdata/</guid>
      <description>GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):   
Required by HotelXUpdateStatus:</description>
    </item>
    
    <item>
      <title>HubStatus</title>
      <link>/alerts-x/reference/enums/hubstatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/hubstatus/</guid>
      <description>GraphQL schema definition  enum HubStatus{   OK,    EXCEPTION,    TIMEOUT,    UNDEFINED,   }   Required by HubStatusInput:</description>
    </item>
    
    <item>
      <title>HubStatusInput</title>
      <link>/alerts-x/reference/inputobjects/hubstatusinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/hubstatusinput/</guid>
      <description>GraphQL schema definition type HubStatusInput {  code: HubStatus!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(HubStatus!):   isInclusive(Boolean!):</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/alerts-x/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by Alert:   Alert node  AlertData:    AdviseMessage:    Node:    Member:    MemberData:    Group:    GroupData:    GroupCommonData:    API:    APIData:    Resource:    ResourceData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Role:    RoleData:    Access:    AccessData:    Supplier:    Parameter:    Organization:    SupplierData:    Provider:    AccessFilter:    ClientFilter:    OrganizationData:    Domain:    Product:    ProductData:    DomainData:    Client:    ClientData:    SupplierFilter:    Event:  Event triggered  EventData:  Event data  AlertInput:  Alert information.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/hotel-x/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by HotelXBoardQueryInput:    HotelXCategoryQueryInput:    HotelXHotelListInput:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/logging/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by Stats:  The service used to access the stats of every connection that uses the HUB  AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/mappea/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by MappeaMapSupplierInput:  # MapSupplier  MappeaSupplierConfirmedInput:    SupplierDetected:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  SupplierData:    Node:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/paymentx/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/stats/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by Stats:  The service used to access the stats of every connection that uses the HUB  AdviseMessage:  List of advise messages.</description>
    </item>
    
    <item>
      <title>ID</title>
      <link>/travelgatex/reference/scalars/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/id/</guid>
      <description>The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as &amp;quot;4&amp;quot;) or integer (such as 4) input value will be accepted as an ID.
GraphQL schema definition scalar ID   Required by AccessFilter:    SupplierFilter:    ClientFilter:    ServiceApi:  Information related to a Service API  PointOfSaleFilter:    ProfileFilter:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.</description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/alerts-x/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/int/</guid>
      <description>The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by RelayInput:    AlertConnection:  Alert list  AlertConfiguration:    EventConnection:  Events list  AlertTypeConfiguration:  Depending on the talert type, typeConfiguration will use some fields   GroupData:    AccessData:    SupplierData:    SupplierFilter:    AlertConfigurationInputNoTraffic:  Configuration for NO_TRAFFIC alert type.</description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/hotel-x/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/int/</guid>
      <description>The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.</description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/logging/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by Ratios:  Ratios details  OperationDetailed:  Stats information per operation  SupplierData:    GroupData:    StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/mappea/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by File:    GetMappeaStatsData:    MappeaConfirmUploadInput:  ## ConfirmUpload  MappeaMapSupplierInput:  # MapSupplier  UploadFileData:    SupplierDetected:    SupplierData:    GroupData:     </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/paymentx/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by PaymentXExpireDate:  The card expiration date  GroupData:    SupplierData:    ExpireDateInput:  The card expiration date   </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/stats/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/int/</guid>
      <description> The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by Ratios:  Ratios details  OperationDetailed:  Stats information per operation  SupplierData:    GroupData:    StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>Int</title>
      <link>/travelgatex/reference/scalars/int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/int/</guid>
      <description>The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
GraphQL schema definition scalar Int   Required by SupplierFilter:    SupplierData:    GroupData:    ServiceOperation:  Information related to an API operation  RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>/legacy/docs/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/intro/</guid>
      <description>XML Travelgate Introduction XML Travelgate&amp;rsquo;s API allows clients to access content from XML Travelgate&amp;rsquo;s inventory of partners. Currently there are more than 600 suppliers including switching platforms, bedbanks, direct hotel chains, rent a car, ferries, rail, flights and activities companies connected to our system. Use this API to query, check for availability and book fares. It can be accessed by any third-party system such as tour-operator systems, B2C and B2B web applications or third-party applications.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>/hotel-x/reference/scalars/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/json/</guid>
      <description> The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: &amp;ldquo;{\&amp;ldquo;int\&amp;rdquo;: 1, \&amp;ldquo;string\&amp;rdquo;: \&amp;ldquo;value\&amp;ldquo;}&amp;rdquo;.
GraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   </description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>/travelgatex/reference/scalars/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/json/</guid>
      <description> The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: &amp;ldquo;{\&amp;ldquo;int\&amp;rdquo;: 1, \&amp;ldquo;string\&amp;rdquo;: \&amp;ldquo;value\&amp;ldquo;}&amp;rdquo;.
GraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   </description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>/travelgatex/reference/scalars/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/jwt/</guid>
      <description> JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.
GraphQL schema definition scalar JWT   Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>Language</title>
      <link>/hotel-x/reference/scalars/language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/language/</guid>
      <description>The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes &amp;ldquo;en&amp;rdquo;.
GraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>Language</title>
      <link>/travelgatex/reference/scalars/language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/language/</guid>
      <description>The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes &amp;ldquo;en&amp;rdquo;.
GraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.</description>
    </item>
    
    <item>
      <title>List of credit cards</title>
      <link>/hotel-x/concepts/creditcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/creditcard/</guid>
      <description> In this chapter we will list all suppoted credit cards in HotelX.
Credit Cards list    Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP universal air travel card   OP optima   ER Air Canada/RnRoute   XS access   O others    </description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/hotel-x/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/location/</guid>
      <description>Indicates the location of the hotel
GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/travelgatex/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/location/</guid>
      <description>Indicates the location of the hotel
GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/alerts-x/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/logging/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/mappea/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/paymentx/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/stats/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroup</title>
      <link>/travelgatex/reference/objects/managedgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroup/</guid>
      <description>GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/alerts-x/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/logging/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/mappea/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/paymentx/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/stats/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupConnection</title>
      <link>/travelgatex/reference/objects/managedgroupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupconnection/</guid>
      <description>GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   
Required by GroupData:</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/alerts-x/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/logging/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/mappea/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/paymentx/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/stats/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupData</title>
      <link>/travelgatex/reference/objects/managedgroupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupdata/</guid>
      <description>GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/alerts-x/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/logging/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/mappea/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/paymentx/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/stats/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>ManagedGroupEdge</title>
      <link>/travelgatex/reference/objects/managedgroupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/managedgroupedge/</guid>
      <description>GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   
Required by ManagedGroupConnection:</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/hotel-x/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/map/</guid>
      <description>Map codes.
GraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/travelgatex/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/map/</guid>
      <description>Map codes.
GraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.</description>
    </item>
    
    <item>
      <title>MappeaConfirmUploadInput</title>
      <link>/mappea/reference/inputobjects/mappeaconfirmuploadinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeaconfirmuploadinput/</guid>
      <description>ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):</description>
    </item>
    
    <item>
      <title>MappeaConfirmUploadInput</title>
      <link>/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/</guid>
      <description>ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):</description>
    </item>
    
    <item>
      <title>MappeaGetMappeaStatsInput</title>
      <link>/mappea/reference/inputobjects/mappeagetmappeastatsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeagetmappeastatsinput/</guid>
      <description>GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):</description>
    </item>
    
    <item>
      <title>MappeaGetMappeaStatsInput</title>
      <link>/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/</guid>
      <description>GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):</description>
    </item>
    
    <item>
      <title>MappeaMapSupplierInput</title>
      <link>/mappea/reference/inputobjects/mappeamapsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeamapsupplierinput/</guid>
      <description>MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):</description>
    </item>
    
    <item>
      <title>MappeaMapSupplierInput</title>
      <link>/travelgatex/reference/inputobjects/mappeamapsupplierinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeamapsupplierinput/</guid>
      <description>MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):</description>
    </item>
    
    <item>
      <title>MappeaMutation</title>
      <link>/travelgatex/reference/objects/mappeamutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeamutation/</guid>
      <description>GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!</description>
    </item>
    
    <item>
      <title>MappeaQuery</title>
      <link>/mappea/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/schema/query/</guid>
      <description>GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):</description>
    </item>
    
    <item>
      <title>MappeaQuery</title>
      <link>/travelgatex/reference/objects/mappeaquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeaquery/</guid>
      <description>GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):   
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>MappeaSupplierConfirmedInput</title>
      <link>/mappea/reference/inputobjects/mappeasupplierconfirmedinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeasupplierconfirmedinput/</guid>
      <description>GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):</description>
    </item>
    
    <item>
      <title>MappeaSupplierConfirmedInput</title>
      <link>/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/</guid>
      <description>GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):</description>
    </item>
    
    <item>
      <title>MappeaUploadFileInput</title>
      <link>/mappea/reference/inputobjects/mappeauploadfileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/inputobjects/mappeauploadfileinput/</guid>
      <description>UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!</description>
    </item>
    
    <item>
      <title>MappeaUploadFileInput</title>
      <link>/travelgatex/reference/inputobjects/mappeauploadfileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/mappeauploadfileinput/</guid>
      <description>UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/hotel-x/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/travelgatex/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/hotel-x/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/travelgatex/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/hotel-x/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/travelgatex/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/hotel-x/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/travelgatex/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>MarkupRuleType</title>
      <link>/hotel-x/reference/enums/markupruletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/markupruletype/</guid>
      <description>Indicates what type of value is the markup, by percentage or is an import.
GraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:</description>
    </item>
    
    <item>
      <title>MarkupRuleType</title>
      <link>/travelgatex/reference/enums/markupruletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/markupruletype/</guid>
      <description>Indicates what type of value is the markup, by percentage or is an import.
GraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/hotel-x/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/travelgatex/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/alerts-x/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/member/</guid>
      <description>GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/logging/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/mappea/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/paymentx/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/stats/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/travelgatex/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/alerts-x/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/logging/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/mappea/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/paymentx/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/stats/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/travelgatex/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/alerts-x/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/logging/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/mappea/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/paymentx/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/stats/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/travelgatex/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/alerts-x/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/logging/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/mappea/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/paymentx/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/stats/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/travelgatex/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Member):   cursor(String!):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/alerts-x/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/logging/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/mappea/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/paymentx/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/stats/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:</description>
    </item>
    
    <item>
      <title>MemberType</title>
      <link>/travelgatex/reference/enums/membertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/membertype/</guid>
      <description>GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    CreateMemberInput:</description>
    </item>
    
    <item>
      <title>MetadataType</title>
      <link>/hotel-x/reference/enums/metadatatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/metadatatype/</guid>
      <description>Indicates value type of current paramter
GraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier</description>
    </item>
    
    <item>
      <title>MetadataType</title>
      <link>/travelgatex/reference/enums/metadatatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/metadatatype/</guid>
      <description>Indicates value type of current paramter
GraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier</description>
    </item>
    
    <item>
      <title>Method</title>
      <link>/travelgatex/reference/enums/method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/method/</guid>
      <description>GraphQL schema definition  enum Method{   ADD,    DEL,   }   Required by UpdateMemberInput:</description>
    </item>
    
    <item>
      <title>ModeType</title>
      <link>/logging/reference/enums/modetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/modetype/</guid>
      <description>Mode to select which kind of stats do you want query
GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)</description>
    </item>
    
    <item>
      <title>ModeType</title>
      <link>/stats/reference/enums/modetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/modetype/</guid>
      <description>Mode to select which kind of stats do you want query
GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)</description>
    </item>
    
    <item>
      <title>ModeType</title>
      <link>/travelgatex/reference/enums/modetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/modetype/</guid>
      <description>Mode to select which kind of stats do you want query
GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/alerts-x/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/hotel-x/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/logging/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/mappea/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/paymentx/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/stats/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/travelgatex/reference/interfaces/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/node/</guid>
      <description>GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/hotel-x/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/occupancy/</guid>
      <description>Information about occupancy.
GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.</description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/travelgatex/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/occupancy/</guid>
      <description>Information about occupancy.
GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.</description>
    </item>
    
    <item>
      <title>OnlyStatusResponse</title>
      <link>/mappea/reference/objects/onlystatusresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/onlystatusresponse/</guid>
      <description>Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>OnlyStatusResponse</title>
      <link>/travelgatex/reference/objects/onlystatusresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/onlystatusresponse/</guid>
      <description>Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/alerts-x/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/logging/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/mappea/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/paymentx/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/stats/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/travelgatex/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/alerts-x/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by APIData:</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/logging/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by APIData:</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/mappea/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by APIData:</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/paymentx/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by APIData:</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/stats/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by APIData:</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/travelgatex/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  APIData:</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/alerts-x/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/logging/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/mappea/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/paymentx/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/stats/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/travelgatex/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/logging/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/stats/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/travelgatex/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/alerts-x/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/logging/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/mappea/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/paymentx/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/stats/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/travelgatex/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/alerts-x/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/logging/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/mappea/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/paymentx/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/stats/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>OperationType</title>
      <link>/travelgatex/reference/enums/operationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/operationtype/</guid>
      <description> GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/alerts-x/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/organization/</guid>
      <description>GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/logging/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/mappea/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/paymentx/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/stats/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/travelgatex/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>OrganizationConnection</title>
      <link>/travelgatex/reference/objects/organizationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationconnection/</guid>
      <description>GraphQL schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/alerts-x/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/logging/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/mappea/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/paymentx/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/stats/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/travelgatex/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationEdge</title>
      <link>/travelgatex/reference/objects/organizationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationedge/</guid>
      <description>GraphQL schema definition type OrganizationEdge {  node: Organization    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Organization):   cursor(String!):   
Required by OrganizationConnection:</description>
    </item>
    
    <item>
      <title>OrganizationTemplate</title>
      <link>/travelgatex/reference/enums/organizationtemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/organizationtemplate/</guid>
      <description>GraphQL schema definition  enum OrganizationTemplate{   ORGANIZATION_DEFAULT,   }   Required by CreateOrganizationInput:</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/alerts-x/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/overview/</guid>
      <description>In order to analyze useful metrics about performance, Alerts-X extracts, loads and stores data from all TravelgateX products.
Once the metrics are stored in our infrastructure, our service-alerts analyze your performance according to a configuration alert which can be created/updated or viewed using API alertsWorking with Alerts-X The most important use case working with Alerts is to query about your performance.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/channel-x/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/channel-x/overview/</guid>
      <description>This tool extracts the product loaded at InventoryX and sends it to a third partner, normally an OTA. These clients will have the option of loading all the product in their system by selecting the Full Copy tab in InventoryX&amp;rsquo;s extranet, having the possibility to only select the hotels they are interested in copying. Also, each update the provider will be notified to the client in a smaller product request, as they will only receive information that has changed.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/getting-started/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/overview/</guid>
      <description>TravelgateX provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface).
Completely rebuilt in GraphQL from our many years of experience with travel XML integrations, we are offering state of the art, cutting edge API technology that is quick to learn and makes integration simple and fast.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/hotel-x/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/overview/</guid>
      <description>The HotelX API is a powerful accomodation aggregation solution that will speed up your travel websites and apps and expand your catalogue of hotel booking services.
Using HotelX, you can improve your hotel search response times and their accuracy by customizing aggregated responses based on your preferred criteria.
The below map shows our architecture and the average impact on response rates caused by each layer.
  Each and every layer described in the this figure is explained as follows:</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/hotel-x/plugins/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/overview/</guid>
      <description>Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific functionalities. Any Partner can develop custom Plugins, nevertheless HotelX, HotelX has developed many Plugins available for anyone to use out of the box.
Flows HotelX query or mutation determine what flow is executed. Plugins can be executed in different Queries or Mutations:
 Search Quote Book Cancel  Steps Step is the minium container where plugins are executed sequentially.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/insights-x/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/overview/</guid>
      <description>In order to analyze and produce useful insights, Insights-X extracts, loads and consolidates data from products like Hotel-X.
Once the data is consolidated in our Data warehouse, we can share data depending on each partner&amp;rsquo;s relationship with TravelgateX:
 Partners: e.g. OTAs and Wholesalers already connected to our platform, they will have access to accurate data regarding their performance, ratios, prices, product usage&amp;hellip; With these insights an accurate benchmarking against competitors is provided so that our partners can gain a competitive advantage.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/logging/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/overview/</guid>
      <description>In order to analyze useful metrics about performance, Logging extracts, loads and stores data from all TravelgateX products.
Once the metrics are stored in our infrastructure, you can query and analyze your performance using API Logging query or TravelgateX Logging Web
  Working with Logging The most important use case working with Logging is to query about your performance.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/mappea/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/overview/</guid>
      <description>{{ % wip % }}</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/stats/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/overview/</guid>
      <description>In order to analyze useful metrics about performance, Stats extracts, loads and stores data from all TravelgateX products.
Once the metrics are stored in our infrastructure, you can query and analyze your performance using API stats query or TravelgateX Stats Web
  Working with Stats The most important use case working with Stats is to query about your performance.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/travelgatex/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/overview/</guid>
      <description>This page provides an overview of the TravelgateX platform.
GraphQL Gateway TravelgateX is the travel API completely based in GraphQL. Unlike many legacy XML Soap APIs, GraphQL enables each client to ask for and receive exactly the data that is needed. Learn more by reading our Learning GraphQL guides.
Our Gateway is the only endpoint to access all of our APIs. It is written in NodeJS. This makes it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/travelgatex/security/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/security/overview/</guid>
      <description>This page describes the how security is implemented in TravelgateX platform.
Introduction TravelgateX offers a fine-grained access control and visibility for centrally managing Resources, which are granted to Partners belonging to Organizations.
Authentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it&amp;rsquo;s an API Key or a JSON Web Token (JWT).</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/alerts-x/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/hotel-x/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/logging/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/mappea/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/paymentx/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/stats/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/travelgatex/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/alerts-x/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/parameter/</guid>
      <description>GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!):   value(String!):   
Required by AccessData:</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/logging/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/mappea/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/paymentx/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/stats/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/travelgatex/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!</description>
    </item>
    
    <item>
      <title>ParameterInput</title>
      <link>/hotel-x/reference/inputobjects/parameterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/parameterinput/</guid>
      <description>Parameters Input.
GraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.</description>
    </item>
    
    <item>
      <title>ParameterInput</title>
      <link>/travelgatex/reference/inputobjects/parameterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/parameterinput/</guid>
      <description>Parameters Input.
GraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.</description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/hotel-x/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/pax/</guid>
      <description>Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.</description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/travelgatex/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pax/</guid>
      <description>Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.</description>
    </item>
    
    <item>
      <title>PaxInput</title>
      <link>/hotel-x/reference/inputobjects/paxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/paxinput/</guid>
      <description>Pax object that contains the pax age.
GraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Pax age.</description>
    </item>
    
    <item>
      <title>PaxInput</title>
      <link>/travelgatex/reference/inputobjects/paxinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paxinput/</guid>
      <description>Pax object that contains the pax age.
GraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields age(Int!): Pax age.</description>
    </item>
    
    <item>
      <title>PaymentCardInput</title>
      <link>/hotel-x/reference/inputobjects/paymentcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/paymentcardinput/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentCardInput</title>
      <link>/travelgatex/reference/inputobjects/paymentcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentcardinput/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentType</title>
      <link>/hotel-x/reference/enums/paymenttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/paymenttype/</guid>
      <description>Options payment type
GraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description</description>
    </item>
    
    <item>
      <title>PaymentType</title>
      <link>/travelgatex/reference/enums/paymenttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/paymenttype/</guid>
      <description>Options payment type
GraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description</description>
    </item>
    
    <item>
      <title>PaymentXExpireDate</title>
      <link>/paymentx/reference/objects/paymentxexpiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxexpiredate/</guid>
      <description>The card expiration date
GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentXStoredCardData:</description>
    </item>
    
    <item>
      <title>PaymentXExpireDate</title>
      <link>/travelgatex/reference/objects/paymentxexpiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxexpiredate/</guid>
      <description>The card expiration date
GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentXStoredCardData:</description>
    </item>
    
    <item>
      <title>PaymentXMutation</title>
      <link>/travelgatex/reference/objects/paymentxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxmutation/</guid>
      <description>GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card  
Required by Mutation:  The root query for implementing GraphQL mutations.</description>
    </item>
    
    <item>
      <title>PaymentXQuery</title>
      <link>/paymentx/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/schema/query/</guid>
      <description>GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!</description>
    </item>
    
    <item>
      <title>PaymentXQuery</title>
      <link>/travelgatex/reference/objects/paymentxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxquery/</guid>
      <description>GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCard</title>
      <link>/paymentx/reference/objects/paymentxstoredcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcard/</guid>
      <description>GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCard</title>
      <link>/travelgatex/reference/objects/paymentxstoredcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcard/</guid>
      <description>GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardConnection</title>
      <link>/paymentx/reference/objects/paymentxstoredcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcardconnection/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):   
Required by PaymentXQuery:</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardConnection</title>
      <link>/travelgatex/reference/objects/paymentxstoredcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcardconnection/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):   
Required by PaymentXQuery:</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardData</title>
      <link>/paymentx/reference/objects/paymentxstoredcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcarddata/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardData</title>
      <link>/travelgatex/reference/objects/paymentxstoredcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcarddata/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardEdge</title>
      <link>/paymentx/reference/objects/paymentxstoredcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxstoredcardedge/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):   
Required by PaymentXStoredCardConnection:</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardEdge</title>
      <link>/travelgatex/reference/objects/paymentxstoredcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxstoredcardedge/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):   
Required by PaymentXStoredCardConnection:</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardFilterInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardFilterInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardIDInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardidinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardidinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardIDInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardidinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardidinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardInput</title>
      <link>/paymentx/reference/inputobjects/paymentxstoredcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/inputobjects/paymentxstoredcardinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXStoredCardInput</title>
      <link>/travelgatex/reference/inputobjects/paymentxstoredcardinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/paymentxstoredcardinput/</guid>
      <description>GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PluginStepInput</title>
      <link>/hotel-x/reference/inputobjects/pluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/pluginstepinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.</description>
    </item>
    
    <item>
      <title>PluginStepInput</title>
      <link>/travelgatex/reference/inputobjects/pluginstepinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pluginstepinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.</description>
    </item>
    
    <item>
      <title>PluginStepType</title>
      <link>/hotel-x/reference/enums/pluginsteptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/pluginsteptype/</guid>
      <description>Plugin Step Type. https://docs.travelgatex.com/hotel-x/plugins/overview/
GraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:</description>
    </item>
    
    <item>
      <title>PluginStepType</title>
      <link>/travelgatex/reference/enums/pluginsteptype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/pluginsteptype/</guid>
      <description>Plugin Step Type. https://docs.travelgatex.com/hotel-x/plugins/overview/
GraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:</description>
    </item>
    
    <item>
      <title>PluginType</title>
      <link>/hotel-x/reference/enums/plugintype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/plugintype/</guid>
      <description>Plugin Type. https://docs.travelgatex.com/hotel-x/plugins/overview/
GraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:</description>
    </item>
    
    <item>
      <title>PluginType</title>
      <link>/travelgatex/reference/enums/plugintype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/plugintype/</guid>
      <description>Plugin Type. https://docs.travelgatex.com/hotel-x/plugins/overview/
GraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:</description>
    </item>
    
    <item>
      <title>PluginsInput</title>
      <link>/hotel-x/reference/inputobjects/pluginsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/pluginsinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!</description>
    </item>
    
    <item>
      <title>PluginsInput</title>
      <link>/travelgatex/reference/inputobjects/pluginsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pluginsinput/</guid>
      <description>Plugin to execute.
GraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/paymentx/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/travelgatex/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PointOfSaleConnection</title>
      <link>/travelgatex/reference/objects/pointofsaleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleconnection/</guid>
      <description>GraphQL schema definition type PointOfSaleConnection {  edges: [PointOfSaleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([PointOfSaleEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/paymentx/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsaledata/</guid>
      <description>GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner  
Required by PointOfSale:</description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/travelgatex/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaledata/</guid>
      <description>GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner  
Required by PointOfSale:</description>
    </item>
    
    <item>
      <title>PointOfSaleEdge</title>
      <link>/travelgatex/reference/objects/pointofsaleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleedge/</guid>
      <description>GraphQL schema definition type PointOfSaleEdge {  node: PointOfSale    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(PointOfSale):   cursor(String!):   
Required by PointOfSaleConnection:</description>
    </item>
    
    <item>
      <title>PointOfSaleFilter</title>
      <link>/travelgatex/reference/inputobjects/pointofsalefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/pointofsalefilter/</guid>
      <description>GraphQL schema definition type PointOfSaleFilter {  code: [ID]    groupID: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code([ID]):   groupID([ID]):   owner([ID!]):</description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/hotel-x/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.
GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/travelgatex/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.
GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/hotel-x/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/travelgatex/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.</description>
    </item>
    
    <item>
      <title>Priceable</title>
      <link>/hotel-x/reference/interfaces/priceable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/interfaces/priceable/</guid>
      <description>GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!</description>
    </item>
    
    <item>
      <title>Priceable</title>
      <link>/travelgatex/reference/interfaces/priceable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/priceable/</guid>
      <description>GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/alerts-x/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/product/</guid>
      <description>GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/logging/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/mappea/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/paymentx/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/stats/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/travelgatex/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/alerts-x/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/logging/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/mappea/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/paymentx/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/stats/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/travelgatex/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/alerts-x/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/logging/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/mappea/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/paymentx/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/stats/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/travelgatex/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/alerts-x/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/logging/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/mappea/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/paymentx/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/stats/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/travelgatex/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Product):   cursor(String!):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>Profile</title>
      <link>/travelgatex/reference/objects/profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profile/</guid>
      <description>GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>ProfileConnection</title>
      <link>/travelgatex/reference/objects/profileconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileconnection/</guid>
      <description>GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>ProfileData</title>
      <link>/travelgatex/reference/objects/profiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profiledata/</guid>
      <description>Profile data
GraphQL schema definition type ProfileData {  code: ID!    label: String    type: ProfileType    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>ProfileEdge</title>
      <link>/travelgatex/reference/objects/profileedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileedge/</guid>
      <description>GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Profile):   cursor(String!):   
Required by ProfileConnection:</description>
    </item>
    
    <item>
      <title>ProfileFilter</title>
      <link>/travelgatex/reference/inputobjects/profilefilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/profilefilter/</guid>
      <description>GraphQL schema definition type ProfileFilter {  profileIDs: [ID]    groupIDs: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields profileIDs([ID]):   groupIDs([ID]):   owner([ID!]):</description>
    </item>
    
    <item>
      <title>ProfileType</title>
      <link>/travelgatex/reference/enums/profiletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/profiletype/</guid>
      <description>GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   Required by ProfileData:  Profile data  CreateProfileInput:    UpdateProfileInput:</description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/hotel-x/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.</description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/travelgatex/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/hotel-x/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/property/</guid>
      <description>Indicates Property type
GraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code  
Required by HotelData:  Hotel data</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/travelgatex/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/property/</guid>
      <description>Indicates Property type
GraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code  
Required by HotelData:  Hotel data</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/alerts-x/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/provider/</guid>
      <description>GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/logging/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/mappea/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/paymentx/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/stats/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/travelgatex/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   name(String!</description>
    </item>
    
    <item>
      <title>Query</title>
      <link>/travelgatex/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/schema/query/</guid>
      <description>The query root of TravelgateX&amp;rsquo;s GraphQL interface.
GraphQL schema definition type Query {  admin: AdminQuery    hotelX: HotelXQuery    mappea: MappeaQuery    paymentX: PaymentXQuery    stats: StatsQuery   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields admin(AdminQuery): The admin query root of TravelgateX&amp;#39;s for implementing GraphQL query.</description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>/getting-started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/quickstart/</guid>
      <description>Four steps to using our API If you&amp;rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below:
 STEP 1: Get to know our APIs. Read through our documentation and test some sample calls in our API Playground. You can use a test API key and start experimenting with our APIs straight away.</description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/hotel-x/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the rate code.</description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/travelgatex/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the rate code.</description>
    </item>
    
    <item>
      <title>RateRulesFilterInput</title>
      <link>/hotel-x/reference/inputobjects/raterulesfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/raterulesfilterinput/</guid>
      <description>If requested, only options with the specified rateRules will be returned
GraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!</description>
    </item>
    
    <item>
      <title>RateRulesFilterInput</title>
      <link>/travelgatex/reference/inputobjects/raterulesfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/raterulesfilterinput/</guid>
      <description>If requested, only options with the specified rateRules will be returned
GraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!</description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/alerts-x/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/raterulestype/</guid>
      <description> GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/hotel-x/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/logging/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/mappea/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/paymentx/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/stats/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>RateRulesType</title>
      <link>/travelgatex/reference/enums/raterulestype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/raterulestype/</guid>
      <description> Rate Rules
GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   </description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/logging/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!</description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/stats/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!</description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/travelgatex/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/hotel-x/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/reference/</guid>
      <description>Contains reference codes.
GraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking  
Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/travelgatex/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/reference/</guid>
      <description>Contains reference codes.
GraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking  
Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel</description>
    </item>
    
    <item>
      <title>RelayInput</title>
      <link>/alerts-x/reference/inputobjects/relayinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/relayinput/</guid>
      <description>GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):</description>
    </item>
    
    <item>
      <title>RelayInput</title>
      <link>/hotel-x/reference/inputobjects/relayinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/relayinput/</guid>
      <description>GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):</description>
    </item>
    
    <item>
      <title>RelayInput</title>
      <link>/travelgatex/reference/inputobjects/relayinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/relayinput/</guid>
      <description>GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):</description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/hotel-x/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.</description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/travelgatex/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/alerts-x/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/resource/</guid>
      <description>GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/logging/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/mappea/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/paymentx/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/stats/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/travelgatex/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/alerts-x/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by APIData:    RoleData:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/logging/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by RoleData:    APIData:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/mappea/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by RoleData:    APIData:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/paymentx/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by APIData:    RoleData:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/stats/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by RoleData:    APIData:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/travelgatex/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  APIData:    RoleData:</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/alerts-x/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/logging/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/mappea/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/paymentx/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/stats/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/travelgatex/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/alerts-x/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/logging/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/mappea/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/paymentx/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/stats/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/travelgatex/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>Response</title>
      <link>/hotel-x/reference/interfaces/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/interfaces/response/</guid>
      <description>GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.</description>
    </item>
    
    <item>
      <title>Response</title>
      <link>/travelgatex/reference/interfaces/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/interfaces/response/</guid>
      <description>GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/hotel-x/release-notes/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/release-notes/roadmap/</guid>
      <description>We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.
Here is the GitHub project with Public Roadmap of TravelgateX.
The Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/insights-x/release-notes/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/release-notes/roadmap/</guid>
      <description>We have created a GitHub Project where we will keep you updated with all the future modifications regarding this Project.
Here you will find the GitHub project with the Public Roadmap of TravelgateX.
The Project has a few columns that act as the status, whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the Insights-X, Documentation, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/travelgatex/release-notes/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/roadmap/</guid>
      <description>We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.
Here is the GitHub project with Public Roadmap of TravelgateX.
The Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/alerts-x/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/role/</guid>
      <description>GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/logging/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/mappea/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/paymentx/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/stats/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/travelgatex/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/alerts-x/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by MemberData:    GroupData:    ResourceData:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/logging/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by MemberData:    ResourceData:    GroupData:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/mappea/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by MemberData:    ResourceData:    GroupData:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/paymentx/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    MemberData:    ResourceData:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/stats/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by MemberData:    ResourceData:    GroupData:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/travelgatex/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  MemberData:    GroupData:    ResourceData:</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/alerts-x/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/logging/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/mappea/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/paymentx/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/stats/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/travelgatex/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/alerts-x/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/logging/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/mappea/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/paymentx/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/stats/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/travelgatex/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Role):   cursor(String!):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/alerts-x/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/logging/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/mappea/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/paymentx/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/stats/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>RoleType</title>
      <link>/travelgatex/reference/enums/roletype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/roletype/</guid>
      <description>GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:</description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/hotel-x/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/travelgatex/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/hotel-x/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomconnection/</guid>
      <description>RoomList definition
GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/travelgatex/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomconnection/</guid>
      <description>RoomList definition
GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/hotel-x/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/travelgatex/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/hotel-x/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/travelgatex/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!</description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/hotel-x/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomedge/</guid>
      <description>RoomList Edge definition
GraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):   
Required by RoomConnection:  RoomList definition</description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/travelgatex/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomedge/</guid>
      <description>RoomList Edge definition
GraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):   
Required by RoomConnection:  RoomList definition</description>
    </item>
    
    <item>
      <title>RoomInput</title>
      <link>/hotel-x/reference/inputobjects/roominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/roominput/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomInput</title>
      <link>/travelgatex/reference/inputobjects/roominput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/roominput/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/hotel-x/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  
Required by Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/travelgatex/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  
Required by Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/hotel-x/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/travelgatex/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/hotel-x/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/rule/</guid>
      <description>GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/travelgatex/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rule/</guid>
      <description>GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!</description>
    </item>
    
    <item>
      <title>ServiceApi</title>
      <link>/travelgatex/reference/objects/serviceapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceapi/</guid>
      <description>Information related to a Service API
GraphQL schema definition type ServiceApi {  code: ID!    name: String!    operations: [ServiceOperation]    error: [Error!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Service API ID  name(String!</description>
    </item>
    
    <item>
      <title>ServiceApiFilter</title>
      <link>/travelgatex/reference/inputobjects/serviceapifilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/serviceapifilter/</guid>
      <description>GraphQL schema definition type ServiceApiFilter {  ApiName: String    OperationName: String    OperationType: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields ApiName(String):   OperationName(String):   OperationType(String):</description>
    </item>
    
    <item>
      <title>ServiceApiType</title>
      <link>/logging/reference/enums/serviceapitype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/serviceapitype/</guid>
      <description> Services Api available.
GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   </description>
    </item>
    
    <item>
      <title>ServiceApiType</title>
      <link>/stats/reference/enums/serviceapitype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/serviceapitype/</guid>
      <description> Services Api available.
GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   </description>
    </item>
    
    <item>
      <title>ServiceApiType</title>
      <link>/travelgatex/reference/enums/serviceapitype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/serviceapitype/</guid>
      <description> Services Api available.
GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   </description>
    </item>
    
    <item>
      <title>ServiceOperation</title>
      <link>/travelgatex/reference/objects/serviceoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceoperation/</guid>
      <description>Information related to an API operation
GraphQL schema definition type ServiceOperation {  code: ID!    name: String!    type: String!    travelOperation: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Service Operation ID  name(String!</description>
    </item>
    
    <item>
      <title>ServiceOperationType</title>
      <link>/logging/reference/enums/serviceoperationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/serviceoperationtype/</guid>
      <description> GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>ServiceOperationType</title>
      <link>/stats/reference/enums/serviceoperationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/serviceoperationtype/</guid>
      <description> GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>ServiceOperationType</title>
      <link>/travelgatex/reference/enums/serviceoperationtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/serviceoperationtype/</guid>
      <description> GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   </description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/hotel-x/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/servicestatus/</guid>
      <description>Indicates the status of the service
GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description</description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/travelgatex/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/servicestatus/</guid>
      <description>Indicates the status of the service
GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>/hotel-x/concepts/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/settings/</guid>
      <description>On this page you will learn more about settings in HotelX.
What are settings? Settings are the common configuration that will be used in order to build the request to the supplier/s.
There are two kind of settings, overridable and partially overridable. You can find the partially overridable settings in the first level of settings and are known as HotelX_Settings. These settings are formed by some non-overridable settings such as &amp;ldquo;group&amp;rdquo; and &amp;ldquo;testMode&amp;rdquo;, some overridable global settings such as &amp;ldquo;timeout&amp;rdquo;, &amp;ldquo;auditTransactions&amp;rdquo;, etc.</description>
    </item>
    
    <item>
      <title>SettingsBaseInput</title>
      <link>/hotel-x/reference/inputobjects/settingsbaseinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/settingsbaseinput/</guid>
      <description>Contains the time out and business rules of a supplier or an access.
GraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.</description>
    </item>
    
    <item>
      <title>SettingsBaseInput</title>
      <link>/travelgatex/reference/inputobjects/settingsbaseinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/settingsbaseinput/</guid>
      <description>Contains the time out and business rules of a supplier or an access.
GraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/hotel-x/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/stat/</guid>
      <description>GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/travelgatex/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stat/</guid>
      <description>GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/hotel-x/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/stataccess/</guid>
      <description>GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/travelgatex/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stataccess/</guid>
      <description>GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/hotel-x/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/statplugin/</guid>
      <description>GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time  
Required by StatsRequest:  Contains internal information.  StatAccess:</description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/travelgatex/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statplugin/</guid>
      <description>GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time  
Required by StatsRequest:  Contains internal information.  StatAccess:</description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/hotel-x/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/stattransaction/</guid>
      <description>GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!</description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/travelgatex/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stattransaction/</guid>
      <description>GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/logging/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/stats/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/travelgatex/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsAsset</title>
      <link>/logging/reference/objects/statsasset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/statsasset/</guid>
      <description>Asset of an specific error
GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!</description>
    </item>
    
    <item>
      <title>StatsAsset</title>
      <link>/stats/reference/objects/statsasset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsasset/</guid>
      <description>Asset of an specific error
GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!</description>
    </item>
    
    <item>
      <title>StatsAsset</title>
      <link>/travelgatex/reference/objects/statsasset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsasset/</guid>
      <description>Asset of an specific error
GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!</description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/logging/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/statsconnection/</guid>
      <description>GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   
Required by StatsQuery:</description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/stats/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsconnection/</guid>
      <description>GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   
Required by StatsQuery:</description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/travelgatex/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsconnection/</guid>
      <description>GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   
Required by StatsQuery:</description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/logging/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(Access!</description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/stats/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(Access!</description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/travelgatex/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields access(Access!</description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/logging/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/statsedge/</guid>
      <description>GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Stats):   cursor(String!):   
Required by StatsConnection:</description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/stats/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsedge/</guid>
      <description>GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Stats):   cursor(String!):   
Required by StatsConnection:</description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/travelgatex/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsedge/</guid>
      <description>GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Stats):   cursor(String!):   
Required by StatsConnection:</description>
    </item>
    
    <item>
      <title>StatsFilterInput</title>
      <link>/logging/reference/inputobjects/statsfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/inputobjects/statsfilterinput/</guid>
      <description>Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)
GraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!</description>
    </item>
    
    <item>
      <title>StatsFilterInput</title>
      <link>/stats/reference/inputobjects/statsfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/inputobjects/statsfilterinput/</guid>
      <description>Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)
GraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!</description>
    </item>
    
    <item>
      <title>StatsFilterInput</title>
      <link>/travelgatex/reference/inputobjects/statsfilterinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/statsfilterinput/</guid>
      <description>Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)
GraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/logging/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/stats/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/travelgatex/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>StatsInfoTypes</title>
      <link>/logging/reference/enums/statsinfotypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/enums/statsinfotypes/</guid>
      <description>GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error</description>
    </item>
    
    <item>
      <title>StatsInfoTypes</title>
      <link>/stats/reference/enums/statsinfotypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/enums/statsinfotypes/</guid>
      <description>GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error</description>
    </item>
    
    <item>
      <title>StatsInfoTypes</title>
      <link>/travelgatex/reference/enums/statsinfotypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/statsinfotypes/</guid>
      <description>GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error</description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/logging/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/schema/query/</guid>
      <description>GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/stats/reference/schema/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/schema/query/</guid>
      <description>GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/travelgatex/reference/objects/statsquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsquery/</guid>
      <description>GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/hotel-x/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/travelgatex/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>StatusType</title>
      <link>/hotel-x/reference/enums/statustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/statustype/</guid>
      <description>Indicartes options status
GraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)</description>
    </item>
    
    <item>
      <title>StatusType</title>
      <link>/travelgatex/reference/enums/statustype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/statustype/</guid>
      <description>Indicartes options status
GraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/alerts-x/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by RelayInput:    AlertEdge:    PageInfo:    AlertData:    AdviseMessage:    MemberData:    GroupEdge:    GroupData:    GroupCommonData:    MemberEdge:    APIEdge:    APIData:    ResourceEdge:    ResourceData:    OperationEdge:    OperationData:    ManagedGroupEdge:    RoleData:    AccessEdge:    AccessData:    Error:    Parameter:    SupplierData:    Provider:    OrganizationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    RoleEdge:    EventEdge:    EventData:  Event data  ExternalMessage:    AlertInput:  Alert information.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/hotel-x/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by ServiceStatus:  Indicates the status of the service  RelayInput:    HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  HotelXDestinationSearcherInput:    HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/logging/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/string/</guid>
      <description> The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:  List of advise messages.  AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  AccessEdge:    OrganizationData:    GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:     </description>
    </item>
    
    <item>
      <title>String</title>
      <link>/mappea/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by MappeaGetMappeaStatsInput:  # GetMappeaStats  Error:  Application errors  Warning:  Application warnings  File:    GetMappeaStatsData:    MappeaUploadFileInput:  ## UploadFile  UploadFileData:    SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  AccessEdge:    PageInfo:    AccessData:    Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/paymentx/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by AdviseMessage:  List of advise messages.  PaymentXStoredCardIDInput:    ExternalMessage:    HolderInput:  Holder object that contains the occupant&amp;#39;s (pax&amp;#39;s) name and surname.  PaymentXStoredCardEdge:    PageInfo:    PaymentXStoredCardData:    Holder:  Holder object that contains the occupant&amp;#39;s (pax&amp;#39;s) name and surname.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>/stats/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/string/</guid>
      <description> The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:  List of advise messages.  AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server&amp;#39;s lifetime  AccessEdge:    OrganizationData:    GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:     </description>
    </item>
    
    <item>
      <title>String</title>
      <link>/travelgatex/reference/scalars/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/string/</guid>
      <description>The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
GraphQL schema definition scalar String   Required by ServiceApiFilter:    ServiceApi:  Information related to a Service API  AccessEdge:    PageInfo:    AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier&amp;#39;s configuration.</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>/community/style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/community/style-guide/</guid>
      <description>This document provides guidance for contributors to the TravelgateX Platform Community site.
 Caveats Types of documentation Designing a doc Visual assets File organization in GitHub General content guidelines General style guidelines Markdown usage Voice and tone Including source code Writing resources  Caveats Let&amp;rsquo;s get these things out of the way right up front:
 Don&amp;rsquo;t sell or do marketing. -&amp;gt; TBD Don&amp;rsquo;t editorialize. Document. Assure that the content you&amp;rsquo;re writting is not duplicated on another page, avoid incosistences.</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/hotel-x/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/travelgatex/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplementType</title>
      <link>/hotel-x/reference/enums/supplementtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/supplementtype/</guid>
      <description>Supplement Type
GraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>SupplementType</title>
      <link>/travelgatex/reference/enums/supplementtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/supplementtype/</guid>
      <description>Supplement Type
GraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/alerts-x/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/supplier/</guid>
      <description>GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/logging/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/mappea/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/paymentx/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/stats/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/travelgatex/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/alerts-x/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    OrganizationData:    ClientData:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/logging/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/mappea/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/paymentx/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by GroupData:    GroupCommonData:    OrganizationData:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/stats/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/travelgatex/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/alerts-x/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/logging/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/mappea/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/paymentx/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/stats/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/travelgatex/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.</description>
    </item>
    
    <item>
      <title>SupplierDetected</title>
      <link>/mappea/reference/objects/supplierdetected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplierdetected/</guid>
      <description>GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):</description>
    </item>
    
    <item>
      <title>SupplierDetected</title>
      <link>/travelgatex/reference/objects/supplierdetected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdetected/</guid>
      <description>GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/alerts-x/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/logging/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/mappea/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/paymentx/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/stats/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/travelgatex/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierFilter</title>
      <link>/alerts-x/reference/inputobjects/supplierfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/inputobjects/supplierfilter/</guid>
      <description>GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!</description>
    </item>
    
    <item>
      <title>SupplierFilter</title>
      <link>/travelgatex/reference/inputobjects/supplierfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/supplierfilter/</guid>
      <description>GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/hotel-x/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/travelgatex/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.</description>
    </item>
    
    <item>
      <title>TagRuntimeType</title>
      <link>/hotel-x/reference/enums/tagruntimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/tagruntimetype/</guid>
      <description>Indicates xml tag used by the current parameter
GraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier</description>
    </item>
    
    <item>
      <title>TagRuntimeType</title>
      <link>/travelgatex/reference/enums/tagruntimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/tagruntimetype/</guid>
      <description>Indicates xml tag used by the current parameter
GraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>/travelgatex/reference/enums/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/template/</guid>
      <description>GraphQL schema definition  enum Template{   FOLDER_DEFAULT,   }   Required by CreateGroupInput:</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/hotel-x/reference/objects/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/text/</guid>
      <description>GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields text(String!):   language(Language!):</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/travelgatex/reference/objects/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/text/</guid>
      <description>GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields text(String!):   language(Language!):</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/hotel-x/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/timeout/</guid>
      <description>GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/travelgatex/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/timeout/</guid>
      <description>GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>TimeoutInput</title>
      <link>/hotel-x/reference/inputobjects/timeoutinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/timeoutinput/</guid>
      <description>GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>TimeoutInput</title>
      <link>/travelgatex/reference/inputobjects/timeoutinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/timeoutinput/</guid>
      <description>GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/hotel-x/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/travelgatex/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>Types of Datasets</title>
      <link>/insights-x/datasets/types-of-datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/types-of-datasets/</guid>
      <description>This page describes how Insights-X shares different Datasets with customers.
As a customer, you can access Insights-X data via BigQuery Dataset or as Exported Table Data to Cloud Storage
BigQuery BigQuery is a “big data” SQL store invented by Google. Many massive Datasets, like all the code in GitHub and the complete history of the Bitcoin blockchain, are made available to the public through the Google BigQuery Datasets initiative.</description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/alerts-x/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/scalars/uri/</guid>
      <description>GraphQL schema definition scalar URI   Required by Urls:</description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/hotel-x/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/logging/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/mappea/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/paymentx/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/stats/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>URI</title>
      <link>/travelgatex/reference/scalars/uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/scalars/uri/</guid>
      <description> The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: &amp;ldquo;http:\www.travelgatex.com&amp;rdquo;.
GraphQL schema definition scalar URI   Required by Urls:  Url&amp;#39;s  Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input  StatsAsset:  Asset of an specific error   </description>
    </item>
    
    <item>
      <title>UnitTimeType</title>
      <link>/hotel-x/reference/enums/unittimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/enums/unittimetype/</guid>
      <description>Unit Time Type
GraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>UnitTimeType</title>
      <link>/travelgatex/reference/enums/unittimetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/enums/unittimetype/</guid>
      <description>Unit Time Type
GraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>UpdateClientInput</title>
      <link>/travelgatex/reference/inputobjects/updateclientinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateclientinput/</guid>
      <description>GraphQL schema definition type UpdateClientInput {  code: ID!    name: String    isActive: Boolean    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(String): Client complete name  isActive(Boolean): Indicates whether a Client is active or inactive  owner(ID): Client owner</description>
    </item>
    
    <item>
      <title>UpdateEntitiesInput</title>
      <link>/travelgatex/reference/inputobjects/updateentitiesinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateentitiesinput/</guid>
      <description>GraphQL schema definition type UpdateEntitiesInput {  code: ID!    entities: EntitiesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!): Profile Code  entities(EntitiesInput): Entities to add/remove</description>
    </item>
    
    <item>
      <title>UpdateGroupInput</title>
      <link>/travelgatex/reference/inputobjects/updategroupinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updategroupinput/</guid>
      <description>GraphQL schema definition type UpdateGroupInput {  api: ID!    group: ID!    info: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields api(ID!):   group(ID!):   info(String):</description>
    </item>
    
    <item>
      <title>UpdateMemberInput</title>
      <link>/travelgatex/reference/inputobjects/updatememberinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updatememberinput/</guid>
      <description>GraphQL schema definition type UpdateMemberInput {  member: ID!    info: String    group: ID!    role: ID!    resources: [ID!]!    method: Method!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields member(ID!</description>
    </item>
    
    <item>
      <title>UpdateProfileInput</title>
      <link>/travelgatex/reference/inputobjects/updateprofileinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/updateprofileinput/</guid>
      <description>GraphQL schema definition type UpdateProfileInput {  code: ID!    label: String    type: ProfileType    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(ID!</description>
    </item>
    
    <item>
      <title>UploadFileData</title>
      <link>/mappea/reference/objects/uploadfiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/uploadfiledata/</guid>
      <description>GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):</description>
    </item>
    
    <item>
      <title>UploadFileData</title>
      <link>/travelgatex/reference/objects/uploadfiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfiledata/</guid>
      <description>GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):</description>
    </item>
    
    <item>
      <title>UploadFileResponse</title>
      <link>/mappea/reference/objects/uploadfileresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/uploadfileresponse/</guid>
      <description>GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>UploadFileResponse</title>
      <link>/travelgatex/reference/objects/uploadfileresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfileresponse/</guid>
      <description>GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>Uploading Strategies</title>
      <link>/travelgatex/data-automation/uploading-strategies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/data-automation/uploading-strategies/</guid>
      <description>How to upload data to the platform There are two ways of uploading data to the platform:
 Secure File Transfer Protocol (SFTP) GraphQL mutation  We recommend continuing to use SFTP at present while we build out more GraphQL resources.
While you can make your updates via a mutation, we have not yet written up resources to show you how to do that.
If you require these resources immediately, please contact us via Slack, Jira or by raising an issue in GitHub.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/alerts-x/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/objects/urls/</guid>
      <description>GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/logging/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/mappea/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/paymentx/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/stats/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/travelgatex/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>UrlsInput</title>
      <link>/hotel-x/reference/inputobjects/urlsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/inputobjects/urlsinput/</guid>
      <description>URLs Input
GraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>UrlsInput</title>
      <link>/travelgatex/reference/inputobjects/urlsinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/inputobjects/urlsinput/</guid>
      <description>URLs Input
GraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/hotel-x/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/objects/warning/</guid>
      <description>Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/mappea/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/objects/warning/</guid>
      <description>Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/travelgatex/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/warning/</guid>
      <description>Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description</description>
    </item>
    
    <item>
      <title>Writting release notes</title>
      <link>/community/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/community/release-notes/</guid>
      <description>This document assists on write release notes with the changelog of products.
 Release Notes Organization How to keep a good changelog  General Principles  What is a changelog? Why keep a changelog? Who needs a changelog?   How do I make a good changelog?  Guiding Principles Types of changes  How can I reduce the effort required to maintain a changelogs document? Can changelogs be bad?</description>
    </item>
    
    <item>
      <title>Access, Supplier and Context</title>
      <link>/hotel-x/concepts/accesses-supplier-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/accesses-supplier-context/</guid>
      <description>On this page you will learn more about Core Entities used in HotelX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.
Supplier Product segmentation over a Supplier API implementation. Each Supplier has a Supplier code. These are unique values and they are used consistently throughout all TravelgateX implementations. See our Supplier database, or ask us via our Jira Service desk for a list of Supplier codes.</description>
    </item>
    
    <item>
      <title>Activities Data Structure</title>
      <link>/legacy/docs/activities/data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/data-structure/</guid>
      <description>The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields.
The integration will have the following methods:
   Method Input Output Required Description     Search SearchRQ SearchRS Yes Gets destinations and events available   Territories TerritoriesRQ TerritoriesRS No List of Destinations   Avail AvailRQ AvailRS Yes Makes an availability call   Valuation ValuationRQ ValuationRS Yes Makes a valuation for refresh ticket price (pre-book)   Reservation ReservationRQ ReservationRS Yes Makes a booking   ReservationRead ReservationReadRQ ReservationReadRS No Information about one reservation   Cancel CancelRQ CancelRS No Cancel a reservation   ReservationsList ReservationsListRQ ReservationsListRS No List of Reservations    Each request sent to the service url requires a node called rqXML.</description>
    </item>
    
    <item>
      <title>AlertsXMutation</title>
      <link>/alerts-x/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type AlertsXMutation {  createAlert( input: AlertInput!, ): Alert    updateAlert( code: ID!, input: AlertUpdateInput!, ): Alert   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields createAlert(Alert): Mutation to create a new alert  updateAlert(Alert): Mutation to update an existing alert</description>
    </item>
    
    <item>
      <title>Blacklist</title>
      <link>/hotel-x/plugins/black-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/black-list/</guid>
      <description>The Blacklist plugin is used to ignore hotel code(s) when a Search query is executed. This means that all the hotels on the blacklist won&amp;rsquo;t be requested to the supplier. You can apply also rules in order to block an entire supplier. More details regarding configuration below.
Definitions  Client Token: Dynamic parameter you can send on the RQ in case you want to apply specific rules of the blacklist Client: The client of HotelX to make requests.</description>
    </item>
    
    <item>
      <title>Booking Flow</title>
      <link>/hotel-x/concepts/search-mode/booking-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/search-mode/booking-flow/</guid>
      <description>Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.
 --                                            1. SEARCH  2. QUOTE  3.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/alerts-x/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/release-notes/changelog/</guid>
      <description>Easily accessible log of notable changes to Alerts-X
2019-07-30  Save historicalWindow correctly.   2019-07-29  Check permissions of team groups.   2019-07-25  Allow to get alerts without groups criteria input.    Fixed an error to allow an alert create in an AlertsX group with no alert.   2019-07-10  After an alert configuration update their past events will be deleted.   2019-06-12  Fixed an error that was causing an unsuccessful alert create or update to set clients, suppliers and accesses to the alert for Travelgate Teams users.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/channel-x/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/channel-x/release-notes/changelog/</guid>
      <description> 2019-06-04  Deletion order when value is -1   </description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/hotel-x/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/release-notes/changelog/</guid>
      <description>Easily accessible log of notable changes to HotelX API All notable changes in our platform will be documented on this page. 2019-07-11  Deprecate type error in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add error filter in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add adviseMessage as new error type    Fix Level value in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category  
2019-07-02  New field in book, cancel and booking respone. booking/reference/hotel.    Client token in batch and booking flow.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/insights-x/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/release-notes/changelog/</guid>
      <description>Easily accessible log of notable changes to Insights-X
2019-06-19  Added new tables: insights_(daily|weekly|monthly)_destination_(buyer|seller), insights_agg_(daily|weekly|monthly)_destination_(buyer|seller) and insights_agg_(daily|weekly|monthly)_destination_tgx   2019-06-05  Added new fields in portfolio: zone_1, zone_2, city, username. Added new metrics in portfolio: search_ok,search_nok, quote_ok, quote_nok, booking_ok, booking_nok, cancel_ok, cancel_nok, revenue_net and revenue_unknown.    Added new fields in effective bookings: username, commision, adults, childen, infants.    Benchmark is available now for Performance. Added new table in benchmark: performance_daily_(buyer|seller).</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/logging/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/release-notes/changelog/</guid>
      <description>Easily accessible log of notable changes to Logging
2019-07-17  Added a new input object reference with two fields client and supplier from which bookings can be searched.   2019-07-11  Added a new field statusType in LoggingLegacyData to retrieve the final status of the transacction.    Added a new input field first in LoggingLegacyFilterInput to be able to change the size of the response. By default up to 100 results will be returned.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/stats/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/release-notes/changelog/</guid>
      <description>Easily accessible log of notable changes to Stats
2019-06-12  Fix an error that was causing to have empty operations in the response.   2019-06-03  New scalar type Int64 has been created. hits in StatsData, totalHits in OperationDetailed and hits in StatsInfo have changed its type to this new scalar.   2019-05-30  Now adviceMessage&amp;rsquo;s from others TravelgateX products are returned as external in owns adviceMessage&amp;rsquo;s.   2019-05-23  Now type of StatsInforeturns the correct value.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/travelgatex/release-notes/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/changelog/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.
All notable changes on TravelgateX platform will be documented in this page. 2019-06-03  GraphQL Schema updated.    stats gateway  
2019-05-30  GraphQL Schema updated.   2019-05-23  GraphQL Schema updated. Accesses, Clients and Suppliers querys chagend to the new entitiesx client    flow cascade permissions code field from accessData to match with query response    CatalogAdviseMessage to extern schema   2019-05-16  GraphQL Schema updated.</description>
    </item>
    
    <item>
      <title>Common Errors</title>
      <link>/hotel-x/faqs/common-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/faqs/common-errors/</guid>
      <description>Error 204 - No Results Found Error “204 No results found” is a common error that you can receive in the Search Query response. This error means that the product you are trying to obtain is not available.
There are several potential reasons as to why this error occurs:
 The product is not available for the dates in the request. The product is not available for the number of passengers selected in the request.</description>
    </item>
    
    <item>
      <title>Configure HotelX Security</title>
      <link>/travelgatex/tutorials/howto-configure-permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/tutorials/howto-configure-permissions/</guid>
      <description>Granting Permissions This topic describes how to configure permissions for a organization using HotelX and Stats.
Before you begin  Read IAM, which contains information about how TravelgateX manages security Read HotelX, which contains information about the HotelX API  Scenario: Organization buying suppliers through HotelX In this scenario, organanization org_test logs on to TravelgateX in order to use HotelX to buy product from suppliers.
Distribution will be made through 2 different channels, end users will use org_test_B2C_site whereas that org_test_B2B_site will be used for business users.</description>
    </item>
    
    <item>
      <title>Contents</title>
      <link>/insights-x/content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/content/</guid>
      <description>What is the performance of your infrastructure? What hotelier product is being requested and booking around the world? How are you doing with respect to your competitors?
Knowledge is power and that&amp;rsquo;s what the product Insights-X offers, based on more than 2 billion search requests and more than 20,000 bookings per day.
In order to answer the three previous questions, the product has been designed in three parts, which we explain below:</description>
    </item>
    
    <item>
      <title>FlightsX</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-flightsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-flightsx/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Getting Started with XML Travelgate -Legacy-</title>
      <link>/legacy/onboarding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/onboarding/</guid>
      <description>Getting Started with XML Travelgate Thank you for your interest in joining our fast growing network of partners. This guide is intended to introduce you to the process of integrating with our API. We&amp;rsquo;ll work with you to make sure the integration goes as smoothly as possible so don&amp;rsquo;t hesitate in asking questions as we&amp;rsquo;ve been through this many times before. We are always looking to improve and your questions will definitely help us do just that!</description>
    </item>
    
    <item>
      <title>GraphQL Overview</title>
      <link>/learning-graphql/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/overview/</guid>
      <description>What is GraphQL? GraphQL is a query language for your API. It was first designed by Facebook. It&amp;rsquo;s a new way of dealing with and managing data models via API, and is especially useful for decoupling client from server logic.
 GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/hotel-x/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!</description>
    </item>
    
    <item>
      <title>How to apply</title>
      <link>/hotel-x/howtos/certification_process/howtoapply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/certification_process/howtoapply/</guid>
      <description>Our Certification Process should be completed once you have finished the development.
Once Certification Process logs have been delivered through our Customer Care service desk, we will review it and advise you once the integration is certified.
 Within your WelcomePack email you should have received a user to access our customer care portal. Click on Certification Process option and upload or drag and drop your logs. You will be issued a WECARE ticket number.</description>
    </item>
    
    <item>
      <title>Identity and access management</title>
      <link>/travelgatex/security/identity-access-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/security/identity-access-management/</guid>
      <description>This section provides an overview of Identity and access management.
TravelgateX identity and acccess management lets administrators authorize who can take action on specific resources, giving you full control and internal visibility to manage resources centrally.
Identity and access management provides an unified view of your security policy across your entire organization, with built-in auditing to ease compliance processes.
As an administrator, when you register with us, we provide you with login details to access your TravelgateX account, including a username and password.</description>
    </item>
    
    <item>
      <title>MappeaMutation</title>
      <link>/mappea/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/hotel-x/plugins/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/mapping/</guid>
      <description>The map plugins are used to change the supplier codes to client codes or vice versa. There are four types:
 Hotel map  Board Map  Room Map  Rate Map   Our map formats share a common structure. In order to load your maps you just need to follow the instructions below:
Example files You can download example for the files structure here
Entity Maps File Format The file should be in the following format:</description>
    </item>
    
    <item>
      <title>Mutation</title>
      <link>/travelgatex/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/schema/mutation/</guid>
      <description>The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server
GraphQL schema definition type Mutation {  admin: AdminMutation    hotelX: HotelXMutation    mappea: MappeaMutation    paymentX: PaymentXMutation   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.</description>
    </item>
    
    <item>
      <title>PaymentXMutation</title>
      <link>/paymentx/reference/schema/mutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/schema/mutation/</guid>
      <description>GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0]; list.style.display = &#39;block&#39;; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card</description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>/hotel-x/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/quickstart/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/6972ecae51e849fe8c49305bf0032dfe\/raw\x22,\x22divname\x22:\x22div_authorization\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/alexjmoya\/b5dff8d1ec9c6f61dc0392a20558be67\/raw\x22,\x22divname\x22:\x22div_search\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/alexjmoya\/f6d343260df0e75ab636779c2e00db39\/raw\x22,\x22divname\x22:\x22div_quote\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/alexjmoya\/64dfb6604667ee86399b7857708830e9\/raw\x22,\x22divname\x22:\x22div_book\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/alexjmoya\/f2933df3054688d8a3551ca3cb16bf90\/raw\x22,\x22divname\x22:\x22div_cancel\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/alexjmoya\/78fcc6ec8ba6c7535d39f687aa0e714d\/raw\x22,\x22divname\x22:\x22div_bookinglist\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Quotas &amp; Limits</title>
      <link>/travelgatex/concepts/quotas-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/quotas-limits/</guid>
      <description>Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:
 Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself!</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/insights-x/datasets/dataset-content/benchmark/insights/dataset-reference-benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-content/benchmark/insights/dataset-reference-benchmark/</guid>
      <description>On this page you will learn how the data is stored in Benchmark Dataset.
Tables Data is stored in multiple tables depending on the kind of info that wants to be queried and depending on the level of aggregation:
 Daily (agregation stored every day) Weekly (aggregation stored in the first monday of every week) Monthly (aggregation stored in the first day of the month)  The fields and explanation of tables are based on seller organization.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/insights-x/datasets/dataset-content/benchmark/performance/dataset-reference-benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-content/benchmark/performance/dataset-reference-benchmark/</guid>
      <description>On this page you will learn how the data is stored in Benchmark Dataset.
Tables Descriptions of each table and their correspondent fields are found below:
performance_(daily|weekly|monthly)_(seller|buyer) This table contains the total of ok and nok searches, quotes, bookings and cancellation requests and responses times for the buyer|seller and for TravelgateX. The buyers|sellers that aren&amp;rsquo;t connected are aggregated in &amp;ldquo;others&amp;rdquo; for the seller case and &amp;ldquo;OTHERS&amp;rdquo; for the buyers case.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/insights-x/datasets/dataset-content/insights/dataset-reference-insights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-content/insights/dataset-reference-insights/</guid>
      <description>On this page you will learn how the data is stored in Insights Dataset.
Tables Data is stored in multiple tables depending on the kind of info that wants to be queried and depending on the level of aggregation:
 Daily (agregation stored every day) Weekly (aggregation stored in the first monday of every week) Monthly (aggregation stored in the first day of the month)  Descriptions of each table and their correspondent fields are found below:</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/insights-x/datasets/dataset-content/performance/dataset-reference-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-content/performance/dataset-reference-performance/</guid>
      <description>On this page you will learn how the data is stored in Performance Dataset.
Tables Data is stored in multiple tables depending on the kind of information that wants to be queried and depending on the level of aggregation:
 Daily (agregation stored every day) Weekly (aggregation stored the first monday of every week) Monthly (aggregation stored the first day of the month)  Descriptions of each table and their correspondent fields are found below:</description>
    </item>
    
    <item>
      <title>Service Endpoints</title>
      <link>/legacy/docs/service-endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/service-endpoints/</guid>
      <description>Service Endpoints (To be used for Testing Purposes only) You will be sent Production endpoints alongside your live access configuration once you have passed our certification process.
WSDLs describing the structure of an XML request and response are available through the following URLs:
Hotel API:
  Endpoints to our system for the dynamic workflow (Avail, Valuation, Reservation, etc):    http://hubpublic.xmltravelgate.com/Service/Travel/v2/Hotel.svc https://hubpublic.xmltravelgate.com/Service/Travel/v2/HotelSecure.svc    Endpoints to our system for the static information (HotelList, DescriptiveInfo, GeographicDestinationTree, etc):    http://hubhotelbatch.</description>
    </item>
    
    <item>
      <title>Add Parameter</title>
      <link>/hotel-x/plugins/add_parameterx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/add_parameterx/</guid>
      <description> Add Parameter is an optional plugin that allows parameters to be added to accesses used by different suppliers at a request level.
Add Parameter Goals The add parameter plugin adds parameters in the configuration of the existing accesses. By doing this, you can add parameters dynamically in request time to the existing accesses (see Access configuration).
Parameters    key value type condition description     JSONConfiguration JSON mandatory JSON structure with parameters that you add by access or by supplier, or even for all accesses    Execution example { &amp;quot;step&amp;quot;: &amp;quot;REQUEST_ACCESS&amp;quot;, &amp;quot;pluginsType&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;add_parameterX&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;POST_STEP&amp;quot;, &amp;quot;parameters&amp;quot;: [ { &amp;quot;key&amp;quot;: &amp;quot;JSONConfiguration&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;{\&amp;quot;accesses\&amp;quot;: [ {\&amp;quot;codes\&amp;quot;: [\&amp;quot;1\&amp;quot;,\&amp;quot;2\&amp;quot;],\&amp;quot;parameters\&amp;quot;: [ {\&amp;quot;key\&amp;quot;: \&amp;quot;A\&amp;quot;, \&amp;quot;value\&amp;quot;: \&amp;quot;1\&amp;quot;} ] } ], \&amp;quot;suppliers\&amp;quot;: [ {\&amp;quot;codes\&amp;quot;: [\&amp;quot;XXX\&amp;quot;], \&amp;quot;parameters\&amp;quot;: [ {\&amp;quot;key\&amp;quot;: \&amp;quot;D\&amp;quot;,\&amp;quot;value\&amp;quot;: \&amp;quot;4\&amp;quot;}] } ], \&amp;quot;parameters\&amp;quot;: [ {\&amp;quot;key\&amp;quot;: \&amp;quot;C\&amp;quot;, \&amp;quot;value\&amp;quot;: \&amp;quot;valor\&amp;quot; } ] }&amp;quot; } ] } ] }  </description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/hotel-x/plugins/aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/aggregation/</guid>
      <description>Aggregation plugins extends HotelX allowing filtering Supplier options and responses using different business rules.
KeyFilter Filters Supplier options based on field keys applying a selector function over field values.
It&amp;rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.
 Field Keys as a combination of:  SupplierCode  HotelCode BoardCode RoomCode Refundable Market PaymentType Promotion Supplement Surcharges Rate rules    Parameters    key value type condition description     primaryKey string mandatory It is the criteria used to aggregate, the value is a set of criteria separated by commas, the possible values are:</description>
    </item>
    
    <item>
      <title>Audience</title>
      <link>/legacy/docs/audience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/audience/</guid>
      <description>This document is intended to a technical audience. Prior knowledge of XML is required. Although it is recommended to have prior knowledge of XML integrations with transfer services, travel services, airlines, ferries or railway carriers, it is not strictly necessary.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>/learning-graphql/basic_concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/basic_concepts/</guid>
      <description>What are Queries &amp;amp; Mutations There are two basic operations in GraphQL schemas:  Queries: Requesting data from a data model. An example Query would be: checking availability of hotels for a particular date and location  Mutations: Making changes and carrying out transactions on data in the data model. An example Mutation would be: making a booking to reserve a hotel room on a particular date.
Queries Queries ask the system to provide some data, based on specfic parameters.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/activities/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/change-log/</guid>
      <description>Version 2.0.0: Date 27/07/2018
: * Added a new structure of Avail and Valuation requests, the old structure has been deprecated. * Added the new Territories request and response documentation and updated the documentation about all the other requests and responses.
|
Version 1.0.1: Date 19/04/2014
: Modifications to suit XML Travelgate library and group common elements.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/transportation/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/change-log/</guid>
      <description>Version 1.0.8: Date 24/07/2012
: Added ConfigCompaniasDispo in the common RQ objects.
|
Version 1.0.9: Date 30/08/2012
: Added Baggage List to Passenger in ResevaRQ.
: Added baggage type in SuplementosRS.
: Added special supplement in SuplementosRS.
|
Version 1.0.11: Date 09/01/2013
: Added Generic Error Code.
|
Version 1.0.12: Date 30/03/2013
: Added list of Locators to RespuestaRecuperarReserva and RespuestaRecuperarListaReserva.
: Added some types to tiposImporteCargo.
: Added number of stops in DisponibilidadRS.</description>
    </item>
    
    <item>
      <title>Check configuration</title>
      <link>/hotel-x/checkconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/checkconfig/</guid>
      <description>This query allows you to retrieve relevant information like supplier access code, supplier name, supplier configuration, supplier context, type of connection: test or live; active or not. You can then use this information to perform other queries/mutations.
To run this query, you should send within the headers your Apikey
{ admin{ accesses{ edges{ node{ accessData{ name isActive code supplier{ supplierData{ code name isActive provider{ code name isActive isPublic } context } } isTest user password parameters{ key value } } } } } } }  </description>
    </item>
    
    <item>
      <title>Commission</title>
      <link>/hotel-x/plugins/net-price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/net-price/</guid>
      <description>CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration.
CommissionX Goals CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration. These commissions are defined through the plugin so as not to lose the options in which we do not know the type of price sent, since this information is established at contract level between client-supplier.</description>
    </item>
    
    <item>
      <title>Commission supplier</title>
      <link>/hotel-x/plugins/format-files/commission_supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/commission_supplier/</guid>
      <description>The commission supplier file should be in the below format:
Commission supplier File Format The file should be in the below format:
 Encoding: UTF-8  File Name: commission_supplier.csv  supplier commission  Extension file: csv Headers:  supplier → supplier code commission → commission value, decimal separator must be point (&amp;ldquo;.&amp;rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>/getting-started/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/concepts/</guid>
      <description>The TravelgateX platform and APIs all use a consistent set of basic concepts so that whatever API you use on our platform, you can be confident that it will work with the same definitions as all of the others you are familiar with.
Here is an overview of the key concepts of our platform.
Access An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier.</description>
    </item>
    
    <item>
      <title>GraphQL Schema Changes</title>
      <link>/hotel-x/release-notes/graphql-schema-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/release-notes/graphql-schema-changes/</guid>
      <description>The GraphQL HotelX schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.
Check out this list of new releases and changes applied on the HotelX GraphQL API.
Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>GraphQL Schema Changes</title>
      <link>/travelgatex/release-notes/graphql-schema-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/graphql-schema-changes/</guid>
      <description>The GraphQL schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.
Check out this list of new releases and changes applied on the TravelgateX GraphQL API.
2019-05-30 🛑 Field StatsInfo.hits changed type from Int! to Int64! 🛑 Field OperationDetailed.totalHits changed type from Int! to Int64! 🛑 Field StatsData.hits changed type from Int! to Int64!</description>
    </item>
    
    <item>
      <title>Mappea</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-mappea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-mappea/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/hotel-x/plugins/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/markup/</guid>
      <description>Markups type plugins permits to apply markup percentages over a price, markup is a field in price composed of a set of rules and a new price with an added percentage, the percentage is the sum of every rule applied.
Although this plugin can be customized, we already offer an implementation.
MarkupX This markup implementation is supported by our web application which permits the management of an organization&amp;rsquo;s rules, the modification of these rules are applied in your product at real time.</description>
    </item>
    
    <item>
      <title>Playground</title>
      <link>/getting-started/playground/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/playground/</guid>
      <description>Try it For Yourself API Playground is an interactive, fun, and super quick way to get to know our APIs.
In the API Playground, as you start to type the query, it will autocomplete with the fields available to complete your query parameters. You can also click on the green Schema button on the right of the Playground window to learn more about our data model and to see all of the options available for building your query.</description>
    </item>
    
    <item>
      <title>Preference</title>
      <link>/hotel-x/plugins/preference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/preference/</guid>
      <description>Preference is an optional plugin and allows to offer options preferentially in relation to the rules informed by the client.
Preference Goals The preference plugin Gives preference to the options that match the preference rules By doing this, the options will be returned in a preferential way.
Sequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the preference will be evaluated.</description>
    </item>
    
    <item>
      <title>Quotas &amp; Limits</title>
      <link>/hotel-x/concepts/quotas-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/quotas-limits/</guid>
      <description>HotelX limits the maximum rate of requests and graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice</description>
    </item>
    
    <item>
      <title>Request Headers</title>
      <link>/travelgatex/concepts/request-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/concepts/request-headers/</guid>
      <description>The following HTTP request headers are relevant to all request methods (GET, PUT, POST and DELETE) and they are required in all API requests.
Authorization (Required) The HTTP Authorization request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header.
Syntax Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;  Directives &amp;lt;type&amp;gt;:
 ApiKey Bearer  &amp;lt;credential&amp;gt;: String</description>
    </item>
    
    <item>
      <title>Safety Margin</title>
      <link>/hotel-x/plugins/safety_margin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/safety_margin/</guid>
      <description>Safety Margin is an optional plugin that allows discarding options that have a commission lower than expected. The expected commission has to be loaded in safety-margin file, and is the commission over gross, in other words, the commission/profit is already included in the price.
Safety Margin Goals The safety margin plugin discards those options that have a commission lower than expected. By doing this, only options that have a commission over gross, equal or lower than those reported in the file will be returned.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/hotel-x/howtos/bookingflow/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/search/</guid>
      <description>Search is the first operation in the booking flow. It allows to check which available rooms there are for the requested hotels or for the hotels in the requested destination for a given range of dates and for a given pax distribution.
Advanced criteria It explains different parameters that can be set up in the request Mandatory
 CheckIn: check-in date for the booking. Format: YYYY-MM-DD CheckOut: check-out date for the booking.</description>
    </item>
    
    <item>
      <title>Search Single Mode &amp; Multi Mode</title>
      <link>/hotel-x/concepts/search-mode/search-single-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/search-mode/search-single-mode/</guid>
      <description>On this page you will learn about Transactional Booking Flow to Search, quote and confirm a reservation. You will also see the difference between the Search Single Mode VS Search Multi Mode.
Search Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that they want to use.</description>
    </item>
    
    <item>
      <title>Search Single Mode &amp; Multi Mode</title>
      <link>/hotel-x/concepts/search-single-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/search-single-mode/</guid>
      <description>On this page you will learn about the Transactional Booking Flow to Search, Quote and Confirm a reservation. You will also be able to see the difference between the Search Single Mode VS Search Multi Mode. In this sense, you can find the necessary access codes used by using the admin-query
Search Single Mode This mode is used when the client only wants to receive options from a single access.</description>
    </item>
    
    <item>
      <title>Tooling</title>
      <link>/insights-x/datasets/dataset-tooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-tooling/</guid>
      <description>On this page you will learn more about TravelgateX free tools to Insights-X Datasets.
Template reportings If you don&amp;rsquo;t have your own reporting tools as Tableau or PowerBI, the easiest way to interact with Insights-X datasets is via our free Google Data Studio Templates.
   Dataset Version GDS Template     Partner seller 1.1 https://datastudio.google.com/s/nAuiuI9_l1M   Partner buyer 1.1 Analogous to Partner Seller template   Hotelier 1.</description>
    </item>
    
    <item>
      <title>Use cases</title>
      <link>/hotel-x/howtos/certification_process/usecases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/certification_process/usecases/</guid>
      <description>To ensure that your connection to our HotelX API is set up correctly, you’ll need to make the following test scenario. You can choose the hotel and dates you prefer:
 Case 1: 1 room with 2 Adults for a Package rate rule. Case 2: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old for a non-refundable rate. Case 3: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old and 1 room for 3 adults for a refundable rate.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/transportation/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/common-elements/</guid>
      <description>Introduction In every petition there some nodes which will always appear, there for this chapter is dedicated for said nodes.
Request Format The common elements in all of the petitions are: source of the petition, Timeout, the indication if you wish to register the transactions and the provider configuration.
Response Format The response will contain the indication if the function is implemented or not, application errors, if any, the providers traces if requested and the response status.</description>
    </item>
    
    <item>
      <title>Create Alert</title>
      <link>/alerts-x/howtos/howto-create-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/howtos/howto-create-alerts/</guid>
      <description>This page shows you how to create Alerts using API or TravelgateX Web.
How to request You must choose a type alert to create it. The alert types are: Error rate, No traffic, Average time and Peak traffic.
There are different ways to configure the alert types. Below there are references of some values of configuration to create the alert needed.
Error rate alert    WHAT IS NEEDED?</description>
    </item>
    
    <item>
      <title>Currency Converter</title>
      <link>/hotel-x/plugins/converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/converter/</guid>
      <description>Currency converter is an optional plugin and allows to apply currency conversion over all the prices in one Option.
CurrencyX This plugin receives an Option and a currency and returns the same option with currency conversion applied over all the prices. It reads the information about rates from a file located in our ftp. Is mandatory that this file exists in the ftp and satisfies all the requirements below. Otherwise, an error will be returned.</description>
    </item>
    
    <item>
      <title>Documents goals</title>
      <link>/legacy/docs/documents-goals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/documents-goals/</guid>
      <description>This document aims to explain all aspects of XML Travelgate&amp;rsquo;s Hotel API specification. In the following pages you will find detailed explanation of all Nodes, Elements and Attributes in every aspect of the API specification. It uses a very straightforward nomenclature that tries to define every aspect of the specification by the name.
This documentation follows a standard. For every method there is:
 Method Description
 Method Goals: What does it do, how does it do it?</description>
    </item>
    
    <item>
      <title>Hotel Commission</title>
      <link>/hotel-x/plugins/format-files/commission_netprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/commission_netprice/</guid>
      <description>The commission file should be in the below format:
Hotel Commission File Format The hotel commission file should be in the below format:
 Encoding: UTF-8  File Name: commission_hotel.csv  commission hotel  Extension file: csv Headers:  supplier → supplier code  hotel → hotel code  commission → commission value, decimal separator must be point (&amp;ldquo;.&amp;rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.</description>
    </item>
    
    <item>
      <title>Inventory</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-inventory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-inventory/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Management Flow</title>
      <link>/hotel-x/concepts/management-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/management-flow/</guid>
      <description>On this page you will learn how to manage and control bookings and management flow. Managing operations can be used in order to operate above Seller&amp;rsquo;s bookings.
Cancellation Performs a Seller booking cancellation.
Operation { &amp;quot;mutation&amp;quot;: { &amp;quot;hotelX&amp;quot;: { &amp;quot;cancel&amp;quot;: { } } } }  PlayGround Samples  cancel   Booking Performs a seller booking list.
In this case you can search the bookings with references or by dates, the dates can be arrival dates or booking dates.</description>
    </item>
    
    <item>
      <title>Processor</title>
      <link>/hotel-x/plugins/processor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/processor/</guid>
      <description>Processor plugins extends HotelX allowing multiple operation types. It can modify request and response messages, allowing a full range of operations:
 Split arrays Join arrays Modify object values Add or remove object instances  </description>
    </item>
    
    <item>
      <title>Query Alerts</title>
      <link>/alerts-x/howtos/howto-query-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/howtos/howto-query-alerts/</guid>
      <description>This page shows you how to query Alerts using API or TravelgateX Web.
How to request &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
You must query about your alerts by their location group or their code. Also can be filtered by active alerts or not. You should query about your alerts by their ubication group or their code. They also can be filtered by active alerts or not active alerts. &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 19fd7afc932b16704f2b83f0c92c4386b900d00f
Below are shown examples for different casuistry:</description>
    </item>
    
    <item>
      <title>Query Logging</title>
      <link>/logging/howtos/howto-query-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/howtos/howto-query-logging/</guid>
      <description>This page shows you how to query Logging using API or TravelgateX Web.
How to request You can query about your performance as a buyer or as a seller.
Below are shown different examples for different casuistry:
    122d8186fb0ed7d5d886b00b3081cecb Testing /122d8186fb0ed7d5d886b00b3081cecb
   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.</description>
    </item>
    
    <item>
      <title>Query Stats</title>
      <link>/stats/howtos/howto-query-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/howtos/howto-query-stats/</guid>
      <description>This page shows you how to query Stats using API or TravelgateX Web.
How to request You can query about your performance as a buyer or as a seller.
Below are shown different examples for different casuistry:
    122d8186fb0ed7d5d886b00b3081cecb Testing /122d8186fb0ed7d5d886b00b3081cecb
   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.</description>
    </item>
    
    <item>
      <title>Quote</title>
      <link>/hotel-x/howtos/bookingflow/quote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/quote/</guid>
      <description>Quote is an operation used to assess and valuate the rate before the actual booking. It returns the same information as the Search response for a hotel rate with up-to-date price, along with additional information regarding the rate: rate breakdown and cancellation policies.
Advanced criteria It explains different parameters that can be set up in the request (it indicates which ones are mandatory)
 optionRefId: Identifier of the option chosen in Search.</description>
    </item>
    
    <item>
      <title>Search by destination</title>
      <link>/hotel-x/plugins/search_by_destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/search_by_destination/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/74a01699ccc7f7a8f043f6583e64fcde\/raw\x22,\x22divname\x22:\x22div_admin_destinations\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/f820c0508f7d47432eaad34823d426e0\/raw\x22,\x22divname\x22:\x22div_searchbydestinations\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Thinking in GraphQL</title>
      <link>/learning-graphql/thinking_in_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/thinking_in_graphql/</guid>
      <description>A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. With GraphQL, you can choose exactly what data you want to retrieve. GraphQL is a typed query language. That means that it has a lot of predictability, as each piece of data has its own type, so we know what sort of data we will be getting back.</description>
    </item>
    
    <item>
      <title>Update Alert</title>
      <link>/alerts-x/howtos/howto-update-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/howtos/howto-update-alerts/</guid>
      <description>This page shows you how to update an alert using API or TravelgateX.
How to request To update an alert you should input the alert code. Only data which needs to be updated needs to be input.
Below are shown examples for different casuistry:
       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.</description>
    </item>
    
    <item>
      <title>Anatomy of Request</title>
      <link>/legacy/docs/anatomy-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/anatomy-request/</guid>
      <description>The request is basically made up of two parts: the hub structure and then the XML request.
The hub structure is a generic structure wrapping the XML request which will indicate the following information:
 Hub credentials. Connection time out measured in Milliseconds. XML Travelgate&amp;rsquo;s API version - usually indicated with a 1. Code for the Supplier you wish to connect to. Id to correlate providerRQ in Request with Response  Observations:</description>
    </item>
    
    <item>
      <title>Book</title>
      <link>/hotel-x/howtos/bookingflow/book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/book/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/31d4d32ea8e8bc8ab5d7bc3910df72c0\/raw\x22,\x22divname\x22:\x22div_booking\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>ChannelX breaking changes</title>
      <link>/channel-x/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/channel-x/release-notes/breaking-changes/</guid>
      <description>Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:
 Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself!</description>
    </item>
    
    <item>
      <title>Enumerates</title>
      <link>/legacy/docs/transportation/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/enum/</guid>
      <description>Enumerate description Resident discount type    Possible Values Description     N None   BP Balearic Islands resident flying to mainland   BI Balearic Islands resident flying to another balearic island   DC Canarian Islands resident flying to another Canarian Island   RC Canarian Islands resident flying to mainland   RM Ceuta/Melilla resident   STR Italian resident discount   ELB Italian resident Elba   SDG Italian resident Sardegna   SLC Italian resident Sicily   RE Ceuta    Charge type    Possible Values Description     TAX Tax   CARD Card   BAGGAGE Baggage   CHECKIN Checkin   CARRIER_CHARGES Carrier charges   DU_TAX DU Taxes   BASE_AMOUNT Base import   DISCOUNT Discount   VEHICLE Vehicle   BANKING_CHARGES Bank charges   CURRENCY_CONVERSION_CHARGES Currency conversion charges   VEHICLE_FEE Vehicle fee   FEE Fee   SEAT Seat   SUPPLEMENT Supplement   TRAVELCARD Travel card   PET Pet   PET_FEE Pet fee   INSURANCE Insurance   FAST_TRACK Fast Track   PRIORITY_BOARDING Priority Boarding   BLOCK_FARE Fare lock   SPECIAL_ASSISTANCE Special assistance   PENALTY Penalty    Block Attribute Type    Possible Values Description     OVER_WING Over wing seat   MIDDLE Middle seat   AISLE Aisle seat   WINDOW Window seat   COMPARTMENT Compartment   LAVATORY Lavatory   LUGGAGE Luggage seat   PHONE Phone seat   POWER Power   TABLE Table   EXITROW Emergency exit   FEETBLOCKED Feet blocked seat   NO_CHILD No childs allowed seat   NO_INFANT No infants allowed seat   XL_SEAT XL seat   RESTRICTED Seat with some kind of restriction   HANDICAP Special seat for handicap people   QUIET Quiet seat   GROUPS Groups seat   NO_PET No pets allowed seat   BULKHEAD Bulk head seat   BLOCKED Blocked seat   UNKNOWN Unknown characterstic   LAST_OFF Last off    Refund type    Possible Values Description     ALL Fare and taxes will be refunded   FARE Only fare will be refunded   TAXES Only taxes will be refunded   AUTO GDS automatic ticket change   PARTIAL Partial refund.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/alerts-x/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/alerts-x/release-notes/breaking-changes/</guid>
      <description> Changes history of deprecated notes previously announced No deletions to date </description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/hotel-x/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06.To be removed soon. Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of type from AdviseMessage.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/logging/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/logging/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced </description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/mappea/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mappea/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/paymentx/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/stats/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stats/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage.</description>
    </item>
    
    <item>
      <title>GraphQL Schema breaking changes</title>
      <link>/travelgatex/release-notes/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/breaking-changes/</guid>
      <description>Changes history of deprecated notes previously announced Unreleased  Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of loadFile from HotelXMutation.</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/hotel-x/plugins/format-files/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/group/</guid>
      <description>The hotel group file should be in the below format:
 Encoding: UTF-8  File Name: context_entity_group.csv  Context Entity (file will be indexed by this field). Format (indicates format file)  Extension file: csv Headers:  key → Entity. hotelCodes → hotel code chainCodes → chain code destinationCodes → destination code  Delimiter: Comma (“,”)  Directory: /F[folder code]\Maps/HotelX\Hotel/  Sample File Name: context_entity_group.csv
Data:
Hotel entity example</description>
    </item>
    
    <item>
      <title>Speed</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-speed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-speed/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Static Content</title>
      <link>/hotel-x/concepts/content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/content/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/aeb082e484710ebf6b7a4ec5173064cc\/raw\x22,\x22divname\x22:\x22div_hotels\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/4737228c495b09566474fa2db38fc72d\/raw\x22,\x22divname\x22:\x22div_destinations\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/519b4223de8b44cb20c5c33212c62654\/raw\x22,\x22divname\x22:\x22div_boards\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/0815561e9c25ce49bc416dbc73f36388\/raw\x22,\x22divname\x22:\x22div_rooms\x22},{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/aa1be23b8c9229c8363c142036afb1f5\/raw\x22,\x22divname\x22:\x22div_categories\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>/learning-graphql/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tools/</guid>
      <description>Top tools to develop in GraphQL Here is a collection of tools we&amp;rsquo;ve been using that have help us develop in GraphQL:
Schemas Design  APIs Guru&amp;rsquo;s graphql-faker  Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We&amp;rsquo;ve used many libraries and packages to help us, hereby our list:</description>
    </item>
    
    <item>
      <title>Booking List</title>
      <link>/hotel-x/howtos/bookingflow/booklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/booklist/</guid>
      <description>The Booking operation allows to retrieve a booking (or bookings) with all its details from the booking reference locator. The most important information returned for each booking in the list is: - Booking reference - Booking holder - Booking pax - Hotel, rooms and boards confirmed - Booking rates
Advanced criteria Explain different parameters can be set up on the request (indicate which ones are mandatory)
How to request     a5b25332a7a5683d602efeb87233a9c7 You can ask for bookings by client reference (XTG-XXXXXX) or by supplier reference.</description>
    </item>
    
    <item>
      <title>Commission</title>
      <link>/hotel-x/plugins/format-files/commission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/commission/</guid>
      <description>The commission file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential commission  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client token used for index the rule supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkin date Date format checkInTo → checkout date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>/insights-x/datasets/dataset-content/benchmark/insights/dataset-concepts-benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/insights-x/datasets/dataset-content/benchmark/insights/dataset-concepts-benchmark/</guid>
      <description>On this page you will learn how to interpret the information in our datasets.
Benchmark How to interpret the information of the differents benchmark tables.
Overview On this page, you will learn how to interpret the differents fields of benchmark table.
First of all, it&amp;rsquo;s important to know that the benchmark is given by 3 period of time:
 Daily Weekly (starts on monday)
 Monthly
  and 3 levels of detail:</description>
    </item>
    
    <item>
      <title>Development</title>
      <link>/hotel-x/plugins/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/development/</guid>
      <description>On this page you will learn how to develop your own HotelX Plugin.</description>
    </item>
    
    <item>
      <title>Entity Table values</title>
      <link>/hotel-x/plugins/format-files/entity_table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/entity_table/</guid>
      <description>We have different combinations values from entities values this table show this combinations:
   entity chainCodes destinationCodes hotelCodes     chain Yes No No   hotel No No Yes   destination No Yes No    </description>
    </item>
    
    <item>
      <title>Insights</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-insights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-insights/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Ranking</title>
      <link>/hotel-x/concepts/ranking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/concepts/ranking/</guid>
      <description>On this page you will learn how to rank hotels.
Overview On this page, you will learn how to manage content data such as hotels, boards, categories, etc. in your site. Hotel Content operations allow changes to be made into static methods on HotelX, so that hotels can be divided into different rankings or priorities in order to facilitate the mapping process.
The main goal of this process is to create a hotel ranking and divide the whole portfolio in order to make the hotel list more manageable.</description>
    </item>
    
    <item>
      <title>Safety margin</title>
      <link>/hotel-x/plugins/format-files/safety_margin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/safety_margin/</guid>
      <description>The safety margin file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential safetymargin  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkinfrom date Date format checkInTo → checkinto date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Tutorials &amp; Resources</title>
      <link>/learning-graphql/tutorials_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tutorials_resources/</guid>
      <description>Although GraphQL is a very young technology, it&amp;rsquo;s quickly gaining momentum and already has a fast growing yet vast ecosystem. Apart from Facebook&amp;rsquo;s and Graphql.org&amp;rsquo;s official documentation, there are more and more development teams embracing this technology and you can now find a lot of articles, tutorial and videos talking about it.
We want to be part of this community and hopefully help you discover this new technology and its features.</description>
    </item>
    
    <item>
      <title>Cancellation</title>
      <link>/hotel-x/howtos/bookingflow/cancellation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/bookingflow/cancellation/</guid>
      <description>const apiKeyJO = &#34;q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ&#34;; const apiKeyDC = &#34;64780338-49c8-4439-7c7d-d03c2033b145&#34;; $(document).ready(main); function main() { const q = &#39;[{\x22apikey\x22:\x2264780338-49c8-4439-7c7d-d03c2033b145\x22,\x22gist\x22:\x22https:\/\/gist.githubusercontent.com\/tgx-bot\/1b160cfcf47b1c4d1deada1a18ae98b6\/raw\x22,\x22divname\x22:\x22div_cancellation\x22}]&#39;; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes(&#39;http&#39;)) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = &#39;https://api.travelgatex.com&#39;; var search = window.location.search; var parameters = {}; search.substr(1).split(&#39;&amp;&#39;).forEach(function (entry) { var eq = entry.indexOf(&#39;=&#39;); if (eq = 0) { parameters[decodeURIComponent(entry.</description>
    </item>
    
    <item>
      <title>Distribution</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-distribution/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Entities</title>
      <link>/hotel-x/plugins/entity_table_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/entity_table_file/</guid>
      <description>Entities processed types: Sequential Type of processing sequentially, the first rule that coincides will be the one applied.
Supplier Rules applied or indexed at the supplier level.
Access Rules applied or indexed at the access level.
Hotel The key to indexing is of the hotel type, we hope that the reference is by a hotel code where the type will be given by the context.
Destination Idem hotel.</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/travelgatex/frequently-asked-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/frequently-asked-questions/</guid>
      <description>What is TravelgateX? TravelgateX platform provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface). Instead of having to deal with REST APIs, you&amp;rsquo;ll be able to use full poser of GraphQL to interact with your data.</description>
    </item>
    
    <item>
      <title>Full SOAP Examples</title>
      <link>/legacy/docs/car/soap-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/soap-examples/</guid>
      <description>Example Description Sette Parameter d by
YOUR_TRA This is the User to access the HUB XMLTr VELGATE_ avelg USERNAME ate
YOUR_TRA This is the Passwords to access the HUB XMLTr VELGATE_ avelg PASSWORD ate
TIMEOUT_ This timeout is set for the HUB. Note that this should be Runti FOR_THE\ at least 1 second higher than the Provider&amp;rsquo;s Request me _HUB_REQ Timeout. This way you can ensure that the HUB has time to param UEST receive the response from our integration and responds it eter back to you.</description>
    </item>
    
    <item>
      <title>Supplier Order</title>
      <link>/hotel-x/plugins/format-files/supplier_order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/supplier_order/</guid>
      <description>The supplier order file should be in the below format:
 Encoding: UTF-8 File Name:  supplier_order  Extension file: csv Headers:
 ruleId → rule identifier supplierCodes → supplier code  List file fields
|Field | Mandatory | Excluded fileds* | Multi-value | |---|---|---|---| |ruleId| Yes | - | No | |supplierCodes| Yes | - | Yes |  Delimiter: Comma (“,”)
 Separator for multiples codes in the same row: Semicolon (&amp;ldquo;;&amp;rdquo;)</description>
    </item>
    
    <item>
      <title>Useful information</title>
      <link>/hotel-x/howtos/howto-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/howtos/howto-book/</guid>
      <description>HotelX Settings In HotelX there are different configuration level settings for a request. With these settings, you can configure some aspect of the request:
   Field Description     context It indicates the context codes that you want to send and to receive.   Timeout It sets the requested timeout in the different query and mutation types:* search * quote * book (includes cancel and booking)    Language The language you want to use in the request.</description>
    </item>
    
    <item>
      <title>Net compare</title>
      <link>/hotel-x/plugins/format-files/netcompare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/netcompare/</guid>
      <description>The net compare file should be in the format below:
 Encoding: UTF-8 File Name:  context sequential netCompare  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-stats/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the product.
Product Page Link
All notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:</description>
    </item>
    
    <item>
      <title>Preference</title>
      <link>/hotel-x/plugins/format-files/preference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hotel-x/plugins/format-files/preference/</guid>
      <description>The preference file should be in the below format:
 Encoding: UTF-8 File Name:  context sequential preference  Extension file: csv Headers:
 ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>travelgatex.com</title>
      <link>/travelgatex/release-notes/products-changelogs/changelog-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/release-notes/products-changelogs/changelog-web/</guid>
      <description>To make it easier for users and contributors to see precisely what notable changes have been made on the web.
Web site Link
All notable changes to this product will be documented in this page. 2019-06-20  TEAMs: Improved TEAMs page to allow see teams to all TGX operators Stats: Now shows totals and percentatge on all headers IAM Members: Added icon type members to be more clean IAM Members: Improvement to keep groups open at IAM page    Profiles: Revised redirections to all profile pages IAM Members: fixed creation of new members solving issue on granting permissions IAM create organization: New organizations, pattern code has been changed to allow numbers on organization code Stats: stats view all adviseMessages and only reject if error   2019-06-06  IAM admin entities: UX improve, now expanded by default    IAM admin entities: The accesses list weren&amp;rsquo;t showing the supplier data asociated Stats: stats view all adviseMessages and only reject if error   2019-05-29  IAM members: added macro-roles for distribution IAM members: added macro-roles for alerts and agrupations IAM: added &amp;ldquo;suit organization&amp;rdquo; option to adapt organizations to IAM tree structure.</description>
    </item>
    
    <item>
      <title>footer</title>
      <link>/_footer/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_footer/</guid>
      <description>Lorem ipsum dolor sit amet.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_header/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Avail</title>
      <link>/legacy/docs/activities/methods/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/avail/</guid>
      <description>Method Goals This method aims to return all the available options for a given date and search type. It does not filter different classes, times or fares. It will always return all results returned by the supplier between specific date range.
Request Format It is mandatory to pass a date range and a search type. Depends if OpenAvailability is true or false (this attribute return in StaticConfiguration call), you need specify passengers.</description>
    </item>
    
    <item>
      <title>Avail</title>
      <link>/legacy/docs/hotel/methods/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/avail/</guid>
      <description>Method Goals This method aims to return all the available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the supplier.
Request Format The availability request is very straight forward. It only requires destination, travel dates and the number of pax in each room.
Response Format Results are organized in this hierarchy:
 Hotel :  A list with all the hotels, including hotel name and code, mealplans list, etc.</description>
    </item>
    
    <item>
      <title>Avail</title>
      <link>/legacy/docs/transportation/flights/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/avail/</guid>
      <description>Method Goals This method aims to return all the available options for a given date and itinerary. It does not filter different classes, times or fares. It will always return all of the results returned by the provider.
Request Format The common part of an availability request is very straight forward. It only requires the destination/s, the travelling dates, the paxes and the indication of the trip type.
Response Format The response format will always be delivered in the node Transportation, which will be organized by two main nodes:</description>
    </item>
    
    <item>
      <title>AvailDestinationTree</title>
      <link>/legacy/docs/hotel/methods/availdestinationtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/availdestinationtree/</guid>
      <description>Method Goals This method returns the tree of destinations accessible from the call Avail .
Request Format The request does not require any elements - it&amp;rsquo;s an empty request.
Response Format The result returns a list of DestinationTree with their corresponding sub-destinations.
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.
AvailDestinationTreeRQ Example &amp;lt;AvailDestinationTreeRQ&amp;gt; &amp;lt;/AvailDestinationTreeRQ&amp;gt;  AvailDestinationTreeRQ Description    Element Number Type Description     AvailDestinationTreeRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Availability</title>
      <link>/legacy/docs/car/methods/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/avail/</guid>
      <description>Method Goals This method aims to return all the available options for a given date and offices.
Remarks This method must be called before the OTA VehRateRule method.
OTA VehAvailRateRQ Example &amp;lt;OTA_VehAvailRateRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;AVI&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;testuser&amp;quot; password=&amp;quot;testpass&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://testURL&amp;lt;/genericURL&amp;gt; &amp;lt;identificationURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;availRateURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;rateRuleURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;vehResURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;specificURLs xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;RateCategory&amp;quot; value=&amp;quot;2&amp;quot; /&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;ClientConfiguration agency=&amp;quot;testAgency&amp;quot; SellCurrency=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;POS&amp;gt; &amp;lt;Source ISOCountry=&amp;quot;ESP&amp;quot;&amp;gt; &amp;lt;RequestorID Type=&amp;quot;LAN&amp;quot; ID=&amp;quot;es&amp;quot; /&amp;gt; &amp;lt;/Source&amp;gt; &amp;lt;/POS&amp;gt; &amp;lt;VehAvailRQCore&amp;gt; &amp;lt;VehRentalCore PickUpDateTime=&amp;quot;2014-04-07T12:00:00&amp;quot; ReturnDateTime=&amp;quot;2014-04-14T12:00:00&amp;quot;&amp;gt; &amp;lt;PickUpLocation LocationCode=&amp;quot;SXF&amp;quot; CodeContext=&amp;quot;IATA&amp;quot; /&amp;gt; &amp;lt;ReturnLocation LocationCode=&amp;quot;SXF&amp;quot; CodeContext=&amp;quot;IATA&amp;quot; /&amp;gt; &amp;lt;/VehRentalCore&amp;gt; &amp;lt;DriverType Age=&amp;quot;30&amp;quot; /&amp;gt; &amp;lt;/VehAvailRQCore&amp;gt; &amp;lt;VehAvailRQInfo&amp;gt; &amp;lt;Customer&amp;gt; &amp;lt;Primary&amp;gt; &amp;lt;CitizenCountryName Code=&amp;quot;ES&amp;quot; /&amp;gt; &amp;lt;/Primary&amp;gt; &amp;lt;/Customer&amp;gt; &amp;lt;/VehAvailRQInfo&amp;gt; &amp;lt;/OTA_VehAvailRateRQ&amp;gt;  OTA VehAvailRateRQ Description The availability request is very straight forward.</description>
    </item>
    
    <item>
      <title>Availability</title>
      <link>/legacy/docs/transfers/methods/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/avail/</guid>
      <description>Method Goals This method aims to return all the available options for a given dates and destinations.
Remarks This method must be called before the RateRule method.
AvailabilityRQ Example &amp;lt;AvailabilityRQ&amp;gt; &amp;lt;echoToken&amp;gt;test&amp;lt;/echoToken&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;xxxx&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;xx&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;xxx&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;xxxx&amp;quot; password = &amp;quot;xxxx&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;xxxx&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;Segments&amp;gt; &amp;lt;Segment id = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;Origin type = &amp;quot;ARP&amp;quot; code = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-19T17:15:00&amp;quot;&amp;gt; &amp;lt;FlightInfo flightNumber = &amp;quot;xxxx&amp;quot;&amp;gt; &amp;lt;Arrival terminal = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-19T17:45:00&amp;quot;/&amp;gt; &amp;lt;Departure terminal = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-19T17:15:00&amp;quot;/&amp;gt; &amp;lt;/FlightInfo&amp;gt; &amp;lt;/Origin&amp;gt; &amp;lt;Destination type = &amp;quot;HOT&amp;quot; code = &amp;quot;xxxx&amp;quot; date = &amp;quot;2014-09-30T00:00:00&amp;quot;&amp;gt; &amp;lt;HotelInfo name=&amp;quot;xxxx&amp;quot; address=&amp;quot;xxxxx&amp;quot;&amp;gt;&amp;lt;/HotelInfo&amp;gt; &amp;lt;/Destination&amp;gt; &amp;lt;/Segment&amp;gt; &amp;lt;Segment id = &amp;quot;1&amp;quot;&amp;gt; &amp;lt;Origin type = &amp;quot;HOT&amp;quot; code = &amp;quot;xxxx&amp;quot; date = &amp;quot;2014-09-01T17:15:00&amp;quot;/&amp;gt; &amp;lt;HotelInfo name=&amp;quot;xxxx&amp;quot; address=&amp;quot;xxxxx&amp;quot;&amp;gt;&amp;lt;/HotelInfo&amp;gt; &amp;lt;/Origin&amp;gt; &amp;lt;Destination type = &amp;quot;ARP&amp;quot; code = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-02T00:00:00&amp;quot;&amp;gt; &amp;lt;FlightInfo flightNumber = &amp;quot;xxxx&amp;quot;&amp;gt; &amp;lt;Arrival terminal = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-01T16:25:00&amp;quot;/&amp;gt; &amp;lt;Departure terminal = &amp;quot;xxx&amp;quot; date = &amp;quot;2014-09-01T15:55:00&amp;quot;/&amp;gt; &amp;lt;/FlightInfo&amp;gt; &amp;lt;/Destination&amp;gt; &amp;lt;/Segment&amp;gt; &amp;lt;/Segments&amp;gt; &amp;lt;Passengers&amp;gt; &amp;lt;Passenger id = &amp;quot;0&amp;quot; age = &amp;quot;30&amp;quot;&amp;gt; &amp;lt;RefSegments&amp;gt; &amp;lt;RefSegment refSegment = &amp;quot;0&amp;quot; bags = &amp;quot;0&amp;quot;/&amp;gt; &amp;lt;RefSegment refSegment = &amp;quot;1&amp;quot; bags = &amp;quot;0&amp;quot;/&amp;gt; &amp;lt;/RefSegments&amp;gt; &amp;lt;/Passenger&amp;gt; &amp;lt;/Passengers&amp;gt; &amp;lt;/AvailabilityRQ&amp;gt;  AvailabilityRQ Description The availability request is very straight forward.</description>
    </item>
    
    <item>
      <title>Availability</title>
      <link>/legacy/docs/transportation/ferries/avail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/avail/</guid>
      <description>Method Goals This method aims to complete the common side of the petition with the ferries specifications, if any, and therefore have the complete petition for ferries.
Request Format The request needs a list of journeys (each one with the desired dates and ports), a list of the passengers and an optional vehicle list.
Response Format The response contains a list of fares with the available options.
AvailabilityRQ &amp;lt;AvailabilityRQ xmlns:xsd = &amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Booking</title>
      <link>/legacy/docs/car/methods/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/reservation/</guid>
      <description>Method Goals This method aims to book the selected vehicle.
Remarks OTA VehResRQ Example &amp;lt;OTA_VehResRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;CT&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;1234&amp;quot; password=&amp;quot;&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://otatest.cartrawler.com:20000/cartrawlerota&amp;lt;/genericURL&amp;gt; &amp;lt;identificationURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;availRateURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;rateRuleURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;vehResURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;specificURLs&amp;gt; &amp;lt;Attribute key=&amp;quot;URL_OFICINAS&amp;quot; value=&amp;quot;https://ota.cartrawler.com/cartrawlerota/files/static/ctlocation.EN.xml&amp;quot; /&amp;gt; &amp;lt;/specificURLs&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;ISOCurrency&amp;quot; value=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;Attribute key=&amp;quot;ConsumerIP&amp;quot; value=&amp;quot;95.39.27.98&amp;quot; /&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;ClientConfiguration agency=&amp;quot;agencyName&amp;quot; SellCurrency=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;POS&amp;gt; &amp;lt;Source ISOCountry = &amp;quot;ESP&amp;quot;&amp;gt; &amp;lt;RequestorID Type = &amp;quot;LAN&amp;quot; ID = &amp;quot;es&amp;quot;/&amp;gt; &amp;lt;/Source&amp;gt; &amp;lt;/POS&amp;gt; &amp;lt;VehResRQCore Status = &amp;quot;Available&amp;quot;&amp;gt; &amp;lt;VehRentalCore PickUpDateTime = &amp;quot;2012-11-29T09:30:00&amp;quot; ReturnDateTime = &amp;quot;2012-12-01T17:00:00&amp;quot;&amp;gt; &amp;lt;PickUpLocation LocationCode = &amp;quot;PMI&amp;quot; CodeContext = &amp;quot;IATA&amp;quot;/&amp;gt; &amp;lt;ReturnLocation LocationCode = &amp;quot;PMI&amp;quot; CodeContext = &amp;quot;IATA&amp;quot;/&amp;gt; &amp;lt;/VehRentalCore&amp;gt; &amp;lt;Customer&amp;gt; &amp;lt;Primary BirthDate = &amp;quot;17/07/1980 10:39:13&amp;quot;&amp;gt; &amp;lt;PersonName&amp;gt; &amp;lt;GivenName&amp;gt;TEST_NOM&amp;lt;/GivenName&amp;gt; &amp;lt;Surname&amp;gt;TEST_COG&amp;lt;/Surname&amp;gt; &amp;lt;/PersonName&amp;gt; &amp;lt;Telephone PhoneTechType = &amp;quot;VOICE&amp;quot; PhoneNumber = &amp;quot;68181&amp;quot;/&amp;gt; &amp;lt;Email&amp;gt;car@xmltravelgate.</description>
    </item>
    
    <item>
      <title>Booking</title>
      <link>/legacy/docs/transfers/methods/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/reservation/</guid>
      <description>Method Goals This method aims to book the selected options.
BookRQ Example &amp;lt;BookRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;test&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;XXX&amp;quot; password = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;XXX&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;Locator id = &amp;quot;XXX&amp;quot; type = &amp;quot;CLIENT&amp;quot;/&amp;gt; &amp;lt;SelectedRates&amp;gt; &amp;lt;SelectedRate id = &amp;quot;0&amp;quot; rateType = &amp;quot;OW&amp;quot;&amp;gt; &amp;lt;SelectedOptions&amp;gt; &amp;lt;SelectedOption status = &amp;quot;NEW&amp;quot; id = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;Transfers&amp;gt; &amp;lt;Transfer id = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;Info type = &amp;quot;BUS&amp;quot; code = &amp;quot;XXX&amp;quot; typeVeh = &amp;quot;XXX&amp;quot;/&amp;gt; &amp;lt;LocOrigin type = &amp;quot;ARP&amp;quot; code = &amp;quot;PMI&amp;quot; date = &amp;quot;2014-09-19T00:00:00&amp;quot;/&amp;gt; &amp;lt;LocDestination type = &amp;quot;HOT&amp;quot; code = &amp;quot;XXX&amp;quot; date = &amp;quot;2014-09-19T00:00:00&amp;quot;/&amp;gt; &amp;lt;/Transfer&amp;gt; &amp;lt;/Transfers&amp;gt; &amp;lt;Parameters&amp;gt;&amp;lt;/Parameters&amp;gt; &amp;lt;/SelectedOption&amp;gt; &amp;lt;/SelectedOptions&amp;gt; &amp;lt;TotalRate currency = &amp;quot;EUR&amp;quot; amount = &amp;quot;5.</description>
    </item>
    
    <item>
      <title>Cancel</title>
      <link>/legacy/docs/activities/methods/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/cancel/</guid>
      <description>Method Goals This method aims to cancel a booking
Request Format The request requires the booking code and the name of the customer
Response Format The result returns the new status of the reservation and the possible cost of the cancellation.
Remarks Not implemented by all suppliers
CancelRQ Example &amp;lt;OTA_TourActivityCancelRQ xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; PrimaryLangID = &amp;quot;es&amp;quot;&amp;gt; &amp;lt;Confirmation ID=&amp;quot;1283479#1&amp;quot; type=&amp;quot;PROVIDER&amp;quot; /&amp;gt; &amp;lt;/OTA_TourActivityCancelRQ&amp;gt;  CancelRQ Description    Element Number Type Description     OTA_TourActivityCancelRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Cancel</title>
      <link>/legacy/docs/hotel/methods/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/cancel/</guid>
      <description>Method Goals This method aims to cancel a booking
Request Format The request requires one or more of the following data, depending on the supplier:
 Locators: booking codes - this element contains two elements, Client (client&amp;rsquo;s booking code) and Provider (supplier&amp;rsquo;s booking code). One or both will be required depending on the supplier hotelCode: the hotel code StartDate: the check-in date EndDate: the check-out date  Response Format The result returns a response with the booking status, the cancellation&amp;rsquo;s ID and the fee for that cancellation.</description>
    </item>
    
    <item>
      <title>Cancel Booking</title>
      <link>/legacy/docs/car/methods/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/cancel/</guid>
      <description>Method Goals This method aims to cancel a booking
Remarks Not implemented by all suppliers
OTA VehCancelRQ Example &amp;lt;OTA_VehCancelRQ&amp;gt; &amp;lt;POS&amp;gt; &amp;lt;Source ISOCountry = &amp;quot;ESP&amp;quot;&amp;gt; &amp;lt;RequestorID Type = &amp;quot;LAN&amp;quot; ID = &amp;quot;es&amp;quot;/&amp;gt; &amp;lt;/Source&amp;gt; &amp;lt;/POS&amp;gt; &amp;lt;VehCancelRQCore&amp;gt; &amp;lt;UniqueID ID = &amp;quot;XXXX&amp;quot; Type = &amp;quot;4&amp;quot;/&amp;gt; &amp;lt;PersonName&amp;gt; &amp;lt;GivenName&amp;gt;TEST&amp;lt;/GivenName&amp;gt; &amp;lt;Surname&amp;gt;TEST&amp;lt;/Surname&amp;gt; &amp;lt;/PersonName&amp;gt; &amp;lt;/VehCancelRQCore&amp;gt; &amp;lt;/OTA_VehCancelRQ&amp;gt;  OTA VehCancelRQ Description The request requires the booking code and the name of the customer.
   Element Number Type Description     OTA_VehCancelRQ 1  Root Node.</description>
    </item>
    
    <item>
      <title>CancelBooking</title>
      <link>/legacy/docs/transfers/methods/cancel-booking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/cancel-booking/</guid>
      <description>Method Goals This method aims to cancel a booking.
CancelBookingRQ Example &amp;lt;CancelBookingRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;XXXX&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;XXXX&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;XXX&amp;quot; password = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://examples.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification&amp;gt;http://examples.com&amp;lt;/UrlIdentification&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;Locator id = &amp;quot;94&amp;quot; type = &amp;quot;PROVIDER&amp;quot;/&amp;gt; &amp;lt;/CancelBookingRQ&amp;gt;  CancelBookingRQ Description    Element Number Type Description     CancelBookingRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Cancellation</title>
      <link>/legacy/docs/transportation/ferries/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/cancel/</guid>
      <description>Method Goals This method aims to cancel a booking.
Request Format The request requires the booking code or locator.
Response Format If the provider returns a Breakdown, this will be informed in CancellarionRS.
CancellationRQ Example &amp;lt;CancellationRQ&amp;gt; &amp;lt;Locator&amp;gt;XXX&amp;lt;/Locator&amp;gt; &amp;lt;CancellationCosts&amp;gt;0&amp;lt;/CancellationCosts&amp;gt; &amp;lt;/CancellationRQ&amp;gt;  CancellationRQ Description    Element Number Type Description     CancellationRQ 1  Root node.   Locator 1  Contains a list of Tickets.   CancellationCosts 1  Contains details of the Ticket.</description>
    </item>
    
    <item>
      <title>Cancellation</title>
      <link>/legacy/docs/transportation/flights/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/cancel/</guid>
      <description>Method Goals This method aims to cancel a booking.
Request Format The request requires the booking code or locator.
Response Format The result returns empty response
Remarks Not implemented by all suppliers
CancellationRQ Description    Element Number Type Description     CancellationRQ 1  Root node.   Locator 1 String Contains the booking&amp;rsquo;s locator that want to be cancelled   CancellationCosts 0..1 Decimal Contains the amount of cancellation costs.</description>
    </item>
    
    <item>
      <title>CategoryList</title>
      <link>/legacy/docs/hotel/methods/categorylist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/categorylist/</guid>
      <description>Method Goals This method returns a list of categories (codes and descriptions) used in HotelList and DescriptiveInfo.
Request Format The request does not require any elements empty request.
Response Format The result returns a list of Category .
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.
CategoryListRQ Example &amp;lt;CategoryListRQ&amp;gt; &amp;lt;/CategoryListRQ&amp;gt;  CategoryListRQ Description    Element Number Type Description     CategoryListRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Certification Process</title>
      <link>/legacy/docs/hotel-push/certification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/certification/</guid>
      <description>Once integration is developed, please refer to https://docs.google.com/a/xmltravelgate.com/document/d/1UD7PpysZaBCouMljiLcBoAnk8M_wx9rqs0tDA8uh2bo/edit in order to certificate it.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/car/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/change-log/</guid>
      <description>Version 1.3.3: Date 09/02/2018
 Added element PricedCoverages: We have added the element PricedCoverages in OTA_VehAvailRateRQ/VehAvailRQInfo, OTA_VehRateRuleRQ/RentalInfo and OTA_VehResRQ/VehResRQInfo. With these elements we can request coverages to the provider.
 Added element RentalRate in VehSegmentCore: We have added the element RentalRate in OTA_VehResRQ/VehRetResRSCore/VehReservation/VehSegmentCore and OTA_VehRetResRS/VehRetResRSCore/VehReservation/VehSegmentCore. With these elements we can return more properties of the booking, like the cancel penalties, vehicle charges, etc.
 Added attribute PromotionCode in RateQualifier: We have added the attribute PromotionCode on the nodes RateQualifier in order to send provider&amp;rsquo;s promotional codes or return the promotional code associated to the rate.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/hotel-push/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/change-log/</guid>
      <description>Version 0.9: Date 12/08/2013
: Initial Release.
|
Version 1.0: Date 04/09/2013
: Added Revision History.
: Added Code List unified.
: Changed HotelRatePlan to HotelRatePlanInventoryRetrieve.
: Added HotelRatePlanRetrieve.
: Added HotelAvailRetrieve.
|
Version 1.0.1: Date 16/09/2013
: Documentation moved to Wiki format.
|
Version 1.0.2: Date 28/09/2013
: Added Typical Exchange Message Scenario section  is not mandatory.
: Added more detailed information above difference in notify rates per guests or per room.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/hotel/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/change-log/</guid>
      <description>Version 1.0.22: Date 09/07/2019
 Addition of the boolean DailyPrices to AvailRS. By default DailyPrices is set to true. When set to true, if the supplier implements daily prices you will receive a list of daily prices for each room in the Avail response for the given date range. If set to false this information will not be included in the response.
 Addition of the boolean DailyRatePlans to AvailRS. By default DailyRatePlans is set to true.</description>
    </item>
    
    <item>
      <title>Change Log</title>
      <link>/legacy/docs/transfers/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/change-log/</guid>
      <description>Version 1.0: Date 24/09/2013
: First version of the API.
|
Version 2.0: Date 11/09/2014
: Added RetrieveBooking.
|
Version 2.0.1: Date 19/09/2014
: Added description of Common Elements.
: Added description of Availability.
|
Version 2.0.2: Date 22/09/2014
: Added description of RateRule.
: Added description of Book.
|
Version 2.0.3: Date 24/09/2014
: Added description of RetrieveBooking.
: Added description of DestinationsTree.
: Added description of HotelList.</description>
    </item>
    
    <item>
      <title>Change log</title>
      <link>/legacy/docs/hub/change-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hub/change-log/</guid>
      <description>Version 1.0: Date 15/11/2012
: Initial Release.
|
Version 1.0.1: Date 03/12/2013
: Added Full Sample Requests and Responses.
|
Version 1.0.2: Date 05/02/2014
: Added Java Example Code.
|
Version 1.0.3: Date 19/02/2014
: Added PHP Example Code.
|
Version 1.0.4: Date 20/03/2014
: Changing of url&amp;rsquo;s.</description>
    </item>
    
    <item>
      <title>Code Lists</title>
      <link>/legacy/docs/car/methods/code-lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/code-lists/</guid>
      <description> Error Codes    Error Type Error Code Description     Integration 101 SystemException   Provider 102 Provider Known Error   Provider 204 No results found   Provider 207 Incorrect input data   Provider 208 Used CodeContext is not supported by this provider   Timeout 104 Provider Timeout    </description>
    </item>
    
    <item>
      <title>Code Lists</title>
      <link>/legacy/docs/hotel-push/code-lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/code-lists/</guid>
      <description>Error Codes    Error Code Error Description     -1 Validation error   1 POS credentials not found   2 HotelCode or RatePlanList not found   3 Rates not found   4 Incomplete Rate values   6 Incomplete AvailStatusMessage StatusApplicationControl Values   7 Incomplete AdditionalGuestAmount values   8 SellableProduct not found   9 Room not found in SellableProduct    Meal Plan Codes (OTA MPT)    Code Description     1 All inclusive   2 American   3 Bed &amp;amp; breakfast   4 Buffet breakfast   5 Caribbean breakfast   6 Continental breakfast   7 English breakfast   8 European plan   9 Family plan   10 Full board   11 Full breakfast   12 Half board/modified American plan   13 As brochured   14 Room only   15 Self catering   16 Bermuda   17 Dinner bed and breakfast plan   18 Family American   19 Breakfast   20 Modified   255 Full board And Drinks   256 Half board And Drinks   257 All inclusive Premium   258 Gala Dinner    Payment Type Codes    Payment Type Code Description     MerchantPayment The customer pays the client and the client will pay the provider.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/activities/methods/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/common-elements/</guid>
      <description>This node will be in every request and response objects.
The request object contains the supplier&amp;rsquo;s configuration, urls and credentials.
The response object contains the operation status and errors, if any.
Common Elements RQ Example &amp;lt;TicketBaseRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;!-- &amp;lt;agencyCode&amp;gt;test&amp;lt;/agencyCode&amp;gt; --&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;HBA&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;XXX&amp;quot; password = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://testapi.interface-xml.com/appservices/http/FrontendService&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key = &amp;quot;urlFTP&amp;quot; value = &amp;quot;ftp://ftp.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/car/methods/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/common-elements/</guid>
      <description>This node will be in every request and response objects.
The request objects contain the supplier&amp;rsquo;s configuration, urls and credentials.
The response object contains the operation status and errors, if any.
Common Elements RQ Example &amp;lt;CarBaseRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;20000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;xx&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;testUser&amp;quot; password=&amp;quot;testPass&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://xxx&amp;lt;/genericURL&amp;gt; &amp;lt;identificationURL&amp;gt;https://xxx&amp;lt;/identificationURL&amp;gt; &amp;lt;availRateURL&amp;gt;https://xxx&amp;lt;/availRateURL&amp;gt; &amp;lt;rateRuleURL&amp;gt;https://xxx&amp;lt;/rateRuleURL&amp;gt; &amp;lt;vehResURL&amp;gt;https://xxx&amp;lt;/vehResURL&amp;gt; &amp;lt;specificURLs /&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes /&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;ClientConfiguration agency = &amp;quot;agencyName&amp;quot; SellCurrency = &amp;quot;EUR&amp;quot;/&amp;gt; … &amp;lt;/CarBaseRQ&amp;gt;  Common Elements RQ Description    Element Number Type Description     CarBaseRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/hotel/methods/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/common-elements/</guid>
      <description>This node will be in every request and response objects.
The request object contains the supplier&amp;rsquo;s configuration, urls and credentials.
The response object contains the status of the request and any possible errors as well as possible messages from the supplier (if previously requested).
Common Elements RQ Example &amp;lt;HotelBaseRQ&amp;gt; &amp;lt;echoToken&amp;gt;TEST&amp;lt;/echoToken&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;20000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;XXXX&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;optionsQuota&amp;gt;500&amp;lt;/optionsQuota&amp;gt; &amp;lt;ContinuationToken expectedRange = &amp;quot;6000&amp;quot;&amp;gt;&amp;lt;/ContinuationToken&amp;gt; &amp;lt;Configuration&amp;gt; &amp;lt;User&amp;gt;USERXX&amp;lt;/User&amp;gt; &amp;lt;Password&amp;gt;PWXX&amp;lt;/Password&amp;gt; &amp;lt;UrlAvail&amp;gt;www.supplier.com/avail&amp;lt;/UrlAvail&amp;gt; &amp;lt;UrlReservation&amp;gt;www.supplier.com/reservation&amp;lt;/UrlReservation&amp;gt; &amp;lt;UrlValuation&amp;gt;www.supplier.com/valuation&amp;lt;/UrlValuation&amp;gt; &amp;lt;UrlGeneric&amp;gt;www.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/transfers/methods/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/common-elements/</guid>
      <description>This node will be in every request and response objects.
The request objects contains the supplier&amp;rsquo;s configuration, urls and credentials.
The response object contains the operation status and errors if any.
Common Elements RQ Example &amp;lt;TransfersBaseRQ&amp;gt; &amp;lt;echoToken&amp;gt;TEST&amp;lt;/echoToken&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;xxxx&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;xx&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;xxx&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;xxxx&amp;quot; password = &amp;quot;xxxx&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;xxxxx&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key = &amp;quot;xxx&amp;quot; value = &amp;quot;xxx&amp;quot;/&amp;gt; &amp;lt;Attribute key = &amp;quot;xxx&amp;quot; value = &amp;quot;xxx&amp;quot;/&amp;gt; &amp;lt;Attribute key = &amp;quot;xxx&amp;quot; value = &amp;quot;xxx&amp;quot;/&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; … &amp;lt;/TransfersBaseRQ&amp;gt;  Common Elements RQ Description    Element Number Type Description     TransfersBaseRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Common Elements</title>
      <link>/legacy/docs/transportation/ferries/common-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/common-elements/</guid>
      <description>Introduction In every petition there some nodes which will always appear, there for this chapter is dedicated for said nodes.
Request Format The common elements in all of the petitions are: source of the petition, Timeout, the indication if you wish to register the transactions and the provider configuration.
Response Format The response will contain the indication if the function is implemented or not, application errors, if any, the providers traces if requested and the response status.</description>
    </item>
    
    <item>
      <title>Connectivity</title>
      <link>/legacy/docs/hotel-push/connectivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/connectivity/</guid>
      <description>XTG HubPush provides an OTA (OpenTravel Alliance) Web Service which publishes the required methods that allow Channel Managers or Rate Distributors (in advance, Providers) to load hotel product information (Availability / Rates/ Inventory) into extranet clients, normally Online Travel Agencies (in advance, Sellers).
Public Soap WebService Methods:
https://pushprovider.xmltravelgate.com/Service/Hotel/Provider/ProviderGEN.svc?wsdl
The Provider should contact the Seller to get their credentials.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>github contributors Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester.</description>
    </item>
    
    <item>
      <title>CurrencyList</title>
      <link>/legacy/docs/hotel/methods/currencylist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/currencylist/</guid>
      <description>Method Goals This method returns a list of currencies the supplier supports in Avail.
Request Format The request does not require any elements. Empty request.
Response Format The result returns a list of currencies.
CurrencyListRQ Example &amp;lt;CurrencyListRQ&amp;gt; &amp;lt;/CurrencyListRQ&amp;gt;  CurrencyListRQ Description    Element Number Type Description     CurrencyListRQ 1  Root node.    CurrencyListRS Example &amp;lt;CurrencyListRS&amp;gt; &amp;lt;UpgradeUTCDate&amp;gt;2016-10-18T13:18:03+02:00&amp;lt;/UpgradeUTCDate&amp;gt; &amp;lt;Currencies&amp;gt; &amp;lt;Currency&amp;gt; &amp;lt;Code&amp;gt;EUR&amp;lt;/Code&amp;gt; &amp;lt;Name&amp;gt;Euro&amp;lt;/Name&amp;gt; &amp;lt;/Currency&amp;gt; &amp;lt;Currency&amp;gt; &amp;lt;Code&amp;gt;USD&amp;lt;/Code&amp;gt; &amp;lt;Name&amp;gt;Dollar&amp;lt;/Name&amp;gt; &amp;lt;/Currency&amp;gt; &amp;lt;/Currencies&amp;gt; &amp;lt;/CurrencyListRS&amp;gt;  CurrencyListRS Description    Element Number Type Description     CurrencyListRS 1  Root node.</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>/legacy/docs/car/data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/data-structure/</guid>
      <description>This document intends to explain every aspect of its structure and fields.
The integration will have the following methods:
   Method Input Output Required Description Endpoint     OTA_VehAvailRate OTA_VehAvailRateRQ OTA_VehAvailRateRS Yes Makes an availability call Car Booking Endpoint.   OTA_VehRateRule OTA_VehRateRuleRQ OTA_VehRateRuleRS Yes Makes a pre-booking Car Booking Endpoint   OTA_VehRes OTA_VehResRQ OTA_VehResRS Yes Makes a booking Car Booking Endpoint   OTA_VehLocSearch OTA_VehLocSearchRQ OTA_VehLocSearchRS Yes Gets a static offices list Car Batch Endpoint   OTA_VehRetRes OTA_VehRetResRQ OTA_VehRetResRS No Gets booking details Car Booking Endpoint   OTA_VehCancel OTA_VehCancelRQ OTA_VehCancelRS No Cancels a booking Car Booking Endpoint   StaticConfiguration StaticConfigurationRQ StaticConfigurationRS Yes Returns the information related to the configuration of the provider.</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>/legacy/docs/hotel/data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/data-structure/</guid>
      <description>The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields. You can also download the XSD file containing each and every data structures of the API from here
You can read about what changes might and what changes might not cause an error, below:
 Changes that can cause an error:
 Removing a field from XSD. Modifying the type of field or attribute.</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>/legacy/docs/hub/data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hub/data-structure/</guid>
      <description>There is one XML API structure used for all integration services.
The API structure has common elements and inside the body there are specific XML elements depending on the type of integration .
For more detailed information on the specific XML elements inside the requests and response objects, please choose from the API documentations below:
 Hotel API Transportation API Car API Transfers API Tour Activity API  API Methods All API methods support one supplier per transaction except for Availability.</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>/legacy/docs/transfers/data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/data-structure/</guid>
      <description>The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields. The integration will have the following methods:
   Method Input Output Required Description Endpoint     Availability AvailabilityRQ AvailabilityRS Yes Makes an availability search Transfers Booking Endpoint   RateRule RateRuleRQ RateRuleRS Yes Makes a pre-booking Transfers Booking Endpoint   Book BookRQ BookRS Yes Creates a booking Transfers Booking Endpoint   Retrieve Booking Retrieve BookingRQ Retrieve BookingRS No Retrieves Booking details Transfers Booking Endpoint   Cance lBooking Cancel BookingRQ Cancel BookingRS No Cancels a booking Transfers Booking Endpoint   Destinations Tree Destinations TreeRQ Destinations TreeRS Yes Gets a hierarchical list of destinations Transfers Booking Endpoint   HotelList HotelListRQ HotelListRS No Gets a list of the hotels with a basic information Transfers Booking Endpoint   GetRates GetRatesRQ GetRatesRS No Gets a list of the rates with a basic information Transfers Booking Endpoint   GetSupplements Get SupplementsRQ Get SupplementsRS No Gets a list of the supplements with a basic information Transfers Booking Endpoint   GetSupplier RateTransfers Type Getsupplier RateTransfers TypeRQ Getsupplier RateTransfers TypeRS No Gets a list of the types of suppliers transfers rates with a basicinformation Transfers Booking Endpoint   GetSupplier TransfersType GetSupplier TransfersTypeRQ GetSupplier TransfersTypeRS No Gets a list of the suppliers transfers types with a basic information Transfers Booking Endpoint   GetTransfers Types GetTransfers TypesRQ GetTransfers TypesRQ No Gets a list of the transfers types with a basic information Transfers Booking Endpoint   GetVehicles GetVehiclesRQ GetVehiclesRS No Gets a list of the vehicles with a basic information Transfers Booking Endpoint    Each request sent to the service url requires a node called rqXML .</description>
    </item>
    
    <item>
      <title>DescriptiveInfo</title>
      <link>/legacy/docs/hotel/methods/descriptiveinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/descriptiveinfo/</guid>
      <description>Method Goals This method returns the details of a hotel (pictures, descriptions &amp;hellip;) in a given language.
Request Format The request just requires the hotel code and language code (ISO-639-1) - this is specified within the source&amp;ndash;&amp;gt;languageCode).
Response Format The result returns the details of that hotel.
Remarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.
DescriptiveInfoRQ Example &amp;lt;DescriptiveInfoRQ&amp;gt; &amp;lt;Hotel&amp;gt; &amp;lt;Code&amp;gt;524AC&amp;lt;/Code&amp;gt; &amp;lt;/Hotel&amp;gt; &amp;lt;/DescriptiveInfoRQ&amp;gt;  DescriptiveInfoRQ Description    Element Number Type Description     DescriptiveInfoRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>DescriptiveInfoExtended (In development)</title>
      <link>/legacy/docs/hotel/methods/descriptiveinfoextended/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/descriptiveinfoextended/</guid>
      <description>Method Goals This method returns 100% of the hotel information provided by the supplier.
It allows you to map each hotel using your own criteria with the combination of contextItem_ plus data_ so you will have the information (extracted from the supplier&amp;rsquo;s documentation hierachy/fields descriptions) required to do so.
Request Format After entering the hotel code, you can set language filters. We recommend that the first call is done without filters in order to ascertain which languages are provided by the supplier.</description>
    </item>
    
    <item>
      <title>DestinationsTree</title>
      <link>/legacy/docs/transfers/methods/destinationtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/destinationtree/</guid>
      <description>Method Goals This method aims to return all the available destinations for the selected carrier.
Remarks This method should be cached internally and only called once a week and in most cases once a month. The hierarchically structure of the tree is defined by the provider.
DestinationsTreeRQ Example &amp;lt;DestinationsTreeRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;test&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;XXX&amp;quot; password = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;XXX&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt;&amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/DestinationsTreeRQ&amp;gt;  DestinationsTreeRQ Description The request just contains the elements of BaseRQ.</description>
    </item>
    
    <item>
      <title>Emit</title>
      <link>/legacy/docs/transportation/flights/emit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/emit/</guid>
      <description>Method Goals This method aims to issue the tickets.
Request Format The request indicate the booking locator and the issue type (which tickets have to be issued: all, only passengers, only extras).
Response Format The result returns a list of Locators (booking codes). It can be the supplier&amp;rsquo;s or the one sent in the request. It also returns all the charges associated to the booking, the passengers and the tickets issued (if any).</description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>/legacy/docs/transportation/ferries/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/error/</guid>
      <description>Error description    Possible Values Description     102 Supplier Error.   103 Duplicate Booking.   104 Supplier connection error.   105 Generic communication error.   188 Availability product not found.   191 Unknown error or Integration/Application error.   210 Payment card error.   211 Passenger error.   212 Delta price error.   345 Connection timeout.   346 Operation not implemented.</description>
    </item>
    
    <item>
      <title>Example Code</title>
      <link>/legacy/docs/hub/example-codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hub/example-codes/</guid>
      <description>Visual Basic .NET Example Imports System.Net Imports System.ServiceModel.Channels Imports System.Security.Cryptography.X509Certificates Imports System.Net.Security Imports System.ServiceModel Imports ClientWCF.ServiceReferenceHotelInsecure Module ExampleConnectionVB Sub Main() HUB_Call() End Sub Public Sub HUB_Call() Dim timeout As Integer = 20000 &#39;Runtime Setted Dim user As String = &amp;quot;xxx&amp;quot; &#39;Provided by XML Travelgate Dim pass As String = &amp;quot;xxx&amp;quot; &#39;Provided by XML Travelgate &#39;&#39;Conexin por HTTP Dim url As String = &amp;quot;http://hubhotelbatch.xmltravelgate.com/Service/Travel/v2/HotelBatch.svc&amp;quot; Dim binding As Binding binding = CreateBinding(timeout) &#39;&#39;Conexin por HTTPS &#39;Dim url As String = &amp;quot;https://hubhotelbatch.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>/legacy/docs/hotel-push/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/faq/</guid>
      <description>What is standard occupancy?
Standard occupancy is the standard number of adults paxes of the room.
Standard occupancy is used to calculate prices under it:
For example, if the standard occupancy is 2. And it’s loaded&amp;hellip;
&amp;lt;BaseByGuestAmts&amp;gt; &amp;lt;BaseByGuestAmt NumberOfGuests = &amp;quot;2&amp;quot; AmountAfterTax=&amp;quot;100.00&amp;quot;/&amp;gt; &amp;lt;/BaseByGuestAmts&amp;gt;  &amp;hellip; The price of two paxes will be 100, and the price for one pax will be 50.
Standard occupancy is used to calculate prices above it:</description>
    </item>
    
    <item>
      <title>Ferries Data Structure</title>
      <link>/legacy/docs/transportation/ferries/ferriesdatastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/ferriesdatastructure/</guid>
      <description>The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields.
The integration will have the following methods:
   Method Input Output Required Description     Avail AvailabilityRQ AvailabilityRS Yes Makes a availability call   Valuation ValuationRQ ValuationRS Yes Makes a pre-booking   Reservation ReservationRQ ReservationRS Yes Makes a booking   Routes RoutesRQ RoutesRS Yes Gets a static routes list   RetrieveReservation RetrieveReservation RQ RetrieveReservation RS No Gets the details of a single booking   RetrieveReservation List RetrieveReservation ListRQ RetrieveReservation ListRS No Gets a list of bookings   Cancelation CancellationRQ CancellationRS No Cancels a booking    Each request sent to the service url requires a node called rqXML .</description>
    </item>
    
    <item>
      <title>Flights Data Structure</title>
      <link>/legacy/docs/transportation/flights/flightsdatastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/flightsdatastructure/</guid>
      <description>API Structure The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields.
The integration will have the following methods:
   Element Input Output Required Description     Availability AvailabilityRQ AvailabilityRS Yes Return all the available options for a given date and itinerary. It does not filter different classes, times or fares. It will always return all of the results returned by the provider.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>/legacy/docs/hotel/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/faq/</guid>
      <description>How many suppliers can I request in one method?
One supplier per request. The only exception is in Availability, where you can request one or more suppliers.
What is the workflow for hotel reservation?
Our workflow has three mandatory steps: Availability (avail), Valuation and Reservation, always in this order.
How can I identify which supplier is which in Availability method?
By using the field ID in the request. For example:</description>
    </item>
    
    <item>
      <title>Full Body Messages</title>
      <link>/legacy/docs/hotel-push/full-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/full-messages/</guid>
      <description> Full Retrieve Messages Full Notify Messages  </description>
    </item>
    
    <item>
      <title>Full Notify Messages</title>
      <link>/legacy/docs/hotel-push/full-files/full-notif-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/full-files/full-notif-messages/</guid>
      <description>Full HotelRatePlanNotifRQ &amp;lt;s:Envelope xmlns:s = &amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; xmlns:ns = &amp;quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10&amp;quot; xmlns:wsse = &amp;quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&amp;quot; xmlns:ns1 = &amp;quot;http://www.opentravel.org/OTA/2003/05&amp;quot;&amp;gt; &amp;lt;s:Header&amp;gt; &amp;lt;wsse:Security&amp;gt; &amp;lt;wsse:UsernameToken&amp;gt; &amp;lt;wsse:Username&amp;gt;user&amp;lt;/wsse:Username&amp;gt; &amp;lt;wsse:Password&amp;gt;pass&amp;lt;/wsse:Password&amp;gt; &amp;lt;/wsse:UsernameToken&amp;gt; &amp;lt;/wsse:Security&amp;gt; &amp;lt;/s:Header&amp;gt; &amp;lt;s:Body&amp;gt; &amp;lt;ns:HotelRatePlanNotif&amp;gt; &amp;lt;ns:request Version = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;ns1:POS&amp;gt; &amp;lt;ns1:Source&amp;gt; &amp;lt;ns1:RequestorID ID = &amp;quot;ProviderCode&amp;quot;/&amp;gt; &amp;lt;ns1:BookingChannel&amp;gt; &amp;lt;ns1:CompanyName Code = &amp;quot;Clientcode&amp;quot;/&amp;gt; &amp;lt;/ns1:BookingChannel&amp;gt; &amp;lt;/ns1:Source&amp;gt; &amp;lt;/ns1:POS&amp;gt; &amp;lt;ns1:RatePlans HotelCode = &amp;quot;1&amp;quot;&amp;gt; &amp;lt;ns1:RatePlan RatePlanCode = &amp;quot;SRATE&amp;quot; CurrencyCode = &amp;quot;EUR&amp;quot; RatePlanStatusType = &amp;quot;Active&amp;quot;&amp;gt; &amp;lt;ns1:Rates&amp;gt; &amp;lt;ns1:Rate Start = &amp;quot;2014-08-01&amp;quot; End = &amp;quot;2014-08-31&amp;quot;&amp;gt; &amp;lt;ns1:BaseByGuestAmts&amp;gt; &amp;lt;ns1:BaseByGuestAmt Type = &amp;quot;25&amp;quot; AmountAfterTax = &amp;quot;150.</description>
    </item>
    
    <item>
      <title>Full Retrieve Messages</title>
      <link>/legacy/docs/hotel-push/full-files/full-retrieve-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/full-files/full-retrieve-messages/</guid>
      <description>Full HotelRatePlanInventoryRetrieveRQ &amp;lt;s:Envelope xmlns:s = &amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; xmlns:ns = &amp;quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10&amp;quot; xmlns:ns1 = &amp;quot;http://www.opentravel.org/OTA/2003/05&amp;quot; xmlns:wsse = &amp;quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&amp;quot;&amp;gt; &amp;lt;s:Header&amp;gt; &amp;lt;wsse:Security&amp;gt; &amp;lt;wsse:UsernameToken&amp;gt; &amp;lt;wsse:Username&amp;gt;user&amp;lt;/wsse:Username&amp;gt; &amp;lt;wsse:Password&amp;gt;pass&amp;lt;/wsse:Password&amp;gt; &amp;lt;/wsse:UsernameToken&amp;gt; &amp;lt;/wsse:Security&amp;gt; &amp;lt;/s:Header&amp;gt; &amp;lt;s:Body&amp;gt; &amp;lt;ns:HotelRatePlanInventoryRetrieve&amp;gt; &amp;lt;ns:request Version = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;ns1:POS&amp;gt; &amp;lt;ns1:Source&amp;gt; &amp;lt;ns1:RequestorID ID = &amp;quot;ProviderCode&amp;quot;/&amp;gt; &amp;lt;ns1:BookingChannel&amp;gt; &amp;lt;ns1:CompanyName Code = &amp;quot;ClientCode&amp;quot;/&amp;gt; &amp;lt;/ns1:BookingChannel&amp;gt; &amp;lt;ns1:TPA_Extensions&amp;gt; &amp;lt;ns1:Param key = &amp;quot;onlyActive&amp;quot; value = &amp;quot;0&amp;quot;/&amp;gt; &amp;lt;/ns1:TPA_Extensions&amp;gt; &amp;lt;/ns1:Source&amp;gt; &amp;lt;/ns1:POS&amp;gt; &amp;lt;ns1:RatePlans&amp;gt; &amp;lt;ns1:RatePlan&amp;gt; &amp;lt;ns1:HotelRef HotelCode = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;/ns1:RatePlan&amp;gt; &amp;lt;/ns1:RatePlans&amp;gt; &amp;lt;/ns:request&amp;gt; &amp;lt;/ns:HotelRatePlanInventoryRetrieve&amp;gt; &amp;lt;/s:Body&amp;gt; &amp;lt;/s:Envelope&amp;gt;  Full HotelRatePlanInventoryRetrieveRS &amp;lt;s:Envelope xmlns:s = &amp;quot;http://schemas.</description>
    </item>
    
    <item>
      <title>GeographicDestinationTree</title>
      <link>/legacy/docs/hotel/methods/geographicdestinationtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/geographicdestinationtree/</guid>
      <description>Method Goals This method returns the supplier&amp;rsquo;s geographic tree where each node indicates whether the request is accessible from availability, indicated with a parameter with values true or false. The main difference between the methods GeographicalTree and DestinationTree is that GeographicalTree has this boolean parameter.
Request Format The request not requires any element, it is empty.
Response Format The result returns a list of DestinationTree with corresponding sub-destinations.
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.</description>
    </item>
    
    <item>
      <title>GetRates</title>
      <link>/legacy/docs/transfers/methods/getrates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/getrates/</guid>
      <description>Method Goals This method aims to retrieve a list of the rates that can be booked.
Remarks GetRatesRQ Example &amp;lt;GetRatesRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://example.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetRatesRQ&amp;gt;  GetRatesRQ Description The request just contains the elements of BaseRQ.
   Element Number Type Description     GetRatesRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>GetSupplements</title>
      <link>/legacy/docs/transfers/methods/getsupplements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/getsupplements/</guid>
      <description>Method Goals This method aims to retrieve a list of the supplements that can be added to a product.
Remarks GetSupplementsRQ Example &amp;lt;GetSupplementsRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://example.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetSupplementsRQ&amp;gt;  GetSupplementsRQ Description    Element Number Type Description     GetSupplementsRQ 1  Root node.    GetSupplementsRS Example &amp;lt;GetSupplementsRS&amp;gt; &amp;lt;auditData&amp;gt; &amp;lt;timeStamp&amp;gt;2014-10-30T11:31:22.</description>
    </item>
    
    <item>
      <title>GetSupplierRateTransfersTypes</title>
      <link>/legacy/docs/transfers/methods/getsupplierratetransfertypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/getsupplierratetransfertypes/</guid>
      <description>Method Goals This method aims to retrieve a list of the suppliers including their rates.
Remarks GetSupplierRateTransfersTypesRQ Example &amp;lt;GetSupplierRateTransferTypesRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://examples-com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetSupplierRateTransferTypesRQ&amp;gt;  GetSuppliersRateTransfersTypesRQ Description    Element Number Type Description     GetSupplierRateTransfersTypesRQ 1  Root node.    GetSupplierRateTransfersTypesRS Example &amp;lt;GetSupplierRateTransferTypesRS&amp;gt; &amp;lt;auditData&amp;gt; &amp;lt;timeStamp&amp;gt;2014-10-30T11:32:29.8466879+00:00&amp;lt;/timeStamp&amp;gt; &amp;lt;processTimeMilliseconds&amp;gt;0&amp;lt;/processTimeMilliseconds&amp;gt; &amp;lt;/auditData&amp;gt; &amp;lt;operationImplemented&amp;gt;true&amp;lt;/operationImplemented&amp;gt; &amp;lt;Suppliers&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-3&amp;quot;&amp;gt; &amp;lt;Rates&amp;gt; &amp;lt;Rate id = &amp;quot;7&amp;quot; name = &amp;quot;OWShuttle&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;6&amp;quot; name = &amp;quot;RT&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;3&amp;quot; name = &amp;quot;Rate1&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;19&amp;quot; name = &amp;quot;RateAudit&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;13&amp;quot; name = &amp;quot;RateAudit&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;4&amp;quot; name = &amp;quot;Rate2&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;15&amp;quot; name = &amp;quot;Comas Privado 5 - 8 RT&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;11&amp;quot; name = &amp;quot;Comas Privado 13 - 20&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;9&amp;quot; name = &amp;quot;Comas Privado 5 - 8&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;8&amp;quot; name = &amp;quot;Comas Privado 1 - 4&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;16&amp;quot; name = &amp;quot;Comas Privado 9 - 12 RT&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;12&amp;quot; name = &amp;quot;Comas Privado 21 - 31&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;17&amp;quot; name = &amp;quot;Comas Privado 13 - 20 RT&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;14&amp;quot; name = &amp;quot;Comas Privado 1 - 4 RT&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;10&amp;quot; name = &amp;quot;Comas Privado 9 - 12&amp;quot;/&amp;gt; &amp;lt;Rate id = &amp;quot;18&amp;quot; name = &amp;quot;Comas Privado 21 - 31 RT&amp;quot;/&amp;gt; &amp;lt;/Rates&amp;gt; &amp;lt;/Supplier&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-2&amp;quot;/&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-4&amp;quot;/&amp;gt; &amp;lt;/Suppliers&amp;gt; &amp;lt;/GetSupplierRateTransferTypesRS&amp;gt;  GetSupplierRateTransfersTypesRS Description    Element Number Type Description     GetSupplierRateTransfers TypesRS 1  Root node.</description>
    </item>
    
    <item>
      <title>GetSupplierTransferTypes</title>
      <link>/legacy/docs/transfers/methods/getsuppliertransfertypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/getsuppliertransfertypes/</guid>
      <description>Method Goals Remarks GetSupplierTransferTypesRQ Example &amp;lt;GetSupplierTransferTypesRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://example.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetSupplierTransferTypesRQ&amp;gt;  GetSupplierTransferTypesRQ Description    Element Number Type Description     GetSupplierTransferTypesRQ 1  Root node.    GetSupplierTransferTypesRS Example &amp;lt;GetSupplierTransferTypesRS&amp;gt; &amp;lt;auditData&amp;gt; &amp;lt;timeStamp&amp;gt;2014-10-30T11:33:16.7125413+00:00&amp;lt;/timeStamp&amp;gt; &amp;lt;processTimeMilliseconds&amp;gt;0&amp;lt;/processTimeMilliseconds&amp;gt; &amp;lt;/auditData&amp;gt; &amp;lt;operationImplemented&amp;gt;true&amp;lt;/operationImplemented&amp;gt; &amp;lt;Suppliers&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-3&amp;quot;&amp;gt; &amp;lt;TransferTypes&amp;gt; &amp;lt;TransferType id = &amp;quot;2&amp;quot; name = &amp;quot;Compartido - Shuttle&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;16&amp;quot; name = &amp;quot;Privado - 13 - 20 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;17&amp;quot; name = &amp;quot;Privado - 21 - 31 Personas&amp;quot;/&amp;gt; &amp;lt;/TransferTypes&amp;gt; &amp;lt;/Supplier&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-2&amp;quot;&amp;gt; &amp;lt;TransferTypes&amp;gt; &amp;lt;TransferType id = &amp;quot;2&amp;quot; name = &amp;quot;Compartido - Shuttle&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;5&amp;quot; name = &amp;quot;Privado - VIP&amp;quot;/&amp;gt; &amp;lt;/TransferTypes&amp;gt; &amp;lt;/Supplier&amp;gt; &amp;lt;Supplier id = &amp;quot;ext-4&amp;quot;&amp;gt; &amp;lt;TransferTypes&amp;gt; &amp;lt;TransferType id = &amp;quot;15&amp;quot; name = &amp;quot;Privado - 9 - 12 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;16&amp;quot; name = &amp;quot;Privado - 13 - 20 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;17&amp;quot; name = &amp;quot;Privado - 21 - 31 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;13&amp;quot; name = &amp;quot;Privado - 1 - 4 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;14&amp;quot; name = &amp;quot;Privado - 5 - 8 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;5&amp;quot; name = &amp;quot;Privado - VIP&amp;quot;/&amp;gt; &amp;lt;/TransferTypes&amp;gt; &amp;lt;/Supplier&amp;gt; &amp;lt;/Suppliers&amp;gt; &amp;lt;/GetSupplierTransferTypesRS&amp;gt;  GetSupplierTransferTypesRS Description    Element Number Type Description     GetSupplierTransferTypesRS 1  Root node.</description>
    </item>
    
    <item>
      <title>GetTransferTypes</title>
      <link>/legacy/docs/transfers/methods/gettransfertypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/gettransfertypes/</guid>
      <description>Method Goals Remarks GetTransferTypesRQ Example &amp;lt;GetTransferTypesRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://examples.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetTransferTypesRQ&amp;gt;  GetTransferTypesRQ Description    Element Number Type Description     GetTransferTypesRQ 1  Root node.    GetTransferTypesRS Example &amp;lt;GetTransferTypesRS&amp;gt; &amp;lt;auditData&amp;gt; &amp;lt;timeStamp&amp;gt;2014-10-30T11:35:31.1499128+00:00&amp;lt;/timeStamp&amp;gt; &amp;lt;processTimeMilliseconds&amp;gt;0&amp;lt;/processTimeMilliseconds&amp;gt; &amp;lt;/auditData&amp;gt; &amp;lt;operationImplemented&amp;gt;true&amp;lt;/operationImplemented&amp;gt; &amp;lt;TransferTypes&amp;gt; &amp;lt;TransferType id = &amp;quot;15&amp;quot; name = &amp;quot;Privado - 9 - 12 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;3&amp;quot; name = &amp;quot;Compartido - Shuttle Express&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;2&amp;quot; name = &amp;quot;Compartido - Shuttle&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;16&amp;quot; name = &amp;quot;Privado - 13 - 20 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;17&amp;quot; name = &amp;quot;Privado - 21 - 31 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;13&amp;quot; name = &amp;quot;Privado - 1 - 4 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;14&amp;quot; name = &amp;quot;Privado - 5 - 8 Personas&amp;quot;/&amp;gt; &amp;lt;TransferType id = &amp;quot;5&amp;quot; name = &amp;quot;Privado - VIP&amp;quot;/&amp;gt; &amp;lt;/TransferTypes&amp;gt; &amp;lt;/GetTransferTypesRS&amp;gt;  GetTransferTypesRS Description    Element Number Type Description     GetSupplmenetsRS 1  Root node.</description>
    </item>
    
    <item>
      <title>GetVehicles</title>
      <link>/legacy/docs/transfers/methods/getvehicles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/getvehicles/</guid>
      <description>Method Goals This method aims to retrieve a list of the vehicles that operate the transfers.
Remarks GetVehiclesRQ Example &amp;lt;GetVehiclesRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXXXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;&amp;quot; password = &amp;quot;&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://example.com&amp;lt;/UrlGeneric&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes/&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/GetVehiclesRQ&amp;gt;  GetVehiclesRQ Description    Element Number Type Description     GetVehiclesRQ 1  Root node.    GetVehiclesRS Example &amp;lt;GetVehiclesRS&amp;gt; &amp;lt;auditData&amp;gt; &amp;lt;timeStamp&amp;gt;2014-10-30T11:34:03.</description>
    </item>
    
    <item>
      <title>HotelList</title>
      <link>/legacy/docs/hotel/methods/hotellist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/hotellist/</guid>
      <description>Method Goals This method returns a list of hotels with basic information (code, name, address, phone, etc.) for each hotel
Request Format The request does not require any elements. Empty request.
Response Format The result returns a list of Hotel (hotels).
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.
This method may be preloaded in XML Travelgate&amp;rsquo;s system if it takes more than 3 minutes to download.</description>
    </item>
    
    <item>
      <title>HotelList</title>
      <link>/legacy/docs/transfers/methods/hotel-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/hotel-list/</guid>
      <description>Method Goals This method aims to retrieve a list of the hotels that can be used as a destination in the provider&amp;rsquo;s system. The information details is provided by the provider.
Remarks This method should be cached internally and only called once a week and in most cases once a month. The information details is provided by the provider.
HotelListRQ Example &amp;lt;HotelListRQ xmlns:xsd = &amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi = &amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;900000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;test&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;xxxx&amp;quot; password = &amp;quot;xxxxxxx&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;xxxxxxxx&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlBook xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key = &amp;quot;XXX&amp;quot; value = &amp;quot;xxxxxx&amp;quot;/&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/HotelListRQ&amp;gt;  HotelListRQ Description The request just contains the elements of BaseRQ.</description>
    </item>
    
    <item>
      <title>Hub Quotas</title>
      <link>/legacy/docs/hub/quotas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hub/quotas/</guid>
      <description>This section enumerates basic quotas and throttling thresholds in XML Travelgate Hub:
   Quota Name Scope Type Behaviour when exceeded Value     Message size for Http Request System-wide Static Incoming messages will be rejected and an exception will be received by the calling code. 128KB   Request Min. Timeout Milliseconds Travel Operation Static Incoming messages with less timeout will be rejected and an error will be received by the calling code.</description>
    </item>
    
    <item>
      <title>Lists of Data</title>
      <link>/legacy/docs/hotel/methods/listsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/listsdata/</guid>
      <description>Method Goals This paragraph aims to return all of the data lists used in our system: language codes, error codes,currency list, credit cards, nationality and market.
Language Codes    Language Code     English en   Spanish es   Portuguese pt   Italian it   French fr   German de   Brazilian br    Error codes    Code Description     101 System Exception (Exception not controlled or not classified as general exception).</description>
    </item>
    
    <item>
      <title>MarketList</title>
      <link>/legacy/docs/hotel/methods/marketlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/marketlist/</guid>
      <description>Method Goals This method aims to return a list of the available Markets, which will be used in the availability request.
Request Format The request does not require any elements - empty request.
Response Format The result returns a list of Market.
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds. Most suppliers use a standard ISO - 3166_1_alfa_2, but it depends on each individual supplier.</description>
    </item>
    
    <item>
      <title>MealPlanList</title>
      <link>/legacy/docs/hotel/methods/mealplanlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/mealplanlist/</guid>
      <description>Method Goals This method aims to return a list of the available MealPlans, which will be used in the availability response.
Request Format The request does not require any elements - empty request.
Response Format The result returns a list of MealPlan.
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.
If the supplier has more than 100 mealplan codes, or more than 20 codes for one single mealplan, this code will be mapped depending on the supplier.</description>
    </item>
    
    <item>
      <title>Messages</title>
      <link>/legacy/docs/hotel-push/hotelpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/hotelpush/</guid>
      <description>api docs
XML Travelgate Hotel PUSH API Table Of Contents  Change Log Intro Audience Document Goals Connectivity Messages
  Typical Exchange Message Scenario Common Message Structure Retrieve Messages
  Retrieve Static Content
  HotelRatePlanInventoryRetrieve
  HotelRatePlanInventoryRetrieveRQ HotelRatePlanInventoryRetrieveRS     Retrieve Rates
  HotelRatePlanRetrieve
  HotelRatePlanRetrieveRQ HotelRatePlanRetrieveRS     Retrieve Availability
  HotelAvailRetrieve
  HotelAvailRetrieveRQ HotelAvailRetrieveRS     Retrieve Reservations</description>
    </item>
    
    <item>
      <title>MetaData</title>
      <link>/legacy/docs/hotel/methods/metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/metadata/</guid>
      <description>Method Goals This method provides information about the meta data of the supplier so that it can be effectively configured.
Request Format The request does not require any elements - empty request.
Response Format The XML response contains many elements of the supplier&amp;rsquo;s meta data: number of hotels, number of cities and number of areas available, maximum number of roomcandidate, maximum number of paxes in a roomcandidate, release days, minimum stay, list of languages supported &amp;hellip;</description>
    </item>
    
    <item>
      <title>ModifyReservation</title>
      <link>/legacy/docs/hotel/methods/modifyreservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/modifyreservation/</guid>
      <description>Method Goals This message confirms a booking change
Request Format The request requires the valuation returned for ModifyValuationRS
Response Format The XML returned contains a booking confirmation
Remarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.
ModifyReservationRQ Example &amp;lt;ModifyReservationRQ&amp;gt; &amp;lt;OnRequest&amp;gt;false&amp;lt;/OnRequest&amp;gt; &amp;lt;Nationality&amp;gt;ES&amp;lt;/Nationality&amp;gt; &amp;lt;Reservation&amp;gt; &amp;lt;Locators&amp;gt; &amp;lt;Client&amp;gt;5356342&amp;lt;/Client&amp;gt; &amp;lt;Provider&amp;gt;MGNZ12345&amp;lt;/Provider&amp;gt; &amp;lt;/Locators&amp;gt; &amp;lt;Currency&amp;gt;EUR&amp;lt;/Currency&amp;gt; &amp;lt;StartDate&amp;gt;28/01/2014&amp;lt;/StartDate&amp;gt; &amp;lt;EndDate&amp;gt;29/01/2014&amp;lt;/EndDate&amp;gt; &amp;lt;CreationDate&amp;gt;17/01/2014&amp;lt;/CreationDate&amp;gt; &amp;lt;/Reservation&amp;gt; &amp;lt;Modifications&amp;gt; &amp;lt;ModifyMealPlan&amp;gt;&amp;lt;/ModifyMealPlan&amp;gt; &amp;lt;ModifyStartDateAddDays&amp;gt; &amp;lt;StartDate&amp;gt;29/01/2014&amp;lt;/StartDate&amp;gt; &amp;lt;/ModifyStartDateAddDays&amp;gt; &amp;lt;ModifyEndDateAddDays&amp;gt; &amp;lt;EndDate&amp;gt;30/01/2014&amp;lt;/EndDate&amp;gt; &amp;lt;/ModifyEndDateAddDays&amp;gt; &amp;lt;ModifyHolder&amp;gt; &amp;lt;Holder name = &amp;quot;Test11Modify&amp;quot; surname = &amp;quot;TestSur11Modify&amp;quot;/&amp;gt; &amp;lt;/ModifyHolder&amp;gt; &amp;lt;ModifyRoomsAddRooms&amp;gt; &amp;lt;Rooms&amp;gt; &amp;lt;Room code = &amp;quot;506&amp;quot;&amp;gt; &amp;lt;PaxGuests&amp;gt; &amp;lt;PaxGuest age = &amp;quot;30&amp;quot;&amp;gt; &amp;lt;GivenName&amp;gt;name1&amp;lt;/GivenName&amp;gt; &amp;lt;SurName&amp;gt;surname1&amp;lt;/SurName&amp;gt; &amp;lt;/PaxGuest&amp;gt; &amp;lt;PaxGuest age = &amp;quot;30&amp;quot;&amp;gt; &amp;lt;GivenName&amp;gt;name2&amp;lt;/GivenName&amp;gt; &amp;lt;SurName&amp;gt;surname2&amp;lt;/SurName&amp;gt; &amp;lt;/PaxGuest&amp;gt; &amp;lt;/PaxGuests&amp;gt; &amp;lt;/Room&amp;gt; &amp;lt;/Rooms&amp;gt; &amp;lt;/ModifyRoomsAddRooms&amp;gt; &amp;lt;ModifyRoomsRemoveRooms&amp;gt; &amp;lt;Rooms&amp;gt; &amp;lt;Room code = &amp;quot;500&amp;quot;&amp;gt; &amp;lt;Price currency = &amp;quot;EUR&amp;quot; amount = &amp;quot;36.</description>
    </item>
    
    <item>
      <title>ModifyValuation</title>
      <link>/legacy/docs/hotel/methods/modifyvaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/modifyvaluation/</guid>
      <description>Method Goals This message lets you know if it is possible to modify a booking and the proposed new price.
Request Format The request requires the reservation details and the changes you want to make. (As always, please check if the supplier allows for changes in the booking and what these changes are - you can find this info in the StaticConfiguration).
Response Format The XML returned contains a simulation of the new booking.</description>
    </item>
    
    <item>
      <title>Notify Messages</title>
      <link>/legacy/docs/hotel-push/messages-files/notify-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/messages-files/notify-messages/</guid>
      <description>Providers sends data to Sellers (Negotiation is started by Providers).
HotelRatePlanInventoryNotif Provider will send an HotelRatePlanInventoryNotifRQ message to push the Hotel set up information to seller. XTG will process data and response with error code if needed.
HotelRatePlanInventoryNotifRQ &amp;lt;HotelRatePlanInventoryNotif xmlns = &amp;quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10&amp;quot;&amp;gt; &amp;lt;request PrimaryLangID = &amp;quot;ES&amp;quot; Version = &amp;quot;0&amp;quot;&amp;gt; &amp;lt;RatePlans HotelCode = &amp;quot;1&amp;quot; HotelStatusType = &amp;quot;Active&amp;quot; xmlns = &amp;quot;http://www.opentravel.org/OTA/2003/05&amp;quot;&amp;gt; &amp;lt;RatePlan Duration = &amp;quot;0&amp;quot; CurrencyCode = &amp;quot;EUR&amp;quot; RatePlanCode = &amp;quot;BAR&amp;quot; RatePlanStatusType = &amp;quot;Active&amp;quot; RatePlanNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;BookingRules&amp;gt; &amp;lt;BookingRule&amp;gt; &amp;lt;CancelPenalties&amp;gt; &amp;lt;CancelPenalty&amp;gt; &amp;lt;Deadline OffsetTimeUnit = &amp;quot;Day&amp;quot; OffsetUnitMultiplier = &amp;quot;20&amp;quot; OffsetDropTime = &amp;quot;BeforeArrival&amp;quot;/&amp;gt; &amp;lt;AmountPercent NmbrOfNights = &amp;quot;3&amp;quot;/&amp;gt; &amp;lt;/CancelPenalty&amp;gt; &amp;lt;CancelPenalty Start = &amp;quot;2018-03-01&amp;quot; End = &amp;quot;2018-03-06&amp;quot;&amp;gt; &amp;lt;Deadline OffsetTimeUnit = &amp;quot;Day&amp;quot; OffsetUnitMultiplier = &amp;quot;10&amp;quot; OffsetDropTime = &amp;quot;BeforeArrival&amp;quot;/&amp;gt; &amp;lt;AmountPercent Amount = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;/CancelPenalty&amp;gt; &amp;lt;CancelPenalty NonRefundable = &amp;quot;true&amp;quot; Start = &amp;quot;2018-03-13&amp;quot; End = &amp;quot;2018-03-15&amp;quot;/&amp;gt; &amp;lt;/CancelPenalties&amp;gt; &amp;lt;/BookingRule&amp;gt; &amp;lt;BookingRule&amp;gt; &amp;lt;Viewerships&amp;gt; &amp;lt;Viewership&amp;gt; &amp;lt;LocationCodes LocationCodesInclusive = &amp;quot;true&amp;quot;&amp;gt; &amp;lt;LocationCode CountryCode = &amp;quot;ES&amp;quot;/&amp;gt; &amp;lt;/LocationCodes&amp;gt; &amp;lt;/Viewership&amp;gt; &amp;lt;Viewership&amp;gt; &amp;lt;LocationCodes LocationCodesInclusive = &amp;quot;false&amp;quot;/&amp;gt; &amp;lt;/Viewership&amp;gt; &amp;lt;/Viewerships&amp;gt; &amp;lt;/BookingRule&amp;gt; &amp;lt;/BookingRules&amp;gt; &amp;lt;Rates&amp;gt; &amp;lt;Rate&amp;gt; &amp;lt;AdditionalGuestAmounts&amp;gt; &amp;lt;AdditionalGuestAmount AgeQualifyingCode = &amp;quot;8&amp;quot; MaxAge = &amp;quot;12&amp;quot;/&amp;gt; &amp;lt;AdditionalGuestAmount AgeQualifyingCode = &amp;quot;7&amp;quot; MaxAge = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;/AdditionalGuestAmounts&amp;gt; &amp;lt;PaymentPolicies&amp;gt; &amp;lt;GuaranteePayment PaymentCode = &amp;quot;MerchantPayment&amp;quot;/&amp;gt; &amp;lt;GuaranteePayment PaymentCode=&amp;quot;DirectPayment&amp;quot;&amp;gt; &amp;lt;AcceptedPayments&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;VI&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;AX&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;CA&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;DS&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;L&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;EU&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;/AcceptedPayments&amp;gt; &amp;lt;/GuaranteePayment&amp;gt; &amp;lt;GuaranteePayment PaymentCode=&amp;quot;BookingDatePayment&amp;quot;&amp;gt; &amp;lt;AcceptedPayments&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;VI&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;AX&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;CA&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;DS&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;L&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;EU&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;/AcceptedPayments&amp;gt; &amp;lt;/GuaranteePayment&amp;gt; &amp;lt;GuaranteePayment PaymentCode=&amp;quot;ArrivalDatePayment&amp;quot;&amp;gt; &amp;lt;AcceptedPayments&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;VI&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;AX&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;CA&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;DS&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;L&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;AcceptedPayment&amp;gt; &amp;lt;PaymentCard CardCode=&amp;quot;EU&amp;quot; /&amp;gt; &amp;lt;/AcceptedPayment&amp;gt; &amp;lt;/AcceptedPayments&amp;gt; &amp;lt;/GuaranteePayment&amp;gt; &amp;lt;/PaymentPolicies&amp;gt; &amp;lt;MealsIncluded MealPlanCodes = &amp;quot;14&amp;quot;/&amp;gt; &amp;lt;/Rate&amp;gt; &amp;lt;/Rates&amp;gt; &amp;lt;SellableProducts&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;STD&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;2&amp;quot; MaxOccupancy = &amp;quot;2&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;STD&amp;quot; RoomID = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Standard&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;STD&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;2&amp;quot; MaxOccupancy = &amp;quot;2&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;1&amp;quot; MaxOccupancy = &amp;quot;1&amp;quot; AgeQualifyingCode = &amp;quot;7&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;STD&amp;quot; RoomID = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Standard&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;STD&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;1&amp;quot; MaxOccupancy = &amp;quot;1&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;1&amp;quot; MaxOccupancy = &amp;quot;1&amp;quot; AgeQualifyingCode = &amp;quot;8&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;1&amp;quot; MaxOccupancy = &amp;quot;1&amp;quot; AgeQualifyingCode = &amp;quot;7&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;STD&amp;quot; RoomID = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Standard&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;JSUIT&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;1&amp;quot; MaxOccupancy = &amp;quot;1&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;JSUIT&amp;quot; RoomID = &amp;quot;8&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Junior Suite&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;JSUIT&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;2&amp;quot; MaxOccupancy = &amp;quot;2&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;JSUIT&amp;quot; RoomID = &amp;quot;8&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Junior Suite&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;SellableProduct InvCode = &amp;quot;JSUIT&amp;quot; InvType = &amp;quot;ROOM&amp;quot; InvStatusType = &amp;quot;Active&amp;quot; InvNotifType = &amp;quot;New&amp;quot;&amp;gt; &amp;lt;GuestRoom&amp;gt; &amp;lt;Quantities StandardNumBeds = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;Occupancy MinOccupancy = &amp;quot;3&amp;quot; MaxOccupancy = &amp;quot;3&amp;quot; AgeQualifyingCode = &amp;quot;10&amp;quot;/&amp;gt; &amp;lt;Room RoomTypeCode = &amp;quot;JSUIT&amp;quot; RoomID = &amp;quot;8&amp;quot;/&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;Junior Suite&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/GuestRoom&amp;gt; &amp;lt;/SellableProduct&amp;gt; &amp;lt;/SellableProducts&amp;gt; &amp;lt;Taxes&amp;gt; &amp;lt;Tax Amount = &amp;quot;20&amp;quot; ChargeFrequency = &amp;quot;true&amp;quot;&amp;gt; &amp;lt;TaxDescription&amp;gt; &amp;lt;Text&amp;gt;city&amp;lt;/Text&amp;gt; &amp;lt;/TaxDescription&amp;gt; &amp;lt;/Tax&amp;gt; &amp;lt;/Taxes&amp;gt; &amp;lt;Description&amp;gt; &amp;lt;Text&amp;gt;bb&amp;lt;/Text&amp;gt; &amp;lt;/Description&amp;gt; &amp;lt;/RatePlan&amp;gt; &amp;lt;/RatePlans&amp;gt; &amp;lt;TPA_Extensions xmlns = &amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>OTA VehRetRes (Get Booking Details)</title>
      <link>/legacy/docs/car/methods/valuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/valuation/</guid>
      <description>Method Goals This method aims to retrieve a booking with its full details.
Remarks Some suppliers do not implement this method.
OTA VehRetResRQ Example &amp;lt;OTA_VehRetResRQ&amp;gt; &amp;lt;POS&amp;gt; &amp;lt;Source ISOCountry = &amp;quot;ESP&amp;quot;&amp;gt; &amp;lt;RequestorID Type = &amp;quot;LAN&amp;quot; ID = &amp;quot;es&amp;quot;/&amp;gt; &amp;lt;/Source&amp;gt; &amp;lt;/POS&amp;gt; &amp;lt;VehRetResRQCore&amp;gt; &amp;lt;UniqueID ID = &amp;quot;4564894564&amp;quot; Type = &amp;quot;4&amp;quot;/&amp;gt; &amp;lt;PersonName&amp;gt; &amp;lt;GivenName&amp;gt;TEST&amp;lt;/GivenName&amp;gt; &amp;lt;Surname&amp;gt;TEST&amp;lt;/Surname&amp;gt; &amp;lt;/PersonName&amp;gt; &amp;lt;/VehRetResRQCore&amp;gt; &amp;lt;/OTA_VehRetResRQ&amp;gt;  OTA VehRetResRQ Description The request requires the UniqueID (locator) of the reservation and the name of the customer to identify the reservation and retrieve its information.</description>
    </item>
    
    <item>
      <title>Pre-Booking (Rate Rule)</title>
      <link>/legacy/docs/car/methods/rate-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/rate-rule/</guid>
      <description>Method Goals This method aims to return the total price of the selected VehAvail (option). This VehAvail option must be selected in the previous step (OTA VehAvailRate).
This message allows the partners to know the applied conditions on the chosen car and also shows the breakdown of the applied charges and fees including the final price.
Remarks: Some suppliers do not provide this method. If this is the case, all the info must be returned in OTA VehAvailRate and this method will do a OTA VehAvailRate again filtered by the selected option.</description>
    </item>
    
    <item>
      <title>Price Charging Types</title>
      <link>/legacy/docs/hotel-push/price-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/price-types/</guid>
      <description>Three price charging types are allowed: price per Room, price per Pax and price per Occupancy. When more than one price is charged for the same day, the lowest price will be returned as available price.
 Price per Room  When a price is charged per Room, it means that all occupancies allowed in the room will have the same price. If &amp;ldquo;AdditionalGuestAmount&amp;rdquo; are charged for occupancies over the standard occupancy, they will be applied.</description>
    </item>
    
    <item>
      <title>RateRule (Pre-Booking)</title>
      <link>/legacy/docs/transfers/methods/rate-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/rate-rule/</guid>
      <description>Method Goals This method aims to return price of the SelectedOptions . This options must be selected in the previous step ( Availability ).
This message allows the partners to know the applied conditions on the chosen transfers.
Remarks Some suppliers do not provide this method. If this is the case, our integration will internally call an Availability method and will filter the results in order to refresh the information and produce a RateRuleRS.</description>
    </item>
    
    <item>
      <title>Refund</title>
      <link>/legacy/docs/transportation/flights/refund/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/refund/</guid>
      <description>Method Goals This method aims to refund tickets issued previously.
Request Format The request must indicate the tickets to be refunded, the refund operation desired (informative or process) and the refund type (fare, taxes, etc.).
Response Format The result returns a breakdown with all the amounts of the fare that will be refunded (Info) or that has been refunded (Process). The result returns also the tickets refunded (same ones of the request, only with the status updated), and it may return also a list of booking locators.</description>
    </item>
    
    <item>
      <title>Reservation</title>
      <link>/legacy/docs/activities/methods/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/reservation/</guid>
      <description>ReservationRQ Example &amp;lt;OTA_TourActivityBookRQ xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; PrimaryLangID=&amp;quot;es&amp;quot;&amp;gt; &amp;lt;ContactDetail&amp;gt; &amp;lt;BirthDate&amp;gt;1984-02-19T00:00:00&amp;lt;/BirthDate&amp;gt; &amp;lt;PersonName&amp;gt; &amp;lt;GivenName&amp;gt;TestNameClient&amp;lt;/GivenName&amp;gt; &amp;lt;Surname&amp;gt;TestApClient&amp;lt;/Surname&amp;gt; &amp;lt;/PersonName&amp;gt; &amp;lt;/ContactDetail&amp;gt; &amp;lt;BookingInfo&amp;gt; &amp;lt;BasicInfo Name=&amp;quot;Palma Aquarium&amp;quot; TourActivityID=&amp;quot;000200515&amp;quot;/&amp;gt; &amp;lt;Schedule StartPeriod=&amp;quot;2014-02-26T00:00:00&amp;quot; EndPeriod=&amp;quot;2014-02-27T00:00:00&amp;quot;/&amp;gt; &amp;lt;ParticipantInfo&amp;gt; &amp;lt;Individual LeadCustomerInd=&amp;quot;true&amp;quot; age=&amp;quot;30&amp;quot;&amp;gt; &amp;lt;GivenName&amp;gt;TestName1&amp;lt;/GivenName&amp;gt; &amp;lt;Surname&amp;gt;TestAp1&amp;lt;/Surname&amp;gt; &amp;lt;/Individual&amp;gt; &amp;lt;/ParticipantInfo&amp;gt; &amp;lt;Pricing&amp;gt; &amp;lt;Summary Amount=&amp;quot;19.660&amp;quot; CurrencyCode=&amp;quot;EUR&amp;quot;&amp;gt; &amp;lt;PricingType Extension=&amp;quot;PerTotal&amp;quot;&amp;gt;Other_&amp;lt;/PricingType&amp;gt; &amp;lt;/Summary&amp;gt; &amp;lt;ParticipantCategory age=&amp;quot;30&amp;quot;&amp;gt; &amp;lt;QualifierInfo&amp;gt;Adult&amp;lt;/QualifierInfo&amp;gt; &amp;lt;Price Amount=&amp;quot;19.660&amp;quot; CurrencyCode=&amp;quot;EUR&amp;quot;/&amp;gt; &amp;lt;/ParticipantCategory&amp;gt; &amp;lt;/Pricing&amp;gt; &amp;lt;TPA_Extensions&amp;gt; &amp;lt;Confirmation ID=&amp;quot;4791780&amp;quot; type=&amp;quot;CLIENT&amp;quot;/&amp;gt; &amp;lt;!--OpenAvailability =&amp;quot;true&amp;quot; --&amp;gt; &amp;lt;Issue Mandatory=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;!--Attributes mandatory for confirmation. Specific for IMP --&amp;gt; &amp;lt;Attribute key=&amp;quot;idAgrupacion&amp;quot; value=&amp;quot;8181&amp;quot;/&amp;gt; &amp;lt;Attribute key=&amp;quot;idPago&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/TPA_Extensions&amp;gt; &amp;lt;/BookingInfo&amp;gt; &amp;lt;/OTA_TourActivityBookRQ&amp;gt;  ReservationRQ Description    Element Number Type Description     OTA_TourActivityBookRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Reservation</title>
      <link>/legacy/docs/hotel/methods/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/reservation/</guid>
      <description>Method Goals This method aims to book an option.
Request Format The request format works the same way as Valuation but with the list of passengers.
Response Format The result returns the booking locator (booking code), which could be the supplier&amp;rsquo;s own code or the one sent in request.
It also returns all the charges associated with the booking as well as its status.
Remarks 180000 milliseconds is the maximum amount of time permitted in our system before the connection is closed.</description>
    </item>
    
    <item>
      <title>Reservation</title>
      <link>/legacy/docs/transportation/ferries/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/reservation/</guid>
      <description>Method Goals This method aims to book one or more itineraries.
Request Format The request format works the same way as the Valuation request. It can work with one Itinerary or with two.
This request also holds the passengers and payment data.
Response Format The result returns a list of Locator (booking codes). It can be the supplier&amp;rsquo;s or the one sent in the request. It also returns all the charges associated to the booking.</description>
    </item>
    
    <item>
      <title>Reservation</title>
      <link>/legacy/docs/transportation/flights/reservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/reservation/</guid>
      <description>Method Goals This method aims to book one or more Itineraries.
Request Format The request format works the same way as the Valuation request. It can work with one or with two Itineraries. The request will also contain a list of Passengers and the PaymentInfo, such as payment method.
Response Format The result returns a list of Locators (booking codes). It can be the supplier&amp;rsquo;s or the one sent in the request.</description>
    </item>
    
    <item>
      <title>Reservation List</title>
      <link>/legacy/docs/activities/methods/reservation-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/reservation-list/</guid>
      <description>Method Goals This method aims to return all the reservation list of each activity confirm for a given specific date from which you want to search and Date type.
Request Format It is mandatory to pass a date range and a date type. Depends the date type, you obtain different reservation list.
Date types
 ArrivalDate : The arrival date of the reservation. CreateDate : The date the reservation was created.</description>
    </item>
    
    <item>
      <title>Reservation Read</title>
      <link>/legacy/docs/activities/methods/reservation-read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/reservation-read/</guid>
      <description>Method Goals This method aims to consult a reservation
Request Format The request requires the booking code and the name of the customer
Response Format The result returns the new status of the reservation and the possible cost of the consultation.
Remarks Not implemented by all suppliers
ReservationReadRQ Example &amp;lt;OTA_ReadRQ xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; PrimaryLangID=&amp;quot;es&amp;quot;&amp;gt; &amp;lt;UniqueID ID=&amp;quot;1283712#1&amp;quot; Type=&amp;quot;PROVIDER&amp;quot;/&amp;gt; &amp;lt;/OTA_ReadRQ&amp;gt;  ReservationReadRQ Description    Element Number Type Description     OTA_ReadRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>ReservationList</title>
      <link>/legacy/docs/hotel/methods/reservationlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/reservationlist/</guid>
      <description>Method Goals This method aims to return a list of bookings for a given time period being that either booking date or the travelling date.
Request Format The request requires one of the following data depending on provider:
 DateType: indicates the date type: either booking creation date or booking start date Start: the date from End: the date to  Response Format The result returns a list of bookings details, with the same format as ReservationReadRS.</description>
    </item>
    
    <item>
      <title>ReservationRead</title>
      <link>/legacy/docs/hotel/methods/reservationread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/reservationread/</guid>
      <description>Method Goals This method aims to retrieve detailed information about a specific Reservation
Request Format The request requires one of the following data depending on supplier:
 Locators: booking codes (this element contains two elements Client (client&amp;rsquo;s booking code) and Provider (supplier&amp;rsquo;s booking code), one or both will be required depending on the supplier) Currency: the currency code CreationDate: the booking date StardDate: the check-in date EndDate: the check-out date HotelCode: Hotel code  Response Format The result returns the full details of a booking.</description>
    </item>
    
    <item>
      <title>Retrieve Messages</title>
      <link>/legacy/docs/hotel-push/messages-files/retrieve-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/messages-files/retrieve-messages/</guid>
      <description>Providers requests Sellers to retrieve data (Negotiation is started by Providers).
HotelRatePlanInventoryRetrieve Providers will send an HotelRatePlanInventoryRetrieveRQ message to retrieve a list of hotels, rates and rooms and their configurations. XTG will return a list of all active rooms and configurations.
HotelRatePlanInventoryRetrieveRQ &amp;lt;HotelRatePlanInventoryRetrieve&amp;gt; &amp;lt;request PrimaryLangID = &amp;quot;ES&amp;quot;&amp;gt; &amp;lt;POS&amp;gt; &amp;lt;Source&amp;gt; &amp;lt;RequestorID ID = &amp;quot;Provider1&amp;quot;/&amp;gt; &amp;lt;BookingChannel&amp;gt; &amp;lt;CompanyName Code = &amp;quot;ClientTravelAgency1&amp;quot;/&amp;gt; &amp;lt;/BookingChannel&amp;gt; &amp;lt;TPA_Extensions&amp;gt; &amp;lt;Param key = &amp;quot;onlyActive&amp;quot; value = &amp;quot;0&amp;quot;/&amp;gt; &amp;lt;/TPA_Extensions&amp;gt; &amp;lt;/Source&amp;gt; &amp;lt;/POS&amp;gt; &amp;lt;RatePlans&amp;gt; &amp;lt;RatePlan&amp;gt; &amp;lt;HotelRef HotelCode = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;/RatePlan&amp;gt; &amp;lt;/RatePlans&amp;gt; &amp;lt;/request&amp;gt; &amp;lt;/HotelRatePlanInventoryRetrieve&amp;gt;     Element Number Type Description     HotelRatePlan/request 1  Root Node   @PrimaryLangID 1 String ISO Code Language   POS/Source/TPA_Extensions 0.</description>
    </item>
    
    <item>
      <title>RetrieveBooking</title>
      <link>/legacy/docs/transfers/methods/retrieve-booking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transfers/methods/retrieve-booking/</guid>
      <description>Method Goals This method aims to Retrieve Booking details.
RetrieveBookingRQ Example &amp;lt;RetrieveBookingRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;agencyCode&amp;gt;xxxx&amp;lt;/agencyCode&amp;gt; &amp;lt;languageCode&amp;gt;es&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;true&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;Credentials user = &amp;quot;XXX&amp;quot; password = &amp;quot;XXX&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;XXX&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlAvailability xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRateRule xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlRetrieveBooking xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;UrlsSpecific xsi:nil = &amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;Locator id = &amp;quot;XXX&amp;quot; type = &amp;quot;PROVIDER&amp;quot;/&amp;gt; &amp;lt;/RetrieveBookingRQ&amp;gt;  RetrieveBookingRQ Description The request format works the same way as the Book response.</description>
    </item>
    
    <item>
      <title>RetrieveReservation</title>
      <link>/legacy/docs/transportation/ferries/retrievereservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/retrievereservation/</guid>
      <description>Method Goals This method aims to retrieve a booking with its full details.
Request Format The request requires the booking code or locator.
Response Format The response contains the details of a booking.
RetrieveReservationRQ Example &amp;lt;RetrieveReservationRQ xmlns:xsd = &amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi = &amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;Configuration/&amp;gt; &amp;lt;ClientConfiguration/&amp;gt; &amp;lt;Locator&amp;gt;BFRFKVM&amp;lt;/Locator&amp;gt; &amp;lt;/RetrieveReservationRQ&amp;gt;  RetrieveReservationRQ Description    Element Number Type Description     RetrieveReservationRQ 1  Root node.   Locator 1 String Locator.</description>
    </item>
    
    <item>
      <title>RetrieveReservation</title>
      <link>/legacy/docs/transportation/flights/recover-reserve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/recover-reserve/</guid>
      <description>Method Goals This method aims to retrieve a booking with its full details.
Request Format The booking can be retrieved by several methods, such as the locator of the booking, the email associated to it, passenger name/surname or other information relative to the itinerary itself.
Response Format The result returns a list of Itineraries, Passengers, Segments and Booking Locators. It may return also the Payment Info of the booking and the information the client had provided to the provider, such as direction, phone number, etc.</description>
    </item>
    
    <item>
      <title>RetrieveReservationList</title>
      <link>/legacy/docs/transportation/ferries/retrievereservationlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/retrievereservationlist/</guid>
      <description>Method Goals This method aims to return a list of bookings for a given time period being that either booking date or the travelling date.
Request Format The request requires a date (of reservation or departure) and all the bookings that match this date will be returned.
Response Format The response contains a list of bookings that match the requested date.
RetrieveReservationListRQ Example &amp;lt;RetrieveReservationListRQ&amp;gt; &amp;lt;Configuration/&amp;gt; &amp;lt;ClientConfiguration currencyCode = &amp;quot;EUR&amp;quot;/&amp;gt; &amp;lt;ReservationDate&amp;gt;2014-03-04T00:00:00&amp;lt;/ReservationDate&amp;gt; &amp;lt;DepartureDate&amp;gt;2010-09-09T00:00:00&amp;lt;/DepartureDate&amp;gt; &amp;lt;ClientEmail&amp;gt;client@clientmail.</description>
    </item>
    
    <item>
      <title>RetrieveReservationList</title>
      <link>/legacy/docs/transportation/flights/recover-reserve-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/recover-reserve-list/</guid>
      <description>Method Goals This method aims to return a list of bookings for a given time period being that either booking date or the travelling date, among other filters available.
Request Format The filter can be set between two time periods, search by email, origin, destination, agency, passenger name/surname, etc.
Response Format The result return a briefing of the basic information of the bookings that match the query&amp;rsquo;s filters.
Remarks Not implemented by all suppliers</description>
    </item>
    
    <item>
      <title>RoomList</title>
      <link>/legacy/docs/hotel/methods/roomlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/roomlist/</guid>
      <description>Method Goals This method aims to return a list of rooms, their codes as well as descriptions.
Request Format The request does not require any elements - empty request.
Response Format The result returns a list of RoomInfo.
Remarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.
This message must be implemented solely in case the supplier does not return room description in Avail.</description>
    </item>
    
    <item>
      <title>Routes</title>
      <link>/legacy/docs/transportation/ferries/routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/routes/</guid>
      <description>Method Goals This method aims to return all the available routes for the selected carrier.
Request Format This request does not require any parameters.
Response Format The result returns a list of Route with the corresponding time frame in which this route is valid.
Remarks This method should be cached internally and only called once a week and in most cases once a month.
RoutesRQ Example &amp;lt;RoutesRQ&amp;gt; &amp;lt;/RoutesRQ&amp;gt;  RoutesRQ Description    Element Number Type Description     RoutesRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Routes</title>
      <link>/legacy/docs/transportation/flights/routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/routes/</guid>
      <description>Method Goals This method aims to get the availability of routes of a supplier.
Request Format In the request, it can be set an origin location, so the response would include only the routes which start with this origin, and an airline filtering.
Response Format The result returns a list of locations and for each one, a destination tree.
Remarks Not implemented by all suppliers. Some suppliers will return dates information for each destination tree.</description>
    </item>
    
    <item>
      <title>Routes (Offices)</title>
      <link>/legacy/docs/car/methods/routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/routes/</guid>
      <description>Method Goals This method aims to return all the available offices for the selected carrier.
Remarks This method should be cached internally and only called once a week and in most cases once a month.
OTA VehLocSearchRQ Example &amp;lt;OTA_VehLocSearchRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;999999&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;CT&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;1234&amp;quot; password=&amp;quot;&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://otatest.cartrawler.com:20000/cartrawlerota&amp;lt;/genericURL&amp;gt; &amp;lt;identificationURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;availRateURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;rateRuleURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;vehResURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;specificURLs&amp;gt; &amp;lt;Attribute key=&amp;quot;URL_OFICINAS&amp;quot; value=&amp;quot;https://ota.cartrawler.com/cartrawlerota/files/static/ctlocation.EN.xml&amp;quot; /&amp;gt; &amp;lt;/specificURLs&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;ISOCurrency&amp;quot; value=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;Attribute key=&amp;quot;ConsumerIP&amp;quot; value=&amp;quot;95.</description>
    </item>
    
    <item>
      <title>Run Time Configuration</title>
      <link>/legacy/docs/activities/methods/runtimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/runtimeconfiguration/</guid>
      <description>Method Goals This method returns a list of Attributes that should be included in each request for the selected provider.
Request Format The request only requires the provider code.
Response Format The response contains a list of Attributes.
RunTimeConfigurationRQ Example &amp;lt;RunTimeConfigurationRQ xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;60000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration codeProvider=&amp;quot;HBA&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;TRAVELTNETES41375&amp;quot; password=&amp;quot;TRAVELTNETES41375&amp;quot;&amp;gt; &amp;lt;UrlGeneric&amp;gt;http://testapi.interface-xml.com/appservices/http/FrontendService&amp;lt;/UrlGeneric&amp;gt; &amp;lt;UrlIdentification xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;UrlAvailability xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;UrlBook xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;UrlsSpecific xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;destinationId&amp;quot; value=&amp;quot;http://xtghubstatic.</description>
    </item>
    
    <item>
      <title>Run Time Configuration</title>
      <link>/legacy/docs/car/methods/runtimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/runtimeconfiguration/</guid>
      <description>Method Goals This method returns a list of &amp;ldquo;atributos&amp;rdquo; that should be included in each request for the selected provider.
Request Format The request only requires the provider code.
Response Format The response contains a list of &amp;ldquo;attribute&amp;rdquo;.
RunTimeConfigurationRQ Example &amp;lt;RunTimeConfigurationRQ xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;999999&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;AVI&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;1234&amp;quot; password=&amp;quot;&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://qaservices.carrental.com/wsbang/HTTPSOAPRouter/ws9071&amp;lt;/UrlGenerica&amp;gt; &amp;lt;identificationURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;availRateURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;rateRuleURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;vehResURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;specificURLs xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;ClientConfiguration agency=&amp;quot;testAgency&amp;quot; SellCurrency=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;/RunTimeConfigurationRQ&amp;gt;  RunTimeConfiguration Description RunTimeConfigurationRS Example &amp;lt;RunTimeConfigurationRS xmlns:xsd=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>RuntimeConfiguration</title>
      <link>/legacy/docs/hotel/methods/runtimeconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/runtimeconfiguration/</guid>
      <description>Method Goals This message returns a template of the supplier&amp;rsquo;s configuration.
Request Format The request does not require any elements, it is an empty request.
Response Format The returned XML contains a template of all fields used by the supplier.
RuntimeConfigurationRQ Example &amp;lt;RuntimeConfigurationRQ&amp;gt; &amp;lt;/RuntimeConfigurationRQ&amp;gt;  RuntimeConfigurationRQ Description    Element Number Type Description     RuntimeConfigurationRQ 1  Root node.    RuntimeConfigurationRS Example &amp;lt;RuntimeConfigurationRS&amp;gt; &amp;lt;Configuration&amp;gt; &amp;lt;User/&amp;gt; &amp;lt;Password/&amp;gt; &amp;lt;UrlGeneric/&amp;gt; &amp;lt;Parameters&amp;gt; &amp;lt;Parameter key = &amp;quot;agencia&amp;quot; value = &amp;quot;&amp;quot;/&amp;gt; &amp;lt;/Parameters&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;/RuntimeConfigurationRS&amp;gt;  ConfiguracionRunTimeRS Description    Element Number Type Description     RuntimeConfigurationRS 1  Root node.</description>
    </item>
    
    <item>
      <title>SOAP Examples</title>
      <link>/legacy/docs/hotel/soap-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/soap-examples/</guid>
      <description>Avail &amp;lt;soapenv:Envelope xmlns:soapenv = &amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; xmlns:ns = &amp;quot;http://schemas.xmltravelgate.com/hub/2012/06&amp;quot; xmlns:wsse = &amp;quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&amp;quot;&amp;gt; &amp;lt;soapenv:Header&amp;gt; &amp;lt;wsse:Security&amp;gt; &amp;lt;wsse:UsernameToken&amp;gt; &amp;lt;wsse:Username&amp;gt;XXXXXX&amp;lt;/wsse:Username&amp;gt; &amp;lt;wsse:Password&amp;gt;XXXXXX&amp;lt;/wsse:Password&amp;gt; &amp;lt;/wsse:UsernameToken&amp;gt; &amp;lt;/wsse:Security&amp;gt; &amp;lt;/soapenv:Header&amp;gt; &amp;lt;soapenv:Body&amp;gt; &amp;lt;ns:Avail&amp;gt; &amp;lt;ns:availRQ&amp;gt; &amp;lt;ns:timeoutMilliseconds&amp;gt;18000&amp;lt;/ns:timeoutMilliseconds&amp;gt; &amp;lt;ns:version&amp;gt;1&amp;lt;/ns:version&amp;gt; &amp;lt;ns:providerRQs&amp;gt; &amp;lt;ns:ProviderRQ&amp;gt; &amp;lt;ns:code&amp;gt;XXX&amp;lt;/ns:code&amp;gt; &amp;lt;ns:id&amp;gt;1&amp;lt;/ns:id&amp;gt; &amp;lt;ns:rqXML&amp;gt; &amp;lt;AvailRQ&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;99999&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;source&amp;gt; &amp;lt;languageCode&amp;gt;en&amp;lt;/languageCode&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration&amp;gt; &amp;lt;User&amp;gt;&amp;lt;/User&amp;gt; &amp;lt;Password&amp;gt;&amp;lt;/Password&amp;gt; &amp;lt;UrlAvail&amp;gt;http://www.test.net/test_XML_V10.php?&amp;lt;/UrlAvail&amp;gt; &amp;lt;UrlReservation&amp;gt;http://www.test.net/scr/reservation_xml.php&amp;lt;/UrlReservation&amp;gt; &amp;lt;Parameters&amp;gt; &amp;lt;Parameter key = &amp;quot;UrlListHoteles&amp;quot; value = &amp;quot;http://www.test.net/scr/searchxml/location.php?&amp;quot;&amp;gt;&amp;lt;/Parameter&amp;gt; &amp;lt;Parameter key = &amp;quot;UrlConsulta&amp;quot; value = &amp;quot;https://www.test.net/scr/xml/travelgate.php?&amp;quot;&amp;gt;&amp;lt;/Parameter&amp;gt; &amp;lt;Parameter key = &amp;quot;office&amp;quot; value = &amp;quot;55555&amp;quot;&amp;gt;&amp;lt;/Parameter&amp;gt; &amp;lt;Parameter key = &amp;quot;password&amp;quot; value = &amp;quot;XXXXXX&amp;quot;&amp;gt;&amp;lt;/Parameter&amp;gt; &amp;lt;/Parameters&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;AvailDestinations&amp;gt; &amp;lt;Destination type = &amp;quot;CTY&amp;quot; code = &amp;quot;XXX&amp;quot;/&amp;gt; &amp;lt;/AvailDestinations&amp;gt; &amp;lt;StartDate&amp;gt;08/08/2012&amp;lt;/StartDate&amp;gt; &amp;lt;EndDate&amp;gt;12/12/2012&amp;lt;/EndDate&amp;gt; &amp;lt;Currency&amp;gt;EUR&amp;lt;/Currency&amp;gt; &amp;lt;RoomCandidates&amp;gt; &amp;lt;RoomCandidate id = &amp;quot;1&amp;quot;&amp;gt; &amp;lt;Paxes&amp;gt; &amp;lt;Pax age = &amp;quot;30&amp;quot; id = &amp;quot;1&amp;quot;/&amp;gt; &amp;lt;Pax age = &amp;quot;30&amp;quot; id = &amp;quot;2&amp;quot;/&amp;gt; &amp;lt;/Paxes&amp;gt; &amp;lt;/RoomCandidate&amp;gt; &amp;lt;/RoomCandidates&amp;gt; &amp;lt;/AvailRQ&amp;gt; &amp;lt;/ns:rqXML&amp;gt; &amp;lt;/ns:ProviderRQ&amp;gt; &amp;lt;/ns:providerRQs&amp;gt; &amp;lt;/ns:availRQ&amp;gt; &amp;lt;/ns:Avail&amp;gt; &amp;lt;/soapenv:Body&amp;gt; &amp;lt;/soapenv:Envelope&amp;gt;  Multi Avail &amp;lt;soapenv:Envelope xmlns:soapenv = &amp;quot;http://schemas.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/legacy/docs/activities/methods/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/search/</guid>
      <description>Method Goals This method aims to return all the activities planned on a future. Sometimes the response size is very large, so a Search Criteria must be applied.
Request Format It is not necessary to specify anything as long as usually the provider
Response Format The response contains information of each activity that provider return.
SearchRQ Example &amp;lt;OTA_TourActivitySearchRQ xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; PrimaryLangID = &amp;quot;es&amp;quot;&amp;gt; &amp;lt;!-- Node for Country/Region filter --&amp;gt; &amp;lt;SearchCriteria&amp;gt; &amp;lt;CountryCode&amp;gt;ES&amp;lt;/CountryCode&amp;gt; &amp;lt;/SearchCriteria&amp;gt; &amp;lt;/OTA_TourActivitySearchRQ&amp;gt;  SearchRQ Description    Element Number Type Description     OTA_TourActivitySearchRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Static Configuration</title>
      <link>/legacy/docs/activities/methods/static-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/static-configuration/</guid>
      <description>Method Goals This method returns important information about the behaviour of the integration (specific provider).
Request Format The request only requires the provider code and credentials.
Response Format The response contains a list of basic information about the limitations of the integration / provider.
OpenAvailability    Type Description     false Need to specify passengers in avail request. In response, provider returns price of option that you specify.</description>
    </item>
    
    <item>
      <title>Static Configuration</title>
      <link>/legacy/docs/car/methods/static-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/car/methods/static-configuration/</guid>
      <description>Method Goals This method returns important information about the behavior of the integration.
Request Format The request only requires the provider code.
Response Format The response contains a list of parameters that will inform how to configure the integration.
StaticConfigurationRQ Example &amp;lt;StaticConfigurationRQ xmlns:xsd = &amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi = &amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;999999&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;filterAuditData&amp;gt; &amp;lt;registerTransactions&amp;gt;false&amp;lt;/registerTransactions&amp;gt; &amp;lt;/filterAuditData&amp;gt; &amp;lt;Configuration ProviderCode=&amp;quot;AVI&amp;quot;&amp;gt; &amp;lt;Credentials user=&amp;quot;testuser&amp;quot; password=&amp;quot;testpass&amp;quot;&amp;gt; &amp;lt;genericURL&amp;gt;https://testURL&amp;lt;/genericURL&amp;gt; &amp;lt;identificationURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;availRateURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;rateRuleURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;vehResURL xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;specificURLs xsi:nil=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;/Credentials&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;RateCategory&amp;quot; value=&amp;quot;2&amp;quot; /&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/Configuration&amp;gt; &amp;lt;ClientConfiguration agency=&amp;quot;testAgency&amp;quot; SellCurrency=&amp;quot;EUR&amp;quot; /&amp;gt; &amp;lt;/StaticConfigurationRQ&amp;gt;  StaticConfigurationRQ Description StaticConfigurationRS Example &amp;lt;StaticConfigurationRS xmlns:xsd = &amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>StaticConfiguration</title>
      <link>/legacy/docs/hotel/methods/staticconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/staticconfiguration/</guid>
      <description>Method Goals This method provides information about the static configuration of the supplier so that it can be effectively configured.
Request Format The request does not require any elements - empty request.
Response Format The XML response contains many elements of the supplier&amp;rsquo;s configuration: number of hotels, number of cities and number of areas available, maximum number of roomcandidate, maximum number of paxes in a roomcandidate, release days, minimum stay, list of languages supported &amp;hellip;</description>
    </item>
    
    <item>
      <title>Supplements</title>
      <link>/legacy/docs/transportation/flights/supplements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/supplements/</guid>
      <description>Method Goals This method aims to get the available supplements and their price information (before or after a reservation has been done).
Request Format The Supplements request can be done by two different ways: with a group of Itineraries (before a reservation) or with a booking locator (after a reservation).
Response Format The result returns a list of the available supplements (seats, baggage, fare rules, payment methods, etc.)
Remarks Not implemented by all suppliers</description>
    </item>
    
    <item>
      <title>SupplementsReservation</title>
      <link>/legacy/docs/transportation/flights/supplementsreservation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/supplementsreservation/</guid>
      <description>Method Goals This method aims to add supplements (seats, baggage, etc) to a reservation done previously.
Request Format Must contain the Itineraries returned in SupplementsRS and any of the possible ways to retrieve the provider booking (by locator, by email, etc.)
Response Format The result returns an invoice with all the supplement charges.
Remarks Not implemented by all suppliers
SupplementsReservationRQ Description    Element Number Type Description     SupplementsReservationRQ 1  Root node.</description>
    </item>
    
    <item>
      <title>Territories</title>
      <link>/legacy/docs/activities/methods/territories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/territories/</guid>
      <description>Method Goals This method returns all the Territories.
Request Format The request only requires the provider code and credentials.
Response Format The response contains a list of territories.
GetTerritoriesRS Example &amp;lt;GetTerritoriesRQ xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;timeoutMilliseconds&amp;gt;240000&amp;lt;/timeoutMilliseconds&amp;gt; &amp;lt;/GetTerritoriesRQ&amp;gt;  GetTerritoriesRQ Description    Element Number Type Description     GetTerritoriesRQ 1  Root node.    GetTerritoriesRS Example &amp;lt;GetTerritoriesRS xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;Territories&amp;gt; &amp;lt;Territory id=&amp;quot;0&amp;quot; name=&amp;quot;España&amp;quot; type=&amp;quot;Country&amp;quot;/&amp;gt; &amp;lt;Territory id=&amp;quot;1&amp;quot; name=&amp;quot;Francia&amp;quot; type=&amp;quot;Country&amp;quot;/&amp;gt; &amp;lt;Territory id=&amp;quot;10&amp;quot; name=&amp;quot;Palma&amp;quot; type=&amp;quot;Region&amp;quot; parentId=&amp;quot;0&amp;quot;/&amp;gt; &amp;lt;/GetTerritoriesRS&amp;gt;  GetTerritoriesRS Description    Element Number Type Description     Territories 0.</description>
    </item>
    
    <item>
      <title>Typical Exchange Message Scenario</title>
      <link>/legacy/docs/hotel-push/messages-files/typical-scenario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/messages-files/typical-scenario/</guid>
      <description>Typical use case of message exchange flow between Providers and Sellers can be resumed as:
 Synchronize Hotelier product:
  Providers retrieve static inventory (Hotel/Rates/Rooms) from Seller using HotelRatePlanInventoryRetrieve in order to map Hotelier inventory into their system. Providers Push/Notif Rate information to Seller using HotelRatePlanNotif in order to synchronize Hotelier rates. Providers Push/Notif Availability information to Seller using HotelAvailNotif in order to synchronize Hotelier availability.   Synchronize Bookings (Confirmations / Cancellations):</description>
    </item>
    
    <item>
      <title>Valuation</title>
      <link>/legacy/docs/activities/methods/valuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/activities/methods/valuation/</guid>
      <description>ValuationRQ Example &amp;lt;OTA_TourActivityBookRQ xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; PrimaryLangID=&amp;quot;es&amp;quot;&amp;gt; &amp;lt;BookingInfo&amp;gt; &amp;lt;BasicInfo Name=&amp;quot;Caldea - Centro Termolúdico&amp;quot; TourActivityID=&amp;quot;E-D01-CALDEA&amp;quot;/&amp;gt; &amp;lt;Location LocationId=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;Position Latitude=&amp;quot;42.511595&amp;quot; Longitude=&amp;quot;1.537232&amp;quot;/&amp;gt; &amp;lt;Address&amp;gt; &amp;lt;AddressLine&amp;gt;Parc de la Mola, 10&amp;lt;/AddressLine&amp;gt; &amp;lt;CityName&amp;gt;ESCALDES&amp;lt;/CityName&amp;gt; &amp;lt;County&amp;gt;Andorra&amp;lt;/County&amp;gt; &amp;lt;/Address&amp;gt; &amp;lt;/Location&amp;gt; &amp;lt;Schedule StartPeriod=&amp;quot;2018-08-21T00:00:00&amp;quot; EndPeriod=&amp;quot;2018-08-22T00:00:00&amp;quot;&amp;gt; &amp;lt;Detail id=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;OperationTimes&amp;gt; &amp;lt;OperationTime Start=&amp;quot;2018-08-21T00:00:00&amp;quot; End=&amp;quot;2018-08-21T00:00:00&amp;quot;/&amp;gt; &amp;lt;/OperationTimes&amp;gt; &amp;lt;TPA_Extensions&amp;gt; &amp;lt;Attributes&amp;gt; &amp;lt;Attribute key=&amp;quot;ActivityType&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;Attribute key=&amp;quot;ActivityRateKey&amp;quot; value=&amp;quot;4cibvn26c7f80ro75k5d8fv8dq&amp;quot;/&amp;gt; &amp;lt;Attribute key=&amp;quot;ModalityName&amp;quot; value=&amp;quot;EG00001 Entrada general 3 Horas&amp;quot;/&amp;gt; &amp;lt;Attribute key=&amp;quot;ModalityCode&amp;quot; value=&amp;quot;GENERAL@STANDARD||&amp;quot;/&amp;gt; &amp;lt;/Attributes&amp;gt; &amp;lt;/TPA_Extensions&amp;gt; &amp;lt;/Detail&amp;gt; &amp;lt;/Schedule&amp;gt; &amp;lt;ParticipantInfo refId=&amp;quot;0&amp;quot; Condition=&amp;quot;Generic&amp;quot;&amp;gt; &amp;lt;Individual Age=&amp;quot;30&amp;quot;&amp;gt; &amp;lt;NamePrefix&amp;gt;MR&amp;lt;/NamePrefix&amp;gt; &amp;lt;/Individual&amp;gt; &amp;lt;/ParticipantInfo&amp;gt; &amp;lt;ActivityRate RateID=&amp;quot;GENERIC&amp;quot; isNominative=&amp;quot;false&amp;quot; hiddenRate=&amp;quot;false&amp;quot; RateCode=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;Summary Amount=&amp;quot;36.</description>
    </item>
    
    <item>
      <title>Valuation</title>
      <link>/legacy/docs/hotel/methods/valuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel/methods/valuation/</guid>
      <description>Method Goals This method aims to return the total price and cancellation policies of the Option selected in the previous step (Avail).
Request Format The Valuation request format is similar to that of availabilityRQ. It&amp;rsquo;s here you will add data to the option selected.
Response Format The returned XML contains the total price and list of cancellation policies.
Remarks Our system allows for a maximum of 180000 milliseconds before the connection is closed.</description>
    </item>
    
    <item>
      <title>Valuation</title>
      <link>/legacy/docs/transportation/ferries/valuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/ferries/valuation/</guid>
      <description>Method Goals This method aims to do a prebook of the selected Option. This Option must be selected in the previous step ( Availability ).
The Valuation request must be built from results of a single Availability. Mixing OneWay options from different Availability calls do not grant the correct functionability of the Valuation.
Request Format The Valuation request can be done by two different ways: with a single Itinerary or multiple Itineraries.</description>
    </item>
    
    <item>
      <title>Valuation</title>
      <link>/legacy/docs/transportation/flights/valuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/transportation/flights/valuation/</guid>
      <description>Method Goals This method aims to return the total price of the selected Option. This Option must be selected in the previous step ( Availability ).
Request Format The Valuation request can be done by two different ways: with a single Itinerary or multiple Itineraries.
 Multiple Itineraries :  In this method, the request will have as many Itineraries as there are Journeys . Mainly used for one-way tickets.</description>
    </item>
    
    <item>
      <title>messages with OTA xsd structure</title>
      <link>/legacy/docs/hotel-push/messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/docs/hotel-push/messages/</guid>
      <description>List of messages with OTA xsd structure used:
   Method OTA RQ OTA RS Type Description     HotelRatePlan InventoryRetrieve OTA_HotelRatePlanRQ OTA_Hotel RatePlanRS Retrieve Retrieve static information of hotel seller inventory   HotelRatePlan Retrieve OTA_Hote lRatePlanRQ OTA_Hotel RatePlanRS Retrieve Retrieve rates of hotel seller   HotelAvail Retrieve OTA_Hotel AvailGetRQ OTA_Hotel AvailGetRS Retrieve Retrieve availability of hotel seller   HotelRes Retrieve OTA_ReadRQ OTA_HotelResRS Retrieve Retrieve reservations from user seller   HotelRate PlanNotify OTA_Hotel RatePlanNotifRQ OTA_Hotel RatePlanNotifRS Notify Notify rates to hotel seller   HotelAvail Notify OTA_Hotel AvailNotifRQ OTA_Hotel AvailNotifRS Notify Notify availability to hotel seller   HotelRes Retrieve OTA_Hotel ResRetrieveRQ OTA_Hotel ResRetrieveRS Retrieve Retrieve reservations from user seller    Contents:</description>
    </item>
    
  </channel>
</rss>