[
{
	"uri": "/mappea/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by APIEdge:    OperationData:    ManagedGroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by APIEdge:    OperationData:    ManagedGroupData:    \n"
},
{
	"uri": "/stats/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by APIEdge:    OperationData:    ManagedGroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupData:    APIEdge:    OperationData:    \n"
},
{
	"uri": "/mappea/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:    \n"
},
{
	"uri": "/stats/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    ResourceData:    ProductData:    \n"
},
{
	"uri": "/mappea/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): API Code  id(ID!): API ID  isEditable(Boolean!): Is API Editable or not.  label(String): API label  groups(GroupConnection): which groups are asigned this API?  resources(ResourceConnection): which resources are asigned this API?  operations(OperationConnection): which operations are asigned this API?  \nRequired by API:    \n"
},
{
	"uri": "/paymentx/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): API Code  id(ID!): API ID  isEditable(Boolean!): Is API Editable or not.  label(String): API label  groups(GroupConnection): which groups are asigned this API?  resources(ResourceConnection): which resources are asigned this API?  operations(OperationConnection): which operations are asigned this API?  \nRequired by API:    \n"
},
{
	"uri": "/stats/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): API Code  id(ID!): API ID  isEditable(Boolean!): Is API Editable or not.  label(String): API label  groups(GroupConnection): which groups are asigned this API?  resources(ResourceConnection): which resources are asigned this API?  operations(OperationConnection): which operations are asigned this API?  \nRequired by API:    \n"
},
{
	"uri": "/travelgatex/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): API Code  id(ID!): API ID  isEditable(Boolean!): Is API Editable or not.  label(String): API label  groups(GroupConnection): which groups are asigned this API?  resources(ResourceConnection): which resources are asigned this API?  operations(OperationConnection): which operations are asigned this API?  \nRequired by API:    \n"
},
{
	"uri": "/mappea/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):   \nRequired by APIConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):   \nRequired by APIConnection:    \n"
},
{
	"uri": "/stats/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):   \nRequired by APIConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):   \nRequired by APIConnection:    \n"
},
{
	"uri": "/mappea/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access the system of a Supplier.\nGraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessEdge:    AccessData:    \n"
},
{
	"uri": "/paymentx/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access the system of a Supplier.\nGraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessEdge:    AccessData:    \n"
},
{
	"uri": "/stats/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access the system of a Supplier.\nGraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by StatsData:    AccessData:    AccessEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access the system of a Supplier.\nGraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessEdge:    AccessData:    StatsData:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/mappea/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   \nRequired by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   \nRequired by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  SupplierData:    OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/mappea/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access descriptive name  isActive(Boolean!): Indicates if Access is active  code(ID!): Unique AccessConfiguration identifier  supplier(Supplier!): Supplier for this Access  isTest(Boolean!): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(Urls): Specific URLs  parameters([Parameter]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(Access): Parent Access if Shared Access  owner(Organization): Access owner  isSchedulerActive(Boolean): True if scheduler is active  groups(GroupConnection): Groups where access belongs  \nRequired by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  \n"
},
{
	"uri": "/paymentx/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access descriptive name  isActive(Boolean!): Indicates if Access is active  code(ID!): Unique AccessConfiguration identifier  supplier(Supplier!): Supplier for this Access  isTest(Boolean!): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(Urls): Specific URLs  parameters([Parameter]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(Access): Parent Access if Shared Access  owner(Organization): Access owner  isSchedulerActive(Boolean): True if scheduler is active  groups(GroupConnection): Groups where access belongs  \nRequired by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  \n"
},
{
	"uri": "/stats/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access descriptive name  isActive(Boolean!): Indicates if Access is active  code(ID!): Unique AccessConfiguration identifier  supplier(Supplier!): Supplier for this Access  isTest(Boolean!): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(Urls): Specific URLs  parameters([Parameter]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(Access): Parent Access if Shared Access  owner(Organization): Access owner  isSchedulerActive(Boolean): True if scheduler is active  groups(GroupConnection): Groups where access belongs  \nRequired by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  \n"
},
{
	"uri": "/travelgatex/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access descriptive name  isActive(Boolean!): Indicates if Access is active  code(ID!): Unique AccessConfiguration identifier  supplier(Supplier!): Supplier for this Access  isTest(Boolean!): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(Urls): Specific URLs  parameters([Parameter]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(Access): Parent Access if Shared Access  owner(Organization): Access owner  isSchedulerActive(Boolean): True if scheduler is active  groups(GroupConnection): Groups where access belongs  \nRequired by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  \n"
},
{
	"uri": "/mappea/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):   \nRequired by AccessConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):   \nRequired by AccessConnection:    \n"
},
{
	"uri": "/stats/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):   \nRequired by AccessConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):   \nRequired by AccessConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.\nGraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([ID!]): These Access IDs will overwrite the default configuration. Only the IDs on this list will be used in the search query.  excludes([ID!]): These Access IDs will overwrite the default configuration. The IDs on this list will be excluded from the search query.  \nRequired by FilterInput:   Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026#34;deprecated from 2018-08-20. Please, use filterSearch\u0026#34;)  HotelXFilterSearchInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.\nGraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([ID!]): These Access IDs will overwrite the default configuration. Only the IDs on this list will be used in the search query.  excludes([ID!]): These Access IDs will overwrite the default configuration. The IDs on this list will be excluded from the search query.  \nRequired by FilterInput:   Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026#34;deprecated from 2018-08-20. Please, use filterSearch\u0026#34;)  HotelXFilterSearchInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessinput/",
	"title": "AccessInput",
	"tags": [],
	"description": "",
	"content": " Access input\nGraphQL schema definition type AccessInput {  name: String    isActive: Boolean    code: ID    supplier: String    isTest: Boolean    user: String    password: String    urls: UrlsInput    parameters: [ParameterInput]    markets: [String!]    rateRules: [RateRulesType!]    shared: String    group: ID    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String): Access descriptive unique name  isActive(Boolean): Indicates if Access is active  code(ID): Access code.  supplier(String): Supplier for this Access  isTest(Boolean): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(UrlsInput): Specific URLs  parameters([ParameterInput]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(String): Parent Access if Shared Access.  group(ID): Default group where the access will be visible.  owner(ID): Access owner  \n"
},
{
	"uri": "/hotelx/reference/objects/addon/",
	"title": "AddOn",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.  \n"
},
{
	"uri": "/travelgatex/reference/objects/addon/",
	"title": "AddOn",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.  \n"
},
{
	"uri": "/hotelx/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!]): Extra information from the distribution layer  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/travelgatex/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!]): Extra information from the distribution layer  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/travelgatex/reference/objects/adminmutation/",
	"title": "AdminMutation",
	"tags": [],
	"description": "",
	"content": " The admin query root of TravelgateX\u0026rsquo;s for implementing GraphQL mutations.\nGraphQL schema definition type AdminMutation {  createAccess( input: AccessInput!, ): Access    updateAccess( input: AccessInput!, ): Access    grantAccessToGroup( input: GroupInput!, ): Access    deleteAccessFromGroup( input: GroupInput!, ): Access    grantSupplierToGroup( input: GroupInput!, ): Supplier    deleteSupplierFromGroup( input: GroupInput!, ): Supplier    grantClientToGroup( input: GroupInput!, ): Client    deleteClientFromGroup( input: GroupInput!, ): Client    createClient( input: CreateClientInput!, ): Client    updateClient( input: UpdateClientInput!, ): Client    createProfile( input: CreateProfileInput!, ): Profile    updateProfile( input: UpdateProfileInput!, ): Profile    addEntitiesToProfile( input: UpdateEntitiesInput!, ): Profile    removeEntitiesFromProfile( input: UpdateEntitiesInput!, ): Profile    createOrganization( organization: CreateOrganizationInput!, ): Organization!    createMember( member: CreateMemberInput!, ): Member!    createGroup( group: CreateGroupInput!, ): Group!    updateMember( member: UpdateMemberInput!, ): Member!    updateGroup( group: UpdateGroupInput!, method: Method!, ): Group!    deleteMember( member: [DeleteMemberInput!]!, ): Member!    deleteGroup( group: DeleteGroupInput!, ): Group!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createAccess(Access): Creates an Access  updateAccess(Access): Updates an Access  grantAccessToGroup(Access): Grants Access visibility to a group  deleteAccessFromGroup(Access): Removes Access visibility to groups  grantSupplierToGroup(Supplier): Grants Supplier visibility to a group  deleteSupplierFromGroup(Supplier): Removes Supplier visibility to groups  grantClientToGroup(Client): Grants Client visibility to a group.  deleteClientFromGroup(Client): Removes Client visibility to groups.  createClient(Client): Creates a Client.  updateClient(Client): Updates a Client.  createProfile(Profile): Creates a Profile.  updateProfile(Profile): Updates a Profile.  addEntitiesToProfile(Profile): Adds entities to a Profile.  removeEntitiesFromProfile(Profile): Removes entities from a Profile.  createOrganization(Organization!): Create organization. Require an user to be specified as the owner of the group.  createMember(Member!): Create member; requires specific group and role  createGroup(Group!): Create group; group \u0026#34;owner\u0026#34; is optional  updateMember(Member!): Update member additions or remove roles  updateGroup(Group!): Update group additions or remove APIs  deleteMember(Member!): Delete a member from specific group  deleteGroup(Group!): Delete group and members from this group  \nRequired by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server  \n"
},
{
	"uri": "/travelgatex/reference/objects/adminquery/",
	"title": "AdminQuery",
	"tags": [],
	"description": "",
	"content": " The admin query root of TravelgateX\u0026rsquo;s GraphQL interface.\nGraphQL schema definition type AdminQuery {  jwt: JWT    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    serviceApi( filter: ServiceApiFilter, ): ServiceApi    pointsOfSale( filter: PointOfSaleFilter, ): PointOfSaleConnection    profiles( filter: ProfileFilter, ): ProfileConnection    entities( filter: EntityFilter, ): EntityConnection    organizations(    codes: [ID!],     domains: [DomainName!],     first: Int,     last: Int,     before: String,     after: String,     ): OrganizationConnection!    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection!    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection!    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection!    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection!    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields jwt(JWT): Get JSON Web Token (JWT) linked to Member  accesses(AccessConnection): Obtain a list of accesses for a filter  suppliers(SupplierConnection): Obtain all suppliers for a filter.  clients(ClientConnection): Obtain all clients for a filter.  serviceApi(ServiceApi): Obtain a ServiceAPI  pointsOfSale(PointOfSaleConnection): Obtain all Points of Sale for the filters  profiles(ProfileConnection): Obtain all Profiles for the filters  entities(EntityConnection): Obtain a set of entities  organizations(OrganizationConnection!): Organizations list; specify organization codes to filter organizations  products(ProductConnection!): Product catalog; specify products codes to filter   members(MemberConnection!): Members list; specify member codes to filter members.  groups(GroupConnection!): Groups list; specify group codes to filter groups.  apis(APIConnection!): Apis list; specify api codes to filter apis.  resources(ResourceConnection!): Resources list; specify resource codes to filter resources.  roles(RoleConnection!): Roles list; specify role codes to filter roles.  operations(OperationConnection!): Operations list; specify operations codes to filter operations.  \nRequired by Query:  The query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/hotelx/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error  \n"
},
{
	"uri": "/mappea/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error  \n"
},
{
	"uri": "/paymentx/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error  \nRequired by PaymentXQuery:    \n"
},
{
	"uri": "/stats/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error  \n"
},
{
	"uri": "/travelgatex/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error  \nRequired by PaymentXQuery:    \n"
},
{
	"uri": "/hotelx/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/mappea/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/paymentx/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/stats/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/travelgatex/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/hotelx/reference/objects/airport/",
	"title": "Airport",
	"tags": [],
	"description": "",
	"content": " Airport Type\nGraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Airport ID  airportData(AirportData): Airport data  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/travelgatex/reference/objects/airport/",
	"title": "Airport",
	"tags": [],
	"description": "",
	"content": " Airport Type\nGraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Airport ID  airportData(AirportData): Airport data  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/hotelx/reference/objects/airportdata/",
	"title": "AirportData",
	"tags": [],
	"description": "",
	"content": " Information about the airport\nGraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport\u0026#39;s name  location(Location): The airport\u0026#39;s location  \nRequired by Airport:  Airport Type  \n"
},
{
	"uri": "/travelgatex/reference/objects/airportdata/",
	"title": "AirportData",
	"tags": [],
	"description": "",
	"content": " Information about the airport\nGraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Airport Code (IATA)  name(String): The airport\u0026#39;s name  location(Location): The airport\u0026#39;s location  \nRequired by Airport:  Airport Type  \n"
},
{
	"uri": "/hotelx/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\nGraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Code  type(ApplicationAreaType!): Indicates the type of Amenity.  texts([Text!]!): Contains the descriptive  \n"
},
{
	"uri": "/travelgatex/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\nGraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Code  type(ApplicationAreaType!): Indicates the type of Amenity.  texts([Text!]!): Contains the descriptive  \n"
},
{
	"uri": "/hotelx/reference/enums/applicationareatype/",
	"title": "ApplicationAreaType",
	"tags": [],
	"description": "",
	"content": " Indicates where it applies\nGraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.  \n"
},
{
	"uri": "/travelgatex/reference/enums/applicationareatype/",
	"title": "ApplicationAreaType",
	"tags": [],
	"description": "",
	"content": " Indicates where it applies\nGraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.  \n"
},
{
	"uri": "/hotelx/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " Data sent and received in the supplier’s native format.\nGraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!): TimeStamp  processTime(Float!): Process time in milliseconds (ms)  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " Data sent and received in the supplier’s native format.\nGraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!): TimeStamp  processTime(Float!): Process time in milliseconds (ms)  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/hotelx/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " Contains information about a bed.\nGraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not  \n"
},
{
	"uri": "/travelgatex/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " Contains information about a bed.\nGraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not  \n"
},
{
	"uri": "/hotelx/reference/objects/board/",
	"title": "Board",
	"tags": [],
	"description": "",
	"content": " Board type.\nGraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by BoardEdge:  BoardList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/board/",
	"title": "Board",
	"tags": [],
	"description": "",
	"content": " Board type.\nGraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by BoardEdge:  BoardList Edge definition  \n"
},
{
	"uri": "/hotelx/reference/objects/boardconnection/",
	"title": "BoardConnection",
	"tags": [],
	"description": "",
	"content": " BoardList definition\nGraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/boardconnection/",
	"title": "BoardConnection",
	"tags": [],
	"description": "",
	"content": " BoardList definition\nGraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/boarddata/",
	"title": "BoardData",
	"tags": [],
	"description": "",
	"content": " Board data\nGraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  \nRequired by Board:  Board type.  \n"
},
{
	"uri": "/travelgatex/reference/objects/boarddata/",
	"title": "BoardData",
	"tags": [],
	"description": "",
	"content": " Board data\nGraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  \nRequired by Board:  Board type.  \n"
},
{
	"uri": "/hotelx/reference/objects/boardedge/",
	"title": "BoardEdge",
	"tags": [],
	"description": "",
	"content": " BoardList Edge definition\nGraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Board):   cursor(String!):   \nRequired by BoardConnection:  BoardList definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/boardedge/",
	"title": "BoardEdge",
	"tags": [],
	"description": "",
	"content": " BoardList Edge definition\nGraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Board):   cursor(String!):   \nRequired by BoardConnection:  BoardList definition  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " Input BookPax contains basic information abaout pax suach as name, surname and age.\nGraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): The guest\u0026#39;s first name  surname(String!): The guest\u0026#39;s last name  age(Int!): The guest\u0026#39;s age  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " Input BookPax contains basic information abaout pax suach as name, surname and age.\nGraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): The guest\u0026#39;s first name  surname(String!): The guest\u0026#39;s last name  age(Int!): The guest\u0026#39;s age  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " Reference object that contains the client reference and/or supplier reference.\nGraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String): The client\u0026#39;s reference  supplier(String): The Supplier\u0026#39;s reference  \nRequired by HotelCancelInput:  Cancellation Criteria.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " Reference object that contains the client reference and/or supplier reference.\nGraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String): The client\u0026#39;s reference  supplier(String): The Supplier\u0026#39;s reference  \nRequired by HotelCancelInput:  Cancellation Criteria.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " Input BookRoom contains list of pax and the room\u0026rsquo;s reference.\nGraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!): The room\u0026#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " Input BookRoom contains list of pax and the room\u0026rsquo;s reference.\nGraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!): The room\u0026#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room  \n"
},
{
	"uri": "/hotelx/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " Book status\nGraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " Book status\nGraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/hotelx/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key  \n"
},
{
	"uri": "/hotelx/howtos/bookingflow/flow/",
	"title": "Booking flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\n --                                            1. SEARCH  2. QUOTE  3. BOOK                            OptionID  WHERE TO NEXT?   QuoteID  OptionID   ConfirmationID  QuoteID      \nSearch Performs a hotel availability search over 1 or more Seller accesses. Depending Seller, search operations implicit use supplier’s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;search\u0026quot;: { } } } }  PlayGround Samples  search   Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;quote\u0026quot;: { } } } }  PlayGround Samples  quote   Book Performs a book or reservation over an option returned in Quote Response.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;book\u0026quot;: { } } } }  PlayGround Samples  book   Cancellation Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;cancel\u0026quot;: { } } } }  PlayGround Samples  cancel   Booking Performs a seller booking list.\nIn this case you can search the bookings with references or by dates, the dates can be arrival dates or booking dates.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;booking\u0026quot;: { } } } }  PlayGround Samples  booking   "
},
{
	"uri": "/hotelx/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of criteria in the request of the booking list\nGraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of criteria in the request of the booking list\nGraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/hotelx/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields creationDate(Date): Creation date of the booking. Format: YYYY-MM-DD  checkIn(Date): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date): Check-out date for the booking. Format: YYYY-MM-DD  hotelCode(String): Code of the hotel in the context selected.  hotelName(String): Name of the hotel.  boardCode(String): Code of the board in the context selected.  occupancies([Occupancy!]): List of occupancies for the request  rooms([BookingRoom!]): List of rooms.  \nRequired by HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/travelgatex/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields creationDate(Date): Creation date of the booking. Format: YYYY-MM-DD  checkIn(Date): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date): Check-out date for the booking. Format: YYYY-MM-DD  hotelCode(String): Code of the hotel in the context selected.  hotelName(String): Name of the hotel.  boardCode(String): Code of the board in the context selected.  occupancies([Occupancy!]): List of occupancies for the request  rooms([BookingRoom!]): List of rooms.  \nRequired by HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/hotelx/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.  \n"
},
{
	"uri": "/travelgatex/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.  \n"
},
{
	"uri": "/hotelx/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  PageInfo:    HotelData:  Hotel data  DestinationData:  Information about destinantion  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Room:  Contains the room information of the option returned.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  CancelPolicy:  Information about a policy cancellation.  Bed:  Contains information about a bed.  Markup:  Informs markup applied over supplier price.  Priceable:    HotelRuntimeParameter:  template of all fields used by the supplier  HotelXUpdateStatusData:    DeltaPriceInput:  Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.   "
},
{
	"uri": "/mappea/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  PageInfo:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    ClientData:    GroupData:     "
},
{
	"uri": "/paymentx/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by PageInfo:    GroupData:    GroupCommonData:    MemberData:    APIData:    ResourceData:    RoleData:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    ClientData:     "
},
{
	"uri": "/stats/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by PageInfo:    OperationDetailed:  Stats information per operation  AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    GroupData:    ClientData:     "
},
{
	"uri": "/travelgatex/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by SupplierFilter:    ClientFilter:    EntityFilter:    PageInfo:    AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    ClientData:    GroupData:    APIData:    ResourceData:    RoleData:    ProfileData:  Profile data  HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  HotelData:  Hotel data  DestinationData:  Information about destinantion  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Room:  Contains the room information of the option returned.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  CancelPolicy:  Information about a policy cancellation.  Bed:  Contains information about a bed.  Markup:  Informs markup applied over supplier price.  Priceable:    HotelRuntimeParameter:  template of all fields used by the supplier  OperationDetailed:  Stats information per operation  AccessInput:  Access input  CreateClientInput:    UpdateClientInput:    CreateProfileInput:    UpdateProfileInput:    HotelXUpdateStatusData:    DeltaPriceInput:  Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.   "
},
{
	"uri": "/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "Build your own full fledged OTA",
	"content": " Creating your full OTA This topic describes how to build your own OTA using HotelX.\nBefore you begin  Basic knowledge of Angular Read HotelX, which contains information about the HotelX API  Scenario: Create an Online Travel Agency written in Angular For this quickstart tutorial, we have prepared a repository that contains the full Angular code for the OTA clone. All you need to do is to get TravelgateX credentials and connect it with the Angular application. Let\u0026rsquo;s get started!\n Visit OTA Angular follow readme instructions  "
},
{
	"uri": "/hotelx/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " List of business rules for filtering options based on your interests.\nGraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!): Different business rules for filtering options that you are interested in  \nRequired by HotelXDefaultSettingsData:    HotelXCommonSettingsData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " List of business rules for filtering options based on your interests.\nGraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!): Different business rules for filtering options that you are interested in  \nRequired by HotelXDefaultSettingsData:    HotelXCommonSettingsData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.  businessRulesType(BusinessRulesType): Different business rules to filter the returned options.  \nRequired by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.  businessRulesType(BusinessRulesType): Different business rules to filter the returned options.  \nRequired by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  \n"
},
{
	"uri": "/hotelx/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " Business rules type\nGraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.  \n"
},
{
	"uri": "/travelgatex/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " Business rules type\nGraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:  List of business rules for filtering options based on your interests.  BusinessRulesInput:  List of business rules to use as filter on the options.  HotelXBusinessRulesInput:  List of business rules to use as filter on the options.  \n"
},
{
	"uri": "/paymentx/reference/scalars/cvc/",
	"title": "CVC",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:    \n"
},
{
	"uri": "/travelgatex/reference/scalars/cvc/",
	"title": "CVC",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " Contains information for cancellation penalities..\nGraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!): Type of penalty; this can be Nights, Percent or Import  currency(Currency!): Currency used in the cancellation policy  value(Float!): Value of the cancellation policy  \n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " Contains information for cancellation penalities..\nGraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!): Type of penalty; this can be Nights, Percent or Import  currency(Currency!): Currency used in the cancellation policy  value(Float!): Value of the cancellation policy  \n"
},
{
	"uri": "/hotelx/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " Options type\nGraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..  \n"
},
{
	"uri": "/travelgatex/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " Options type\nGraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:  Contains information for cancellation penalities..  \n"
},
{
	"uri": "/hotelx/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " Information about a policy cancellation.\nGraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " Information about a policy cancellation.\nGraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/paymentx/reference/scalars/cardnumber/",
	"title": "CardNumber",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:    \n"
},
{
	"uri": "/travelgatex/reference/scalars/cardnumber/",
	"title": "CardNumber",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/category/",
	"title": "Category",
	"tags": [],
	"description": "",
	"content": " Category Type\nGraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by CategoryEdge:  CategoryList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/category/",
	"title": "Category",
	"tags": [],
	"description": "",
	"content": " Category Type\nGraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by CategoryEdge:  CategoryList Edge definition  \n"
},
{
	"uri": "/hotelx/reference/objects/categoryconnection/",
	"title": "CategoryConnection",
	"tags": [],
	"description": "",
	"content": " CategoryList definition\nGraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/categoryconnection/",
	"title": "CategoryConnection",
	"tags": [],
	"description": "",
	"content": " CategoryList definition\nGraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/categorydata/",
	"title": "CategoryData",
	"tags": [],
	"description": "",
	"content": " Category data\nGraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!]): Label  \nRequired by Category:  Category Type  \n"
},
{
	"uri": "/travelgatex/reference/objects/categorydata/",
	"title": "CategoryData",
	"tags": [],
	"description": "",
	"content": " Category data\nGraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!]): Label  \nRequired by Category:  Category Type  \n"
},
{
	"uri": "/hotelx/reference/objects/categoryedge/",
	"title": "CategoryEdge",
	"tags": [],
	"description": "",
	"content": " CategoryList Edge definition\nGraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Category):   cursor(String!):   \nRequired by CategoryConnection:  CategoryList definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/categoryedge/",
	"title": "CategoryEdge",
	"tags": [],
	"description": "",
	"content": " CategoryList Edge definition\nGraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Category):   cursor(String!):   \nRequired by CategoryConnection:  CategoryList definition  \n"
},
{
	"uri": "/hotelx/howtos/certification_process/goals/",
	"title": "Certification Goals",
	"tags": [],
	"description": "Why we ask for certification process",
	"content": " The Certification process intention is to test and ensure that your integration is performed correctly, this means, that functionality and implementation of the relevant and mandatory information are done correctly and without errors. All of this is focused to avoid issues with the final consumer, or he/she being misled by any incorrect information or not desirable API uses. Before starting the certification process, make sure you have followed the Welcome Pack instructions. This will speed up the process and avoid problems afterwards.\nHaving said that, our certification process will look at 5 different operations: \n Search Quote Book Cancel BookingList  What we check during certification We will be checking the below data:\n Usage of general data structure of our API Usage of the correct booking flow: search, quote, book. The arrival and departure dates. The correct handling of the prices (net price, gross price, commission, etc.). Possible cancellation policies applied to that booking (if you use it). The information of the room selected (id, code, description, etc.). The meal plan selected. Provide supplier’s remarks on the entire booking flow.  "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-channelx/",
	"title": "ChannelX",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " Charge Type\nGraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  \n"
},
{
	"uri": "/travelgatex/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " Charge Type\nGraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  \n"
},
{
	"uri": "/mappea/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " Client identifies who is making the request and holds the configuration assigned to it.\nGraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ClientEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " Client identifies who is making the request and holds the configuration assigned to it.\nGraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ClientEdge:    \n"
},
{
	"uri": "/stats/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " Client identifies who is making the request and holds the configuration assigned to it.\nGraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by StatsData:    ClientEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " Client identifies who is making the request and holds the configuration assigned to it.\nGraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ClientEdge:    StatsData:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/mappea/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/mappea/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(Group): Indicates the group where the Client belongs  owner(Organization): Client owner  \nRequired by Client:  Client identifies who is making the request and holds the configuration assigned to it.  \n"
},
{
	"uri": "/paymentx/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(Group): Indicates the group where the Client belongs  owner(Organization): Client owner  \nRequired by Client:  Client identifies who is making the request and holds the configuration assigned to it.  \n"
},
{
	"uri": "/stats/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(Group): Indicates the group where the Client belongs  owner(Organization): Client owner  \nRequired by Client:  Client identifies who is making the request and holds the configuration assigned to it.  \n"
},
{
	"uri": "/travelgatex/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(Group): Indicates the group where the Client belongs  owner(Organization): Client owner  \nRequired by Client:  Client identifies who is making the request and holds the configuration assigned to it.  \n"
},
{
	"uri": "/mappea/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):   \nRequired by ClientConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):   \nRequired by ClientConnection:    \n"
},
{
	"uri": "/stats/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):   \nRequired by ClientConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):   \nRequired by ClientConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):   \n"
},
{
	"uri": "/travelgatex/concepts/common-resources/",
	"title": "Common resources",
	"tags": [],
	"description": "Learn about common resources used in TravelgateX",
	"content": " On this page you will learn more about common resources used in TravelgateX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.\nSupplier A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers.\nAccess An Access is a set of credentials and configuration in order to access the system of a Supplier.\nClient Client identifies who is making the request and holds the configuration assigned to it.\n"
},
{
	"uri": "/hotelx/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information and credentials required to access the supplier’s system.\nGraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields username(String): User name for the connection.  password(String): Password for the connection  urls(UrlsInput!): URL or endpoint for the connection.  parameters([ParameterInput!]): List of parameters with additional required information.  markets([String!]): Source Markets allowed for the Access  rateRules([RateRulesType!]): RateRules allowed for the access.  \nRequired by HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information and credentials required to access the supplier’s system.\nGraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields username(String): User name for the connection.  password(String): Password for the connection  urls(UrlsInput!): URL or endpoint for the connection.  parameters([ParameterInput!]): List of parameters with additional required information.  markets([String!]): Source Markets allowed for the Access  rateRules([RateRulesType!]): RateRules allowed for the access.  \nRequired by HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  \n"
},
{
	"uri": "/hotelx/howtos/howto-connect-supplier/",
	"title": "Connect a New Supplier",
	"tags": [],
	"description": "How to connect to a new Supplier",
	"content": "In order to connect to a new Supplier please follow the steps below:\n Login to our Connect Form Select the supplier you want to connect to and enter the connectivity credentials. A Jira ticket will be raised and you will receive a confirmation email. Our Activations Department will contact you when the process is ready.  In order to activate a new Supplier a few processes need to be executed - this process depends on each Supplier and it could take up to 24 hours.\n "
},
{
	"uri": "/hotelx/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " Contact Data.\nGraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web  \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " Contact Data.\nGraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web  \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/hotelx/reference/objects/coordinates/",
	"title": "Coordinates",
	"tags": [],
	"description": "",
	"content": " Geographical coordinates corresponding to a location.\nGraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude  \nRequired by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/travelgatex/reference/objects/coordinates/",
	"title": "Coordinates",
	"tags": [],
	"description": "",
	"content": " Geographical coordinates corresponding to a location.\nGraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields latitude(Float!): Latitude  longitude(Float!): Longitude  \nRequired by Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/hotelx/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;ES\u0026rdquo;.\nGraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelXDefaultSettingsData:    Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelXDefaultSettingsDataInput:     "
},
{
	"uri": "/travelgatex/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;ES\u0026rdquo;.\nGraphQL schema definition scalar Country   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelXDefaultSettingsData:    Location:  Indicates the location of the hotel  GeonameData:  Geoname data, which contain a reference to his parent location  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelXDefaultSettingsDataInput:     "
},
{
	"uri": "/travelgatex/reference/inputobjects/createclientinput/",
	"title": "CreateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateClientInput {  name: String!    isActive: Boolean!    group: String!    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(String!): Group where the client will be assigned at first  owner(ID): Client owner  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creategroupinput/",
	"title": "CreateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateGroupInput {  group: ID!    type: GroupTypeInput!    info: String    parent: ID!    template: Template   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):   type(GroupTypeInput!):   info(String):   parent(ID!):   template(Template):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creatememberinput/",
	"title": "CreateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateMemberInput {  member: ID    info: String    type: MemberType!    group: ID!    role: ID!    resources: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID):   info(String):   type(MemberType!):   group(ID!):   role(ID!):   resources([ID!]!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/createorganizationinput/",
	"title": "CreateOrganizationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateOrganizationInput {  user: ID!    info: String    organization: ID    template: OrganizationTemplate!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields user(ID!):   info(String):   organization(ID):   template(OrganizationTemplate!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/createprofileinput/",
	"title": "CreateProfileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateProfileInput {  label: String!    group: String!    type: ProfileType!    entities: EntitiesInput    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields label(String!): Label of the Profile  group(String!): Group where Profile has to be placed  type(ProfileType!): Profile type  entities(EntitiesInput): Entities of the Profile  owner(ID): Profile owner  isActive(Boolean): Active profile  isPublished(Boolean): Profile is published  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by dates\nGraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date. Format: YYYY-MM-DD.  end(Date!): End date. Format: YYYY-MM-DD.  \nRequired by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by dates\nGraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date. Format: YYYY-MM-DD.  end(Date!): End date. Format: YYYY-MM-DD.  \nRequired by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by references\nGraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.  references([BookReferenceInput!]!): Contains the client reference and/or supplier reference.  \nRequired by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by references\nGraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.  references([BookReferenceInput!]!): Contains the client reference and/or supplier reference.  \nRequired by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/hotelx/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room.\nGraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date!): Check-out, booking date Format: YYYY-MM-DD  hotels([String!]!): Contains the list of hotels\u0026#39;s ID  occupancies([RoomCriteria!]!): For multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request  currency(Currency): Currency requested if supported by supplier  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2)  market(String!): Targeted zone, country or point-ofsale-to be used in request.  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  \n"
},
{
	"uri": "/travelgatex/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room.\nGraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date!): Check-out, booking date Format: YYYY-MM-DD  hotels([String!]!): Contains the list of hotels\u0026#39;s ID  occupancies([RoomCriteria!]!): For multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request  currency(Currency): Currency requested if supported by supplier  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2)  market(String!): Targeted zone, country or point-ofsale-to be used in request.  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  \n"
},
{
	"uri": "/hotelx/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026ldquo;EUR\u0026rdquo;.\nGraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelXDefaultSettingsData:    HotelXCommonSettingsData:    SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Exchange:  Provides information about the currency of original, and its rate applied over the results returned by the Supplier.  Markup:  Informs markup applied over supplier price.  Priceable:    CancelPenalty:  Contains information for cancellation penalities..  CriteriaBookingReferencesInput:  Criteria by references  HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:     "
},
{
	"uri": "/travelgatex/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026ldquo;EUR\u0026rdquo;.\nGraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelXDefaultSettingsData:    HotelXCommonSettingsData:    SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Exchange:  Provides information about the currency of original, and its rate applied over the results returned by the Supplier.  Markup:  Informs markup applied over supplier price.  Priceable:    CancelPenalty:  Contains information for cancellation penalities..  CriteriaBookingReferencesInput:  Criteria by references  HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:     "
},
{
	"uri": "/hotelx/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  PriceBreakdown:  Information about daily price.  CriteriaBookingDatesInput:  Criteria by dates  BookingHotel:     "
},
{
	"uri": "/paymentx/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL schema definition scalar Date   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "/travelgatex/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  PriceBreakdown:  Information about daily price.  CriteriaBookingDatesInput:  Criteria by dates  BookingHotel:    PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "/hotelx/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by HotelXHotelFilterInput:  By default: Logical AND on all given filters.  HotelRuntimeConfiguration:    Board:  Board type.  Node:    Category:  Category Type  Hotel:  Hotel Type  GiataData:  Hotel data obtained from Giata System.  Media:  Contains media information.  Airport:  Airport Type  Geoname:  Geoname type  RoomStatic:  Room Type  Destination:  Destination Type  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Transactions:  Supplier transaction  HotelXUpdateStatus:     "
},
{
	"uri": "/mappea/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Node:    Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    Role:  Permissions determine what operations are allowed on a resource  Resource:  Resources are those used in APIs and Products.  API:    Operation:    Product:  An APIs collection.  Client:  Client identifies who is making the request and holds the configuration assigned to it.  Group:  Groups are organized hierarchically.  ManagedGroup:     "
},
{
	"uri": "/paymentx/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by PaymentXStoredCardFilterInput:    PaymentXStoredCard:    Node:    Group:  Groups are organized hierarchically.  PointOfSale:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  API:    Resource:  Resources are those used in APIs and Products.  Operation:    ManagedGroup:    Role:  Permissions determine what operations are allowed on a resource  Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Domain:    Product:  An APIs collection.  Client:  Client identifies who is making the request and holds the configuration assigned to it.   "
},
{
	"uri": "/stats/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Client:  Client identifies who is making the request and holds the configuration assigned to it.  Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    Role:  Permissions determine what operations are allowed on a resource  Resource:  Resources are those used in APIs and Products.  API:    Operation:    Product:  An APIs collection.  Group:  Groups are organized hierarchically.  ManagedGroup:    StatsAsset:  Asset of an specific error   "
},
{
	"uri": "/travelgatex/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Node:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    Client:  Client identifies who is making the request and holds the configuration assigned to it.  Group:  Groups are organized hierarchically.  ManagedGroup:    API:    Resource:  Resources are those used in APIs and Products.  Role:  Permissions determine what operations are allowed on a resource  PointOfSale:    Profile:    Entity:    Product:  An APIs collection.  Operation:    HotelXHotelFilterInput:  By default: Logical AND on all given filters.  HotelRuntimeConfiguration:    Board:  Board type.  Category:  Category Type  Hotel:  Hotel Type  GiataData:  Hotel data obtained from Giata System.  Media:  Contains media information.  Airport:  Airport Type  Geoname:  Geoname type  RoomStatic:  Room Type  Destination:  Destination Type  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Transactions:  Supplier transaction  PaymentXStoredCardFilterInput:    PaymentXStoredCard:    StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    StatsAsset:  Asset of an specific error  HotelXUpdateStatus:     "
},
{
	"uri": "/hotelx/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of dates\nGraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates  \n"
},
{
	"uri": "/travelgatex/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of dates\nGraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:  Criteria by dates  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletegroupinput/",
	"title": "DeleteGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteGroupInput {  group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletememberinput/",
	"title": "DeleteMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteMemberInput {  member: ID!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID!):   group(ID!):   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\nGraphQL schema definition type DeltaPriceInput {  amount: Float    percent: Float    applyBoth: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(Float): The amount in the currency returned by the option that will be accepted by the client to be higher than the valuation price.  percent(Float): The percentage accepted by the client to be higher than the valuation price.  applyBoth(Boolean!): Depending on the value of applyBoth: applyBoth = false: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth = true: Indicates that the new price cannot exceed the amount or percentage indicated by the client.  \nRequired by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\nGraphQL schema definition type DeltaPriceInput {  amount: Float    percent: Float    applyBoth: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(Float): The amount in the currency returned by the option that will be accepted by the client to be higher than the valuation price.  percent(Float): The percentage accepted by the client to be higher than the valuation price.  applyBoth(Boolean!): Depending on the value of applyBoth: applyBoth = false: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth = true: Indicates that the new price cannot exceed the amount or percentage indicated by the client.  \nRequired by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/hotelx/reference/objects/description/",
	"title": "Description",
	"tags": [],
	"description": "",
	"content": " Object description indicates the type and the description about something.\nGraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label  \n"
},
{
	"uri": "/travelgatex/reference/objects/description/",
	"title": "Description",
	"tags": [],
	"description": "",
	"content": " Object description indicates the type and the description about something.\nGraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label  \n"
},
{
	"uri": "/hotelx/reference/enums/descriptiontype/",
	"title": "DescriptionType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of description\nGraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.  \n"
},
{
	"uri": "/travelgatex/reference/enums/descriptiontype/",
	"title": "DescriptionType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of description\nGraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:  Object description indicates the type and the description about something.  \n"
},
{
	"uri": "/hotelx/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " Destination Type\nGraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by DestinationEdge:  DestinationList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " Destination Type\nGraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([AdviseMessage!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by DestinationEdge:  DestinationList Edge definition  \n"
},
{
	"uri": "/hotelx/reference/objects/destinationconnection/",
	"title": "DestinationConnection",
	"tags": [],
	"description": "",
	"content": " DestinationList definition\nGraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/destinationconnection/",
	"title": "DestinationConnection",
	"tags": [],
	"description": "",
	"content": " DestinationList definition\nGraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/destinationdata/",
	"title": "DestinationData",
	"tags": [],
	"description": "",
	"content": " Information about destinantion\nGraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Destination Code  available(Boolean!): Indicates if you can search by destination  destinationLeaf([String!]): Returns destination leafs of the destination.  texts([Text!]!): Contains the destination name  closestDestinations([String!]): Closest destinations, indicates destinations in proximity  parent(String): Parent destination code  type(DestinationType): Indicates destination type, zone or city  \nRequired by Location:  Indicates the location of the hotel  Destination:  Destination Type  \n"
},
{
	"uri": "/travelgatex/reference/objects/destinationdata/",
	"title": "DestinationData",
	"tags": [],
	"description": "",
	"content": " Information about destinantion\nGraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Destination Code  available(Boolean!): Indicates if you can search by destination  destinationLeaf([String!]): Returns destination leafs of the destination.  texts([Text!]!): Contains the destination name  closestDestinations([String!]): Closest destinations, indicates destinations in proximity  parent(String): Parent destination code  type(DestinationType): Indicates destination type, zone or city  \nRequired by Location:  Indicates the location of the hotel  Destination:  Destination Type  \n"
},
{
	"uri": "/hotelx/reference/objects/destinationedge/",
	"title": "DestinationEdge",
	"tags": [],
	"description": "",
	"content": " DestinationList Edge definition\nGraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Destination):   cursor(String!):   \nRequired by DestinationConnection:  DestinationList definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/destinationedge/",
	"title": "DestinationEdge",
	"tags": [],
	"description": "",
	"content": " DestinationList Edge definition\nGraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Destination):   cursor(String!):   \nRequired by DestinationConnection:  DestinationList definition  \n"
},
{
	"uri": "/hotelx/reference/enums/destinationtype/",
	"title": "DestinationType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of destination\nGraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/travelgatex/reference/enums/destinationtype/",
	"title": "DestinationType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of destination\nGraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:  Information about destinantion  GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/mappea/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \n"
},
{
	"uri": "/paymentx/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \n"
},
{
	"uri": "/stats/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \n"
},
{
	"uri": "/mappea/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   \nRequired by Domain:    \n"
},
{
	"uri": "/paymentx/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   \nRequired by Domain:    \n"
},
{
	"uri": "/stats/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   \nRequired by Domain:    \n"
},
{
	"uri": "/travelgatex/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):   \nRequired by Domain:    \n"
},
{
	"uri": "/mappea/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " Scalar for type Domain\nGraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "/paymentx/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " Scalar for type Domain\nGraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "/stats/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " Scalar for type Domain\nGraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "/travelgatex/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " Scalar for type Domain\nGraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "/hotelx/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " Duration Type\nGraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " Duration Type\nGraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/entitiesinput/",
	"title": "EntitiesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntitiesInput {  suppliers: [ID!]    clients: [ID!]    access: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields suppliers([ID!]):   clients([ID!]):   access([ID!]):   \nRequired by CreateProfileInput:    UpdateEntitiesInput:    \n"
},
{
	"uri": "/travelgatex/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by EntityEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  ProfileData:  Profile data  \n"
},
{
	"uri": "/travelgatex/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):   \nRequired by EntityConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/entityfilter/",
	"title": "EntityFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityFilter {  codes: [ID!]    groups: [ID!]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields codes([ID!]):   groups([ID!]):   isActive(Boolean):   owner([ID!]):   \n"
},
{
	"uri": "/hotelx/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \n"
},
{
	"uri": "/mappea/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:    \n"
},
{
	"uri": "/paymentx/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \n"
},
{
	"uri": "/stats/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \n"
},
{
	"uri": "/travelgatex/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:    \n"
},
{
	"uri": "/hotelx/concepts/errorwarning/",
	"title": "Error and Warning",
	"tags": [],
	"description": "List of errors and warnings in HotelX",
	"content": " In this chapter we will list the errors and warnings of HotelX booking flow.\nError list In the table below, we have structured a relation of all the Errors that can be returned in HotelX booking flow\n   Code Type Description Explanation     ACCESS_ERROR VALIDATION_ERROR No valid accesses found The access is not found or it has no permission, or you are using a test access and you need to add the testMode.   MISSING_FIELD VALIDATION_ERROR According to the case Some mandatory fields are missing in input   INTERNAL_ERROR API_ERROR According to the case Covers any unexpected error or errors due to internal service   ALL_PROCESSES_FAILED PROCESS_ERROR See warnings for more information This occurs when no options are returned for all accesses after applying a plugin (blacklist, filter, mapping code), commission, etc., it may also be caused by a wrong default setting, In the warning node you will find detailed information about the cause.   TIMEOUT CONNECTION_ERROR According to the case This occurs due to a connection timeout   REFERENCE_NOT_EXISTS BOOKING_ERROR According to the case This occurs when the booking reference provided is not available in the supplier system    Warning list In this section we will expand on all the Warnings that can be returned in HotelX booking flow. There are two types of warnings, HotelX warnings and Connection warnings.\nHotelX warnings In the table below, we have structured a relation of all the Warnings that can be returned in HotelX.\n   Code Type Description Explanation     WRONG_FIELD VALIDATION_ERROR According to the case A field or fields in the request are not correct   INTERNAL_ERROR MAPPING_ERROR According to the case Error produced when mapping codes, it usually happens regarding hotel mapping   COMMISSION_NOT_FOUND API_ERROR According to the case This occurs when the options are discarded because the supplier returns options with a negative commission that does not allow the calculation of the net price. You need to upload the commission file to solve it   WRONG_FIELD PLUGIN_ERROR According to the case It occurs when the input of the plugin is misintroduced or misconstructed   BLACKLIST PLUGIN_ERROR According to the case It occurs when the hotels or accesses are blacklisted    Connection warnings This type of warnings contains the supplier original error codes. This type of error codes are classified as warning codes because whenever more than 1 supplier is requested, some of those suppliers may return an error while others may return the response, accordingly. In those cases, if at least one of the suppliers returns results an error cannot be returned, hence those results will be displayed in the response, and for those accesses which have not returned results a warning will be returned.\n   Code Type Description Explanation     According to supplier error code 101 According to the case System Exception (Exception not controlled or not classified as general exception).   According to supplier error code 102 According to the case It contains supplier original error and code, for more detail you need to see description or contact the supplier   According to supplier error code 104 According to the case Timeout, timeout due to supplier, not HotelX system   According to supplier error code 105 According to the case Communication Error with a specific supplier   According to supplier error code 204 No results found Supplier doesn\u0026rsquo;t return any options   According to supplier error code 205 According to the case The Supplier doesn’t accept the occupancies configuration.   According to supplier error code 206 According to the case The Supplier doesn’t accept the dates RQ.   According to supplier error code 207 According to the case The Supplier doesn’t accept the request RQ.   According to supplier error code 301 According to the case Option not found in Quote.    "
},
{
	"uri": "/hotelx/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " Provides information about the currency of original, and its rate applied over the results returned by the Supplier.\nGraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!): Provides information about the rate applied over results  \nRequired by Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Markup:  Informs markup applied over supplier price.  Priceable:    \n"
},
{
	"uri": "/travelgatex/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " Provides information about the currency of original, and its rate applied over the results returned by the Supplier.\nGraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Provide information about the currency of origin  rate(Float!): Provides information about the rate applied over results  \nRequired by Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Markup:  Informs markup applied over supplier price.  Priceable:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  \nRequired by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  \n"
},
{
	"uri": "/paymentx/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  \nRequired by PaymentXStoredCardInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  \nRequired by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  PaymentXStoredCardInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  \nRequired by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/mappea/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  \nRequired by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/paymentx/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  \nRequired by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/stats/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  \nRequired by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/travelgatex/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message  \nRequired by AdviseMessage:  List of advise messages.  \n"
},
{
	"uri": "/hotelx/faqs/frequently-asked-questions/",
	"title": "FAQs",
	"tags": ["faq"],
	"description": "Do you have any specific questions about HotelX? Check out the FAQs",
	"content": " General Where can I find object explanations/definitions? You can find it on our Schema\nLanguages allowed Which are the languages allowed in HotelX? The new aggregator allows every language, it will depend on each supplier.\nList of suppliers available Is it possible to see the whole list of suppliers and to look at their hotel databases and prices somewhere? Here you will find the list of the sellers already connected to our platform. In case you want to look at their databases and prices, you should contact them directly.\nNaming Can I request to HotelX a specific response structure? Yes, you can personalize the response structure by changing the query or mutation schema. But, our recommendation is to keep the native schema, at least in Search step, so that performance is not affected.\nResponse time Which timeout should I send in each step? Our system allows: * A maximum of 25000ms in Search * A maximum of 180000ms in Quote * A maximum of 180000ms in Book Our recommendation is to test which timeout fits your needs better, taking into account the number of hotels requested and the supplier.\nHow is the response time of the different providers managed in the aggregator mode? HotelX will return the information from all the suppliers at the same time, once all the responses have been obtained by them. As for the requests that have timed out, they will be signaled by a warning in the response.\nClient Nationality Are there any restrictions to the client’s nationality?\nIt depends on the supplier.\nDoes the client’s nationality affect the price? - For instance, same Search criteria with different client nationality\nYes, nationality and market might affect the price of the option, depending on the supplier.\nAge Range of Children - Infants How can we differentiate a child from an infant? What is the age range of each of them?\nEach supplier has their own restrictions, so the age range for children or infants will depend on the definition of each supplier.\nGIATA codes It is possible to use GIATA codes?\nOur platform allows to return GIATA codes in our Hotels Query response. First of all, you wil need to provide us your GIATA credentials in order to set up your Apikey. After that, you will be able to obtain these codes through our system and use them through our hotel map process.\nCertification process Please advise us on the procedure for Certification All the details regarding the Certification Process are explained in the Welcome Pack we sent you. Basically, you have to perform the three cases asked in the Welcome Pack and raise a certification ticket on our Customer Care Service Desk (attaching the files). You can also find more information on the certification process within our documentation site\nSupplier HOTELTEST Now I only have access to HOTELTEST, can I activate a new supplier? While in the development process and until our Certification Process is passed, you will only have access to HOTELTEST supplier.\nDo I have access to all the hotels in the test environment? No, we use a test supplier, so there is a limited number of hotels in the database to be used.\nSearch How to structure a multi-room in HotelX\nIn order to avoid errors in your Query Search of more than 1 room, please, find below a sample structure of a multi-room:\n\u0026quot;occupancies\u0026quot;:[ { \u0026quot;paxes\u0026quot;:[ { \u0026quot;age\u0026quot;:30 }, { \u0026quot;age\u0026quot;:30 } ] }, { \u0026quot;paxes\u0026quot;:[ { \u0026quot;age\u0026quot;:30 }, { \u0026quot;age\u0026quot;:30 } ] }, { \u0026quot;paxes\u0026quot;:[ { \u0026quot;age\u0026quot;:30 }, { \u0026quot;age\u0026quot;:30 } ] } ],  Does the optionId change every time I run the same query (with the same supplier)?\nYes, every time that you perform a query the optionId will change.\nSearch request filters What is the function of an accessCode?\nEvery time you activate a supplier, you receive an access code. This access code is used to differentiate between suppliers and also to filter between the same supplier\u0026rsquo;s different credentials and configurations. This allows you, for instance, to diffentiate between B2B or B2C requests, or search availability only for certain suppliers.\nIn case I would like to receive a specific rate, would it be possible? Yes, you could filter the response by introducing the tag rateRules in your filter.\nWhich are the possible filters in the Search Request?\nRight now, you can search by hotel code and by destination:\n Hotel code Destination  Does HotelX have any restrictions on the number of hotel codes to be introduced in the hotel search criteria?\nWe do not have a limit in the number of hotels per query. Our API splits the number of hotels requested to each supplier, according to the supplier’s specific characteristics.\nWhat happens if the supplier doesn\u0026rsquo;t support the currency requested? Is it not returned?\nIn this case, two scenarios are possible: the first one, the supplier returns an error caused by the currency not being supported by them, or the second one, the supplier returns the currency they have set up on their end for your credentials.\nHow can I request a specific destination?\nIn order to perform a request by destination you should introduce our Search by destination process plugin.\nSurchages On a per-supplier basis, can we can tell if a Surcharge is a tax or not?\nHotelX Api cannot indicate if a surcharge is a tax or not\nDaily-prices Can I receive Daily-prices in Search Response?\nIt will depend if the supplier offers the information. In case the information is returned by the supplier, you will find it through the Roomprice string–\u0026gt;PriceBreakdown.\nCurrency in Search Requests Is it necessary to include the currency tag in your Search Request?\nThe currency tag is always mandatory. You have two options: * To send it in the request whenever you run a Search * If you do not include any currency, then the settings by default currency configuration will be used\nWhat does it happen if I request availability with a currency that the supplier doesn´t accept?\nIn these cases, there are two possible scennarios:\n Exchange rates can be applied using a currency conversion plugin (this plugin contains the exchange rates previously loaded by client rules) Not applying any exchange rate. In this case, you will receive the supplier´s currency - some suppliers accept the currency in the request and others will return their currency, depending on your account as client with them.  Cancellation costs Is it possible to perform a cancellation as a query to just retrieve the cancellation costs, but not to cancel the booked item itself?\nNo, but you can retrieve the cancellation policies where this information is included. You can check the booking information (cancel policies included) with the HotelBooking query.\nHow are cancellation costs calculated and displayed? There are three ways to calculate cancellation costs, depending on the provider. The field value will have the amount associated to each cancellation type: - Per nights: indicates the amount of nights to be penalized. - Percentage: indicates the percentage of the total booking. The field value will have possible values between 0 and 100. - Import: indicates the amount to be paid. Bear in mind, that a booking may have more than one penalty type associated, depending on the amount of hours before entrance date that you perform the cancellation.\nCancel Policy hoursBefore checkin date - What timezone is the checkIn date? Normally UTC time is used, but if the provider responds with hotel timezone we add 24 hours. You will find further information here\nBook I\u0026rsquo;m receiving The number of rooms doesn't match with option's number of rooms error on the book step, how do I define the number of rooms?\nYou will have to use the occupancyRefId returned at Search step\nWhen booking, can the optionRefId be a hotelOptionSearch Id? Or does it always have to be the quoteId?\nNo, you should always use the optionRefId from the Quote query.\nI am trying to perform a Book,everything seems correct, but I am receiving a confirmation error. What it could be?\nYou can try to change the client reference for a new one. There are some suppliers that do not allow to perform a Book with a client reference that has been used before.\nDeltaPrice Can you please let us know why should we use Deltaprice?\nInput delta price, indicates the price variation permitted by the client. An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another Search/Quote request needs to be done in Book. In case the supplier blocks the option in Quote, reservation will be done automatically in Book mutation. You can set delta price by: * Amount * Percentage * Apply both (amount and percentage) You can find this information in our Schema\nCard Details Which payment type options are available for each supplier?\nEach supplier supports/works with different payment types (remember that TravelgateX supports Merchant, Card Booking, Card Checkin and Direct), so the ones you receive will be the ones you have contracted /agreed with the supplier.\nDo I have to introduce card details when performing Book? It will depend on the type of payment associated with the option you have selected, and therefore on the requirements of the provider. Please note that the payment is not managed by TravelgateX, so that you will have to implement a payment gateway on your side. The card details are needed in all options except Merchant. The Payment type tag is returned in the Search response, so do not forget to introduce it in the query body. More information in our Schema\nContent How to Manage HotelX Content\nHotelX allows two types of Queries:\n Search to a HotelCode level: in order to receive the information of a specific HotelCode(s), you should introduce the HotelCode(s) of your query:  { \u0026quot;criteria\u0026quot;: { \u0026quot;access\u0026quot;: \u0026quot;yourAccess\u0026quot;, \u0026quot;hotelCodes\u0026quot;:[\u0026quot;A159\u0026quot;, \u0026quot;B357\u0026quot;, \u0026quot;C568\u0026quot;] } }   Search the complete HotelList from a supplier’s access: in order to receive the complete hotel list from a supplier’s access, you should introduce the number of hotels you want to receive in the response of the query. Since the hotel list includes a large amount of hotels, it is divided into several batches, each one of a different number of hotels. In this case, the minimum size you can request is 100, and the max. is 10000.  { \u0026quot;criteria\u0026quot;: { \u0026quot;access\u0026quot;: \u0026quot;yourAccess\u0026quot;, \u0026quot;maxSize\u0026quot;: 500 } }  More info on HotelX content.\nCountry names How can I receive the names of the countries?\nThe response of the HotelX Query contains location.country in ISO standard format.\nAmenities and images I am not receiving hotel images so please suggest how can I get them.\nHotel images are returned in the Hotels Query. Please check our content section for further information: link\nI would like to perform the HotelList and DestinationList, but I am not finding GraphQL examples.\nIn the Welcome Pack mail you will find attached our Usecases and Insomnia environment packs with some query and mutation examples. For further information, feel free to access our content section\nCould I know all amenities information in your system? I mean all code and text.\nAmenities information might change depending on the supplier and the hotel. HotelX does not keep any data as we return the information directly from each supplier.\nMapping process To be able to upload the mapping, should we be using the HotelMapX plugin, and is there a document that we can refer to on the plugin and how the request should be sent?\nNot via API. Uploading to FTP as described here\n"
},
{
	"uri": "/mappea/reference/objects/file/",
	"title": "File",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):   \nRequired by GetUploadedFilesData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/file/",
	"title": "File",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):   \nRequired by GetUploadedFilesData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026ldquo;deprecated from 2018-08-20. Please, use filterSearch\u0026rdquo;)\nGraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.  rateRules(RateRulesFilterInput): If requested, only options with the specified rateRules will be returned  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026rsquo;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026ldquo;deprecated from 2018-08-20. Please, use filterSearch\u0026rdquo;)\nGraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.  rateRules(RateRulesFilterInput): If requested, only options with the specified rateRules will be returned  \n"
},
{
	"uri": "/hotelx/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Exchange:  Provides information about the currency of original, and its rate applied over the results returned by the Supplier.  Markup:  Informs markup applied over supplier price.  Priceable:    Rule:    CancelPenalty:  Contains information for cancellation penalities..  DeltaPriceInput:  Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.   "
},
{
	"uri": "/travelgatex/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL schema definition scalar Float   Required by Coordinates:  Geographical coordinates corresponding to a location.  AuditData:  Data sent and received in the supplier’s native format.  Stat:    Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.  Exchange:  Provides information about the currency of original, and its rate applied over the results returned by the Supplier.  Markup:  Informs markup applied over supplier price.  Priceable:    Rule:    CancelPenalty:  Contains information for cancellation penalities..  DeltaPriceInput:  Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.   "
},
{
	"uri": "/hotelx/reference/objects/geoname/",
	"title": "Geoname",
	"tags": [],
	"description": "",
	"content": " Geoname type\nGraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Hotel Destination ID  geonameData(GeonameData): geoname data  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/travelgatex/reference/objects/geoname/",
	"title": "Geoname",
	"tags": [],
	"description": "",
	"content": " Geoname type\nGraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Hotel Destination ID  geonameData(GeonameData): geoname data  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by GeonameData:  Geoname data, which contain a reference to his parent location  \n"
},
{
	"uri": "/hotelx/reference/objects/geonamedata/",
	"title": "GeonameData",
	"tags": [],
	"description": "",
	"content": " Geoname data, which contain a reference to his parent location\nGraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): location code  name(String!): name of location  parent(Geoname!): Parent location, the top location is itself  country(Country): ISO 3166-1 alpha-2 format country code with enclosing double quotes \u0026#34;ES\u0026#34;  type(DestinationType!): Indicates destination type, zone, city or country  coordinates(Coordinates!): Geographical coordinates corresponding to a location.  \nRequired by Geoname:  Geoname type  \n"
},
{
	"uri": "/travelgatex/reference/objects/geonamedata/",
	"title": "GeonameData",
	"tags": [],
	"description": "",
	"content": " Geoname data, which contain a reference to his parent location\nGraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: DestinationType!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): location code  name(String!): name of location  parent(Geoname!): Parent location, the top location is itself  country(Country): ISO 3166-1 alpha-2 format country code with enclosing double quotes \u0026#34;ES\u0026#34;  type(DestinationType!): Indicates destination type, zone, city or country  coordinates(Coordinates!): Geographical coordinates corresponding to a location.  \nRequired by Geoname:  Geoname type  \n"
},
{
	"uri": "/mappea/reference/objects/getmappeastatsdata/",
	"title": "GetMappeaStatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):   \nRequired by GetMappeaStatsResponse:    \n"
},
{
	"uri": "/travelgatex/reference/objects/getmappeastatsdata/",
	"title": "GetMappeaStatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):   \nRequired by GetMappeaStatsResponse:    \n"
},
{
	"uri": "/mappea/reference/objects/getmappeastatsresponse/",
	"title": "GetMappeaStatsResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):   \nRequired by MappeaQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/getmappeastatsresponse/",
	"title": "GetMappeaStatsResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):   \nRequired by MappeaQuery:    \n"
},
{
	"uri": "/mappea/reference/objects/getuploadedfilesdata/",
	"title": "GetUploadedFilesData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields files([File]):   \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles   "
},
{
	"uri": "/travelgatex/reference/objects/getuploadedfilesdata/",
	"title": "GetUploadedFilesData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields files([File]):   \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles   "
},
{
	"uri": "/mappea/reference/objects/getuploadedfilesresponse/",
	"title": "GetUploadedFilesResponse",
	"tags": [],
	"description": "",
	"content": " GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):   \nRequired by MappeaQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/getuploadedfilesresponse/",
	"title": "GetUploadedFilesResponse",
	"tags": [],
	"description": "",
	"content": " GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):   \nRequired by MappeaQuery:    \n"
},
{
	"uri": "/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Welcome to TravelgateX! Learn the basics of using our APIs, and start making integrations quickly and securely.\n  Overview See how the TravelgateX platform and APIs fit together\n     Quickstart How to get support for using our APIs\n     Concepts Basic concepts for all of the TravelgateX platform\n     Playground Try our API now\n    The basic concepts of TravelgateX will help you build a wide range of travel products and services. With TravelgateX you can: Build a basic booking website, Offer curated travel offers in niche markets Create realtime apps that reveal the best deals of the moment. Anything is possible! "
},
{
	"uri": "/hotelx/reference/objects/giatadata/",
	"title": "GiataData",
	"tags": [],
	"description": "",
	"content": " Hotel data obtained from Giata System.\nGraphQL schema definition type GiataData {  id: ID!    source: URI!    href: URI!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!): Giata System ID.  source(URI!): Giata URL for the hotels of the supplier.  href(URI!): Giata url for the hotel info.   updatedAt(DateTime!): Date of last Giata update for this code.   \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/giatadata/",
	"title": "GiataData",
	"tags": [],
	"description": "",
	"content": " Hotel data obtained from Giata System.\nGraphQL schema definition type GiataData {  id: ID!    source: URI!    href: URI!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!): Giata System ID.  source(URI!): Giata URL for the hotels of the supplier.  href(URI!): Giata url for the hotel info.   updatedAt(DateTime!): Date of last Giata update for this code.   \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/stats/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .  \n2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .  \n2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   "
},
{
	"uri": "/mappea/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " Groups are organized hierarchically.\nGraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ClientData:    GroupData:    ManagedGroupData:    GroupEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " Groups are organized hierarchically.\nGraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by PaymentXStoredCardData:    GroupData:    GroupEdge:    ManagedGroupData:    ClientData:    \n"
},
{
	"uri": "/stats/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " Groups are organized hierarchically.\nGraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by GroupEdge:    GroupData:    ManagedGroupData:    ClientData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " Groups are organized hierarchically.\nGraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ClientData:    GroupData:    ManagedGroupData:    ProfileData:  Profile data  GroupEdge:    PaymentXStoredCardData:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/mappea/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   \n"
},
{
	"uri": "/paymentx/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   \n"
},
{
	"uri": "/stats/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   \n"
},
{
	"uri": "/travelgatex/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   \n"
},
{
	"uri": "/mappea/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   \nRequired by SupplierData:    AccessData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    MemberData:    APIData:    AccessData:    SupplierData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   \nRequired by AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    GroupData:    APIData:    \n"
},
{
	"uri": "/mappea/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection): Only responses children.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   members(MemberConnection): Only responses members in this group  apis(APIConnection): APIs assigned to this group. Products have APIs.  managedGroups(ManagedGroupConnection): Responses all managed groups by this group.  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically),  accesses(AccessConnection): Access resources in a group  suppliers(SupplierConnection): Supplier resources in a group  clients(ClientConnection): Clients resources in a group  roles(RoleConnection): You can grant roles to members, which define the roles catalog for a group.  \nRequired by Group:  Groups are organized hierarchically.  \n"
},
{
	"uri": "/paymentx/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection): Only responses children.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   members(MemberConnection): Only responses members in this group  apis(APIConnection): APIs assigned to this group. Products have APIs.  managedGroups(ManagedGroupConnection): Responses all managed groups by this group.  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically),  accesses(AccessConnection): Access resources in a group  suppliers(SupplierConnection): Supplier resources in a group  clients(ClientConnection): Clients resources in a group  roles(RoleConnection): You can grant roles to members, which define the roles catalog for a group.  \nRequired by Group:  Groups are organized hierarchically.  \n"
},
{
	"uri": "/stats/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection): Only responses children.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   members(MemberConnection): Only responses members in this group  apis(APIConnection): APIs assigned to this group. Products have APIs.  managedGroups(ManagedGroupConnection): Responses all managed groups by this group.  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically),  accesses(AccessConnection): Access resources in a group  suppliers(SupplierConnection): Supplier resources in a group  clients(ClientConnection): Clients resources in a group  roles(RoleConnection): You can grant roles to members, which define the roles catalog for a group.  \nRequired by Group:  Groups are organized hierarchically.  \n"
},
{
	"uri": "/travelgatex/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection): Only responses children.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   members(MemberConnection): Only responses members in this group  apis(APIConnection): APIs assigned to this group. Products have APIs.  managedGroups(ManagedGroupConnection): Responses all managed groups by this group.  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically),  accesses(AccessConnection): Access resources in a group  suppliers(SupplierConnection): Supplier resources in a group  clients(ClientConnection): Clients resources in a group  roles(RoleConnection): You can grant roles to members, which define the roles catalog for a group.  \nRequired by Group:  Groups are organized hierarchically.  \n"
},
{
	"uri": "/mappea/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):   \nRequired by GroupConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):   \nRequired by GroupConnection:    \n"
},
{
	"uri": "/stats/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):   \nRequired by GroupConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):   \nRequired by GroupConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/groupinput/",
	"title": "GroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupInput {  id: ID!    groups: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!): Id of the resource permissions to be granted.  groups([ID]): Groups that will see this resoruce.  \n"
},
{
	"uri": "/mappea/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/enums/grouptypeinput/",
	"title": "GroupTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupTypeInput{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by CreateGroupInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Holder\u0026#39;s name  surname(String!): Holder\u0026#39;s surname  \nRequired by HotelBookingDetail:  Contains information about booking  \n"
},
{
	"uri": "/paymentx/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Holder\u0026#39;s name  surname(String!): Holder\u0026#39;s surname  \nRequired by PaymentXStoredCardData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Holder\u0026#39;s name  surname(String!): Holder\u0026#39;s surname  \nRequired by HotelBookingDetail:  Contains information about booking  PaymentXStoredCardData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): The card holder\u0026#39;s name  surname(String!): The card holder\u0026#39;s surname  \nRequired by HotelBookInput:  Criteria of book.  PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  \n"
},
{
	"uri": "/paymentx/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): The card holder\u0026#39;s name  surname(String!): The card holder\u0026#39;s surname  \nRequired by PaymentXStoredCardFilterInput:    PaymentXStoredCardInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): The card holder\u0026#39;s name  surname(String!): The card holder\u0026#39;s surname  \nRequired by PaymentXStoredCardFilterInput:    HotelBookInput:  Criteria of book.  PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  PaymentXStoredCardInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " Hotel Type\nGraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by HotelEdge:  HotelList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " Hotel Type\nGraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([AdviseMessage!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by HotelEdge:  HotelList Edge definition  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book.\nGraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Option ID  language(Language): Language to be used in request  clientReference(String!): Booking ID in client\u0026#39;s system.  deltaPrice(DeltaPriceInput): Indicates price variation permitted by the client.  paymentCard(PaymentCardInput): If the payment is done by credit card, it\u0026#39;s mandatory to specify the payment type and the credit card information.  remarks(String): Any customer comments for the supplier to consider.  holder(HolderInput!): Holder\u0026#39;s basic information.  rooms([BookRoomInput!]!): Rooms within this option.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book.\nGraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Option ID  language(Language): Language to be used in request  clientReference(String!): Booking ID in client\u0026#39;s system.  deltaPrice(DeltaPriceInput): Indicates price variation permitted by the client.  paymentCard(PaymentCardInput): If the payment is done by credit card, it\u0026#39;s mandatory to specify the payment type and the credit card information.  remarks(String): Any customer comments for the supplier to consider.  holder(HolderInput!): Holder\u0026#39;s basic information.  rooms([BookRoomInput!]!): Rooms within this option.  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  booking(HotelBookingDetail): Information about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  booking(HotelBookingDetail): Information about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  bookings([HotelBookingDetail!]): Details about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  bookings([HotelBookingDetail!]): Details about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about booking\nGraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference!): Booking ID in the Supplier\u0026#39;s system  holder(Holder): Holder\u0026#39;s name and surname  hotel(BookingHotel): Information about the hotel.  price(Price): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the book returned.  remarks(String): Additional information about the book.  status(BookStatusType!): Booking Status.  payable(String): Payable.  addOns(AddOns): Additional information about the option  \nRequired by HotelBookPayload:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about booking\nGraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference!): Booking ID in the Supplier\u0026#39;s system  holder(Holder): Holder\u0026#39;s name and surname  hotel(BookingHotel): Information about the hotel.  price(Price): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the book returned.  remarks(String): Additional information about the book.  status(BookStatusType!): Booking Status.  payable(String): Payable.  addOns(AddOns): Additional information about the option  \nRequired by HotelBookPayload:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about cancel\nGraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier\u0026#39;s system  cancelReference(String): Cancellation ID in the Supplier\u0026#39;s system  status(BookStatusType): Booking Status.  price(Price): Specifies the prices (Gross, Net and Amount) of the cancellation.  booking(HotelBookingDetail): Information about the booking.  \nRequired by HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about cancel\nGraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference): Booking ID in the Supplier\u0026#39;s system  cancelReference(String): Cancellation ID in the Supplier\u0026#39;s system  status(BookStatusType): Booking Status.  price(Price): Specifies the prices (Gross, Net and Amount) of the cancellation.  booking(HotelBookingDetail): Information about the booking.  \nRequired by HotelCancelPayload:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " Cancellation Criteria.\nGraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.  language(Language): The language code.  hotelCode(String!): The hotel code.  reference(BookReferenceInput!): Contains the client reference and/or supplier reference. One of them is mandatory.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " Cancellation Criteria.\nGraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!): The name of the access to use in the request.  language(Language): The language code.  hotelCode(String!): The hotel code.  reference(BookReferenceInput!): Contains the client reference and/or supplier reference. One of them is mandatory.  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  cancellation(HotelCancelDetail): Information about cancel  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  cancellation(HotelCancelDetail): Information about cancel  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " HotelList definition\nGraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " HotelList definition\nGraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book contains basic information to find a book or books.\nGraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!): Name of the access that have to use in the request.  language(Language): The language code.  typeSearch(BookingCriteriaType!): The search type criteria.  references(CriteriaBookingReferencesInput): The references criteria.  dates(CriteriaBookingDatesInput): The dates criteria.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book contains basic information to find a book or books.\nGraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!): Name of the access that have to use in the request.  language(Language): The language code.  typeSearch(BookingCriteriaType!): The search type criteria.  references(CriteriaBookingReferencesInput): The references criteria.  dates(CriteriaBookingDatesInput): The dates criteria.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " The quote criteria contains the option reference id, block and language.\nGraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " The quote criteria contains the option reference id, block and language.\nGraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\nGraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date!): Check-out, booking date Format: YYYY-MM-DD  hotels([String!]): Hotel Codes.  destinations([String!]): Destination codes.  occupancies([RoomInput!]!): For multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request  currency(Currency): Currency requested if supported by supplier  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2)  market(String): Targeted zone, country or point-ofsale-to be used in request.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\nGraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date!): Check-out, booking date Format: YYYY-MM-DD  hotels([String!]): Hotel Codes.  destinations([String!]): Destination codes.  occupancies([RoomInput!]!): For multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request  currency(Currency): Currency requested if supported by supplier  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2)  market(String): Targeted zone, country or point-ofsale-to be used in request.  \n"
},
{
	"uri": "/hotelx/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " Hotel data\nGraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    giataData: GiataData    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!]    medias: [Media!]    descriptions( types: [DescriptionType!], languages: [Language!], ): [Description!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code.  hotelCode(String!): Code to perform availability.  hotelCodeSupplier(String): Native supplier hotel code.  giataData(GiataData): Giata data stored in giata.  hotelName(String!): Name of the hotel in the Supplier selected.  categoryCode(String!): Hotel category (for example number of stars).  property(Property): Indicates property type  chainCode(String): Hotel chain code  exclusiveDeal(Boolean!): Indicates that the Hotel has an Exclusive Deal.  location(Location!): Indicates the location of the hotel  contact(Contact): Contact cotains information about hotel contact.  rank([Int!]!): Rank indicates the supplier categorization.  cardTypes([String!]): List of credit cards  amenities([Amenity!]): Amenities  medias([Media!]): Medias  descriptions([Description!]): Descriptions  \nRequired by Hotel:  Hotel Type  \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " Hotel data\nGraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    giataData: GiataData    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!]    medias: [Media!]    descriptions( types: [DescriptionType!], languages: [Language!], ): [Description!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code.  hotelCode(String!): Code to perform availability.  hotelCodeSupplier(String): Native supplier hotel code.  giataData(GiataData): Giata data stored in giata.  hotelName(String!): Name of the hotel in the Supplier selected.  categoryCode(String!): Hotel category (for example number of stars).  property(Property): Indicates property type  chainCode(String): Hotel chain code  exclusiveDeal(Boolean!): Indicates that the Hotel has an Exclusive Deal.  location(Location!): Indicates the location of the hotel  contact(Contact): Contact cotains information about hotel contact.  rank([Int!]!): Rank indicates the supplier categorization.  cardTypes([String!]): List of credit cards  amenities([Amenity!]): Amenities  medias([Media!]): Medias  descriptions([Description!]): Descriptions  \nRequired by Hotel:  Hotel Type  \n"
},
{
	"uri": "/hotelx/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):   \nRequired by HotelConnection:  HotelList definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):   \nRequired by HotelConnection:  HotelList definition  \n"
},
{
	"uri": "/hotelx/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " Contains information about quote(s)\nGraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Indicates the valuation key  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy!): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  surcharges([Surcharge!]): List of surcharges of the option returned.  cardTypes([String!]): List of credit cards  addOns(AddOns): Additional information about the option  \nRequired by HotelQuote:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " Contains information about quote(s)\nGraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!): Indicates the valuation key  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy!): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  surcharges([Surcharge!]): List of surcharges of the option returned.  cardTypes([String!]): List of credit cards  addOns(AddOns): Additional information about the option  \nRequired by HotelQuote:    \n"
},
{
	"uri": "/hotelx/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " An option includes hotel information, meal plan, total price, conditions and room description\nGraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!]!    rooms: [Room!]!    price: Price!    supplements: [Supplement!]    surcharges: [Surcharge!]    rateRules: [RateRulesType!]    cancelPolicy: CancelPolicy    remarks: String    addOns: AddOns    id: String!   Show deprecated fields   token: : String! // deprecated from 2019-02-05     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  market(String!): Market of this option.  hotelCode(String!): Code of the hotel in the context selected.  hotelCodeSupplier(String!): Supplier\u0026#39;s hotel code.  hotelName(String): Name of the hotel.  boardCode(String!): Code of the board in the context selected.  boardCodeSupplier(String!): Supplier\u0026#39;s board code.  paymentType(PaymentType!): Indicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  occupancies([Occupancy!]!): List of occupancies for the request  rooms([Room!]!): List of rooms of the option returned.  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  supplements([Supplement!]): List of supplements of the option returned.  surcharges([Surcharge!]): List of surcharges of the option returned.  rateRules([RateRulesType!]): Specifies rate rules of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  addOns(AddOns): Additional information about the option  token(String!): Token for Deep Link  id(String!): Indicates the quote key  \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " An option includes hotel information, meal plan, total price, conditions and room description\nGraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!]!    rooms: [Room!]!    price: Price!    supplements: [Supplement!]    surcharges: [Surcharge!]    rateRules: [RateRulesType!]    cancelPolicy: CancelPolicy    remarks: String    addOns: AddOns    id: String!   Show deprecated fields   token: : String! // deprecated from 2019-02-05     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  market(String!): Market of this option.  hotelCode(String!): Code of the hotel in the context selected.  hotelCodeSupplier(String!): Supplier\u0026#39;s hotel code.  hotelName(String): Name of the hotel.  boardCode(String!): Code of the board in the context selected.  boardCodeSupplier(String!): Supplier\u0026#39;s board code.  paymentType(PaymentType!): Indicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  occupancies([Occupancy!]!): List of occupancies for the request  rooms([Room!]!): List of rooms of the option returned.  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  supplements([Supplement!]): List of supplements of the option returned.  surcharges([Surcharge!]): List of surcharges of the option returned.  rateRules([RateRulesType!]): Specifies rate rules of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  addOns(AddOns): Additional information about the option  token(String!): Token for Deep Link  id(String!): Indicates the quote key  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  optionQuote(HotelOptionQuote): Information about quote.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  optionQuote(HotelOptionQuote): Information about quote.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelruntimeconfiguration/",
	"title": "HotelRuntimeConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelruntimeconfiguration/",
	"title": "HotelRuntimeConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Stored card ID  hotelRuntimeConfigurationData(HotelRuntimeConfigurationData): HotelRuntimeConfigurationData information  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelruntimeconfigurationdata/",
	"title": "HotelRuntimeConfigurationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object  \nRequired by HotelRuntimeConfiguration:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelruntimeconfigurationdata/",
	"title": "HotelRuntimeConfigurationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!): List of parameters object  \nRequired by HotelRuntimeConfiguration:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelruntimeparameter/",
	"title": "HotelRuntimeParameter",
	"tags": [],
	"description": "",
	"content": " template of all fields used by the supplier\nGraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields tagRuntime(TagRuntimeType!):   providerTagName(String!):   show(Boolean!):   pattern(String):   description(String!):   type(MetadataType!):   key(String):   defaultValue(String):   exampleValue(String):   possibleValues([String]!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelruntimeparameter/",
	"title": "HotelRuntimeParameter",
	"tags": [],
	"description": "",
	"content": " template of all fields used by the supplier\nGraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields tagRuntime(TagRuntimeType!):   providerTagName(String!):   show(Boolean!):   pattern(String):   description(String!):   type(MetadataType!):   key(String):   defaultValue(String):   exampleValue(String):   possibleValues([String]!):   \n"
},
{
	"uri": "/hotelx/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " Results from Avail Hotel; contains all the available options for a given date and itinerary\nGraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String): Indicates the context of the response.  stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  requestCriteria(CriteriaSearch): Request Criteria  options([HotelOptionSearch!]): List of options returned according to the request.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " Results from Avail Hotel; contains all the available options for a given date and itinerary\nGraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String): Indicates the context of the response.  stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier\u0026#39;s native format.  requestCriteria(CriteriaSearch): Request Criteria  options([HotelOptionSearch!]): List of options returned according to the request.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " Settings that you can edit for this avail. Values are loaded by default in our Back Office.\nGraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!]   Show deprecated fields   useContext: : Boolean // Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12 Redundant.\u0026#34;)     connectUser: : String // This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from 2018-03-19 Redundant.\u0026#34;)     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String): Indicates the context of the I/O codes (hotel, board, room and rates)  useContext(Boolean): Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12. Redundant.\u0026#34;)  connectUser(String): This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from 2018-03-19. Redundant.\u0026#34;)  client(ID): Client name, this field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.  group(ID): Group whose resources want to be used  timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Returns all the transactions exchanged with the supplier.  businessRules(BusinessRulesInput): Business rules  suppliers([HotelXSupplierInput!]): Array of suppliers. Each one contains its own code, settings and accesses.  plugins([PluginStepInput!]): Array of plugins to execute.  testMode(Boolean): This flag allows only the accesses checked as test. By default is production.  clientTokens([String!]): Used to identify the origin of the request, this is only used in plugins.   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " Settings that you can edit for this avail. Values are loaded by default in our Back Office.\nGraphQL schema definition type HotelSettingsInput {  context: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!]   Show deprecated fields   useContext: : Boolean // Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12 Redundant.\u0026#34;)     connectUser: : String // This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from 2018-03-19 Redundant.\u0026#34;)     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String): Indicates the context of the I/O codes (hotel, board, room and rates)  useContext(Boolean): Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12. Redundant.\u0026#34;)  connectUser(String): This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from 2018-03-19. Redundant.\u0026#34;)  client(ID): Client name, this field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.  group(ID): Group whose resources want to be used  timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Returns all the transactions exchanged with the supplier.  businessRules(BusinessRulesInput): Business rules  suppliers([HotelXSupplierInput!]): Array of suppliers. Each one contains its own code, settings and accesses.  plugins([PluginStepInput!]): Array of plugins to execute.  testMode(Boolean): This flag allows only the accesses checked as test. By default is production.  clientTokens([String!]): Used to identify the origin of the request, this is only used in plugins.   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxaccessinput/",
	"title": "HotelXAccessInput",
	"tags": [],
	"description": "",
	"content": " AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\nGraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessId(ID!): The accessID used to identify the existing access in our Back Office in order to overwrite it. Acts as an identifier in this search. It can either exist or not.  configuration(ConfigurationInput): Information required to access the supplier\u0026#39;s system.  settings(SettingsBaseInput): You can configure an special settings for any access. This level overwrites the search and supplier settings levels.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxaccessinput/",
	"title": "HotelXAccessInput",
	"tags": [],
	"description": "",
	"content": " AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\nGraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessId(ID!): The accessID used to identify the existing access in our Back Office in order to overwrite it. Acts as an identifier in this search. It can either exist or not.  configuration(ConfigurationInput): Information required to access the supplier\u0026#39;s system.  settings(SettingsBaseInput): You can configure an special settings for any access. This level overwrites the search and supplier settings levels.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxboardqueryinput/",
	"title": "HotelXBoardQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxboardqueryinput/",
	"title": "HotelXBoardQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields boardCodes([String!]): Indicates the board codes that you want filter.  access(ID!): Indicates the access that you want use.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxbusinessrulesinput/",
	"title": "HotelXBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.  businessRulesType(BusinessRulesType!): Different business rules to filter the returned options.  \nRequired by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/",
	"title": "HotelXBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!): Options quota per search. Maximum numbers of options to be returned by the search query.  businessRulesType(BusinessRulesType!): Different business rules to filter the returned options.  \nRequired by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxcategoryqueryinput/",
	"title": "HotelXCategoryQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/",
	"title": "HotelXCategoryQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields categoryCodes([String!]): Indicates the category codes that you want filter.  access(ID!): Indicates the access that you want use.  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxcommonsettings/",
	"title": "HotelXCommonSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxcommonsettings/",
	"title": "HotelXCommonSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    HotelXMutation:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxcommonsettingsdata/",
	"title": "HotelXCommonSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   \nRequired by HotelXCommonSettings:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxcommonsettingsdata/",
	"title": "HotelXCommonSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):   \nRequired by HotelXCommonSettings:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxcommonsettingsdatainput/",
	"title": "HotelXCommonSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/",
	"title": "HotelXCommonSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):   \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxdefaultplugin/",
	"title": "HotelXDefaultPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([HotelXParameter!]):   init([HotelXParameter!]):   \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxdefaultplugin/",
	"title": "HotelXDefaultPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([HotelXParameter!]):   init([HotelXParameter!]):   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxdefaultplugininput/",
	"title": "HotelXDefaultPluginInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([ParameterInput!]):   init([ParameterInput!]):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdefaultplugininput/",
	"title": "HotelXDefaultPluginInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([ParameterInput!]):   init([ParameterInput!]):   \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxdefaultpluginstep/",
	"title": "HotelXDefaultPluginStep",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxdefaultpluginstep/",
	"title": "HotelXDefaultPluginStep",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxdefaultpluginstepinput/",
	"title": "HotelXDefaultPluginStepInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/",
	"title": "HotelXDefaultPluginStepInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):   \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxdefaultsettings/",
	"title": "HotelXDefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxdefaultsettings/",
	"title": "HotelXDefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData): Data  adviseMessage([AdviseMessage!]): List of messages  \nRequired by HotelXQuery:    HotelXMutation:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxdefaultsettingsdata/",
	"title": "HotelXDefaultSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsData {  context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeout(Timeout!): Group of timeouts to be used in the differents services  businessRules(BusinessRules!): Business rules.  accesses([String!]): Default acceses  cache([String!]): Cache accesses  plugins([HotelXDefaultPluginStep!]): Default plugins  \nRequired by HotelXDefaultSettings:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxdefaultsettingsdata/",
	"title": "HotelXDefaultSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsData {  context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeout(Timeout!): Group of timeouts to be used in the differents services  businessRules(BusinessRules!): Business rules.  accesses([String!]): Default acceses  cache([String!]): Cache accesses  plugins([HotelXDefaultPluginStep!]): Default plugins  \nRequired by HotelXDefaultSettings:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxdefaultsettingsdatainput/",
	"title": "HotelXDefaultSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsDataInput {  context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeout(TimeoutInput!): Group of timeouts to be used in the differents services  businessRules(HotelXBusinessRulesInput!): Business rules.  defaultAccesses([ID!]): Indicates the default accesses that will added to access list in the Query  defaultPlugins([HotelXDefaultPluginStepInput!]): Indica  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/",
	"title": "HotelXDefaultSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsDataInput {  context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeout(TimeoutInput!): Group of timeouts to be used in the differents services  businessRules(HotelXBusinessRulesInput!): Business rules.  defaultAccesses([ID!]): Indicates the default accesses that will added to access list in the Query  defaultPlugins([HotelXDefaultPluginStepInput!]): Indica  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxdestinationlistinput/",
	"title": "HotelXDestinationListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdestinationlistinput/",
	"title": "HotelXDestinationListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationListInput {  access: ID!    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access  destinationCodes([String!]): Search by hotel codes  maxSize(Int): Maxium number of items per page  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxdestinationsearcherinput/",
	"title": "HotelXDestinationSearcherInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/",
	"title": "HotelXDestinationSearcherInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access  text(String!): Search by hotel name or destination name  maxSize(Int): Maxium number of items per type  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxfilterinput/",
	"title": "HotelXFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxfilterinput/",
	"title": "HotelXFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxfilterplugintypeinput/",
	"title": "HotelXFilterPluginTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!): The Name of the plugin to filter  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/",
	"title": "HotelXFilterPluginTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!): The Step of the plugin to filter  type(String!): The Type of the plugin to filter  name(String!): The Name of the plugin to filter  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxfiltersearchinput/",
	"title": "HotelXFilterSearchInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.  rateRules(RateRulesFilterInput): If requested, only options with the specified rateRules will be returned  plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxfiltersearchinput/",
	"title": "HotelXFilterSearchInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.  rateRules(RateRulesFilterInput): If requested, only options with the specified rateRules will be returned  plugin(HotelXPluginFilterInput): Only is possible to specify one of this filters, it allows to filter which plugins have to be executed or excluded  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxhotelfilterinput/",
	"title": "HotelXHotelFilterInput",
	"tags": [],
	"description": "",
	"content": " By default: Logical AND on all given filters.\nGraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([HotelXHotelFilterInput!]): Logical AND on all given filters.  OR([HotelXHotelFilterInput!]): Logical OR on all given filters.  createdAt_in([DateTime!]): All values that are contained in given list.  createdAt_not_in([DateTime!]): All values that are not contained in given list.  createdAt_lt(DateTime): All values less than the given value.  createdAt_lte(DateTime): All values less than or equal the given value.  createdAt_gt(DateTime): All values greater than the given value.  createdAt_gte(DateTime): All values greater than or equal the given value.  updatedAt_in([DateTime!]): All values that are contained in given list.  updatedAt_not_in([DateTime!]): All values that are not contained in given list.  updatedAt_lt(DateTime): All values less than the given value.  updatedAt_lte(DateTime): All values less than or equal the given value.  updatedAt_gt(DateTime): All values greater than the given value.  updatedAt_gte(DateTime): All values greater than or equal the given value.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxhotelfilterinput/",
	"title": "HotelXHotelFilterInput",
	"tags": [],
	"description": "",
	"content": " By default: Logical AND on all given filters.\nGraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([HotelXHotelFilterInput!]): Logical AND on all given filters.  OR([HotelXHotelFilterInput!]): Logical OR on all given filters.  createdAt_in([DateTime!]): All values that are contained in given list.  createdAt_not_in([DateTime!]): All values that are not contained in given list.  createdAt_lt(DateTime): All values less than the given value.  createdAt_lte(DateTime): All values less than or equal the given value.  createdAt_gt(DateTime): All values greater than the given value.  createdAt_gte(DateTime): All values greater than or equal the given value.  updatedAt_in([DateTime!]): All values that are contained in given list.  updatedAt_not_in([DateTime!]): All values that are not contained in given list.  updatedAt_lt(DateTime): All values less than the given value.  updatedAt_lte(DateTime): All values less than or equal the given value.  updatedAt_gt(DateTime): All values greater than the given value.  updatedAt_gte(DateTime): All values greater than or equal the given value.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxhotellistinput/",
	"title": "HotelXHotelListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID): Indicates the access  hotelCodes([String!]): Search by hotel codes  destinationCodes([String!]): Search by destination codes, only search by minimal destinations  countries([Country!]): Filter by country  ranks([Int!]): Filter by supplier rank  maxSize(Int): Maxium number of items per page  group(ID): The supplier\u0026#39;s group. Only available if all permissions allowed  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxhotellistinput/",
	"title": "HotelXHotelListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID): Indicates the access  hotelCodes([String!]): Search by hotel codes  destinationCodes([String!]): Search by destination codes, only search by minimal destinations  countries([Country!]): Filter by country  ranks([Int!]): Filter by supplier rank  maxSize(Int): Maxium number of items per page  group(ID): The supplier\u0026#39;s group. Only available if all permissions allowed  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxmutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!,     ): HotelXUpdateStatus    createCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    updateCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    book(    input: HotelBookInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBookPayload    cancel(    input: HotelCancelInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelCancelPayload   Show deprecated fields   loadFile( input: String!, ): String!    }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createDefaultSettings(HotelXDefaultSettings): Saves defaults settings to HotelX  updateDefaultSettings(HotelXDefaultSettings): Updates defaults settings to HotelX  updateStatus(HotelXUpdateStatus): Updates status of an entity of HotelX  createCommonSettings(HotelXCommonSettings):   updateCommonSettings(HotelXCommonSettings):   book(HotelBookPayload): Creates a new hotel booking consisting of an option of 1 or more rooms.  cancel(HotelCancelPayload): Cancels an existing hotel booking consisting of an option of 1 or more rooms.  loadFile(String!):   \nRequired by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxparameter/",
	"title": "HotelXParameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!):   value(String!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxparameter/",
	"title": "HotelXParameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!):   value(String!):   \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxpluginfilterinput/",
	"title": "HotelXPluginFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude  \nRequired by HotelXFilterSearchInput:    HotelXFilterInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxpluginfilterinput/",
	"title": "HotelXPluginFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]): Plugins to include (only these plugins will be executed)  excludes([HotelXFilterPluginTypeInput!]): Plugins to exclude  \nRequired by HotelXFilterSearchInput:    HotelXFilterInput:    \n"
},
{
	"uri": "/hotelx/reference/schema/query/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!,     relay: RelayInput!,     token: String,     filter: HotelXHotelFilterInput,     ): HotelConnection!    rooms(    criteria: HotelXRoomQueryInput!,     relay: RelayInput!,     token: String,     ): RoomConnection!    destinations(    criteria: HotelXDestinationListInput!,     relay: RelayInput!,     token: String,     ): DestinationConnection!    destinationSearcher( criteria: HotelXDestinationSearcherInput!, ): [DestinationSearchResult]!    search(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     filterSearch: HotelXFilterSearchInput,     ): HotelSearch    quote(    criteria: HotelCriteriaQuoteInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelQuote    booking(    criteria: HotelCriteriaBookingInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBooking    searchStatusService: ServiceStatus!    quoteStatusService: ServiceStatus!    bookStatusService: ServiceStatus!    cancelStatusService: ServiceStatus!    bookingStatusService: ServiceStatus!    mapping( groupCode: String!, ): Mapping!    runtimeConfiguration( supplierCode: ID!, ): HotelRuntimeConfiguration   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelConfigurationStatusService(ServiceStatus!): Returns status of the hotelX configuration service.  defaultSettings(HotelXDefaultSettings): Obtains the default settings of a group or of the client in the group.  commonSettings(HotelXCommonSettings):   boards(BoardConnection!): Query to obtain Boards  categories(CategoryConnection!): Query to obtain Categories  hotels(HotelConnection!): Query to obtain Hotels  rooms(RoomConnection!): Query to obtain rooms  destinations(DestinationConnection!): Query to obtain Destinations  destinationSearcher([DestinationSearchResult]!): Returns hotels and destinations that contains the indicated text.  search(HotelSearch): Available options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.  quote(HotelQuote): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  booking(HotelBooking): Returns detailed information about books, you can indicated a list of locators or a range date.  searchStatusService(ServiceStatus!): Returns status of the search service.  quoteStatusService(ServiceStatus!): Returns status of the quote service.  bookStatusService(ServiceStatus!): Returns status of the new booking service.  cancelStatusService(ServiceStatus!): Returns status of the cancellation service.  bookingStatusService(ServiceStatus!): Returns status of the booking service.  mapping(Mapping!): Returns map codes of a group. You can get hotel map, room map, and board map.  runtimeConfiguration(HotelRuntimeConfiguration): Returns a configuration teamplate of the supplier  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxquery/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!,     relay: RelayInput!,     token: String,     filter: HotelXHotelFilterInput,     ): HotelConnection!    rooms(    criteria: HotelXRoomQueryInput!,     relay: RelayInput!,     token: String,     ): RoomConnection!    destinations(    criteria: HotelXDestinationListInput!,     relay: RelayInput!,     token: String,     ): DestinationConnection!    destinationSearcher( criteria: HotelXDestinationSearcherInput!, ): [DestinationSearchResult]!    search(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     filterSearch: HotelXFilterSearchInput,     ): HotelSearch    quote(    criteria: HotelCriteriaQuoteInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelQuote    booking(    criteria: HotelCriteriaBookingInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBooking    searchStatusService: ServiceStatus!    quoteStatusService: ServiceStatus!    bookStatusService: ServiceStatus!    cancelStatusService: ServiceStatus!    bookingStatusService: ServiceStatus!    mapping( groupCode: String!, ): Mapping!    runtimeConfiguration( supplierCode: ID!, ): HotelRuntimeConfiguration   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelConfigurationStatusService(ServiceStatus!): Returns status of the hotelX configuration service.  defaultSettings(HotelXDefaultSettings): Obtains the default settings of a group or of the client in the group.  commonSettings(HotelXCommonSettings):   boards(BoardConnection!): Query to obtain Boards  categories(CategoryConnection!): Query to obtain Categories  hotels(HotelConnection!): Query to obtain Hotels  rooms(RoomConnection!): Query to obtain rooms  destinations(DestinationConnection!): Query to obtain Destinations  destinationSearcher([DestinationSearchResult]!): Returns hotels and destinations that contains the indicated text.  search(HotelSearch): Available options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.  quote(HotelQuote): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  booking(HotelBooking): Returns detailed information about books, you can indicated a list of locators or a range date.  searchStatusService(ServiceStatus!): Returns status of the search service.  quoteStatusService(ServiceStatus!): Returns status of the quote service.  bookStatusService(ServiceStatus!): Returns status of the new booking service.  cancelStatusService(ServiceStatus!): Returns status of the cancellation service.  bookingStatusService(ServiceStatus!): Returns status of the booking service.  mapping(Mapping!): Returns map codes of a group. You can get hotel map, room map, and board map.  runtimeConfiguration(HotelRuntimeConfiguration): Returns a configuration teamplate of the supplier  \nRequired by Query:  The query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxroomqueryinput/",
	"title": "HotelXRoomQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.  maxSize(Int): Maxium number of items per page  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxroomqueryinput/",
	"title": "HotelXRoomQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!): Indicates the access that you want use.  roomCodes([String!]): Indicates the room codes that you want filter.  maxSize(Int): Maxium number of items per page  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/hotelxsupplierinput/",
	"title": "HotelXSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier object. Contains its own settings, code and access.\nGraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier. This level overwrites the avail settings level but not the access settings level.  code(String!): Code that represents a supplier in our system. This information is mandatory.  accesses([HotelXAccessInput!]): Array of accesses that can overwrite an existing access information or include a new access for this avail.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxsupplierinput/",
	"title": "HotelXSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier object. Contains its own settings, code and access.\nGraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(SettingsBaseInput): You can configure an special settings for any supplier. This level overwrites the avail settings level but not the access settings level.  code(String!): Code that represents a supplier in our system. This information is mandatory.  accesses([HotelXAccessInput!]): Array of accesses that can overwrite an existing access information or include a new access for this avail.  \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxupdatestatus/",
	"title": "HotelXUpdateStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxupdatestatus/",
	"title": "HotelXUpdateStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData): New value set  adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by HotelXMutation:    \n"
},
{
	"uri": "/hotelx/reference/objects/hotelxupdatestatusdata/",
	"title": "HotelXUpdateStatusData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):   \nRequired by HotelXUpdateStatus:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxupdatestatusdata/",
	"title": "HotelXUpdateStatusData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):   \nRequired by HotelXUpdateStatus:    \n"
},
{
	"uri": "/hotelx/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by HotelXBoardQueryInput:    HotelXCategoryQueryInput:    HotelXHotelListInput:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  HotelRuntimeConfiguration:    AdviseMessage:  List of advise messages.  Board:  Board type.  BoardData:  Board data  Node:    Category:  Category Type  CategoryData:  Category data  Hotel:  Hotel Type  HotelData:  Hotel data  GiataData:  Hotel data obtained from Giata System.  DestinationData:  Information about destinantion  Airport:  Airport Type  Geoname:  Geoname type  AirportData:  Information about the airport  GeonameData:  Geoname data, which contain a reference to his parent location  RoomStatic:  Room Type  RoomData:  Room data  Destination:  Destination Type  HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  HotelXUpdateStatus:    HotelXUpdateStatusData:     "
},
{
	"uri": "/mappea/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by MappeaMapSupplierInput:  # MapSupplier  MappeaSupplierConfirmedInput:    SupplierDetected:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  SupplierData:    Node:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  AccessData:    Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  OrganizationData:    AdviseMessage:  List of advise messages.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    GroupCommonData:    MemberData:    Role:  Permissions determine what operations are allowed on a resource  RoleData:    Resource:  Resources are those used in APIs and Products.  ResourceData:    API:    APIData:    Operation:    OperationData:    Product:  An APIs collection.  ProductData:    Client:  Client identifies who is making the request and holds the configuration assigned to it.  ClientData:    Group:  Groups are organized hierarchically.  GroupData:    ManagedGroup:    ManagedGroupData:    DomainData:     "
},
{
	"uri": "/paymentx/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by AdviseMessage:  List of advise messages.  PaymentXStoredCardIDInput:    PaymentXStoredCard:    Node:    Group:  Groups are organized hierarchically.  PointOfSale:    GroupData:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  GroupCommonData:    MemberData:    API:    APIData:    Resource:  Resources are those used in APIs and Products.  ResourceData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Role:  Permissions determine what operations are allowed on a resource  RoleData:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  AccessData:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    Domain:    Product:  An APIs collection.  ProductData:    DomainData:    Client:  Client identifies who is making the request and holds the configuration assigned to it.  ClientData:    PointOfSaleData:    PaymentXStoredCardInput:     "
},
{
	"uri": "/stats/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by Stats:  The service used to access the stats of every connection that uses the HUB  AdviseMessage:  List of advise messages.  Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Client:  Client identifies who is making the request and holds the configuration assigned to it.  AccessData:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    GroupCommonData:    MemberData:    Role:  Permissions determine what operations are allowed on a resource  RoleData:    Resource:  Resources are those used in APIs and Products.  ResourceData:    API:    APIData:    Operation:    OperationData:    Product:  An APIs collection.  ProductData:    DomainData:    Group:  Groups are organized hierarchically.  GroupData:    ManagedGroup:    ManagedGroupData:    ClientData:    StatsInfo:  Details of an specific error   "
},
{
	"uri": "/travelgatex/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by AccessFilter:    SupplierFilter:    ClientFilter:    ServiceApi:  Information related to a Service API  PointOfSaleFilter:    ProfileFilter:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  AccessData:    Node:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    AdviseMessage:  List of advise messages.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    GroupCommonData:    MemberData:    DomainData:    Client:  Client identifies who is making the request and holds the configuration assigned to it.  ClientData:    Group:  Groups are organized hierarchically.  GroupData:    ManagedGroup:    ManagedGroupData:    API:    Resource:  Resources are those used in APIs and Products.  Role:  Permissions determine what operations are allowed on a resource  APIData:    ResourceData:    RoleData:    ServiceOperation:  Information related to an API operation  PointOfSale:    PointOfSaleData:    Profile:    ProfileData:  Profile data  Entity:    Product:  An APIs collection.  ProductData:    Operation:    OperationData:    HotelXBoardQueryInput:    HotelXCategoryQueryInput:    HotelXHotelListInput:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  HotelRuntimeConfiguration:    Board:  Board type.  BoardData:  Board data  Category:  Category Type  CategoryData:  Category data  Hotel:  Hotel Type  HotelData:  Hotel data  GiataData:  Hotel data obtained from Giata System.  DestinationData:  Information about destinantion  Airport:  Airport Type  Geoname:  Geoname type  AirportData:  Information about the airport  GeonameData:  Geoname data, which contain a reference to his parent location  RoomStatic:  Room Type  RoomData:  Room data  Destination:  Destination Type  HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  PaymentXStoredCardIDInput:    PaymentXStoredCard:    Stats:  The service used to access the stats of every connection that uses the HUB  StatsInfo:  Details of an specific error  AccessInput:  Access input  GroupInput:    CreateClientInput:    UpdateClientInput:    CreateProfileInput:    UpdateProfileInput:    UpdateEntitiesInput:    CreateOrganizationInput:    CreateMemberInput:    CreateGroupInput:    UpdateMemberInput:    UpdateGroupInput:    DeleteMemberInput:    DeleteGroupInput:    HotelXUpdateStatus:    HotelXUpdateStatusData:    MappeaMapSupplierInput:  # MapSupplier  MappeaSupplierConfirmedInput:    SupplierDetected:    PaymentXStoredCardInput:     "
},
{
	"uri": "/hotelx/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  Timeout:    BusinessRules:  List of business rules for filtering options based on your interests.  PaxInput:  Pax object that contains the pax age.  BusinessRulesInput:  List of business rules to use as filter on the options.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  StatsRequest:  Contains internal information.  StatAccess:    Pax:  Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.  Occupancy:  Information about occupancy.  Room:  Contains the room information of the option returned.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Bed:  Contains information about a bed.  CancelPenalty:  Contains information for cancellation penalities..  BookingRoom:    TimeoutInput:    HotelXBusinessRulesInput:  List of business rules to use as filter on the options.  BookRoomInput:  Input BookRoom contains list of pax and the room\u0026#39;s reference.  ExpireDateInput:  The card expiration date  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.   "
},
{
	"uri": "/mappea/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by File:    GetMappeaStatsData:    MappeaConfirmUploadInput:  ## ConfirmUpload  MappeaMapSupplierInput:  # MapSupplier  UploadFileData:    SupplierDetected:    SupplierData:    GroupData:     "
},
{
	"uri": "/paymentx/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by PaymentXExpireDate:  The card expiration date  GroupData:    SupplierData:    ExpireDateInput:  The card expiration date   "
},
{
	"uri": "/stats/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by Ratios:  Ratios details  OperationDetailed:  Stats information per operation  SupplierData:    GroupData:    StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error   "
},
{
	"uri": "/travelgatex/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by SupplierFilter:    SupplierData:    GroupData:    ServiceOperation:  Information related to an API operation  RelayInput:    HotelXHotelListInput:    HotelConnection:  HotelList definition  HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  Timeout:    BusinessRules:  List of business rules for filtering options based on your interests.  PaxInput:  Pax object that contains the pax age.  BusinessRulesInput:  List of business rules to use as filter on the options.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  StatsRequest:  Contains internal information.  StatAccess:    Pax:  Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.  Occupancy:  Information about occupancy.  Room:  Contains the room information of the option returned.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Bed:  Contains information about a bed.  CancelPenalty:  Contains information for cancellation penalities..  BookingRoom:    File:    GetMappeaStatsData:    PaymentXExpireDate:  The card expiration date  Ratios:  Ratios details  OperationDetailed:  Stats information per operation  StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error  TimeoutInput:    HotelXBusinessRulesInput:  List of business rules to use as filter on the options.  BookRoomInput:  Input BookRoom contains list of pax and the room\u0026#39;s reference.  ExpireDateInput:  The card expiration date  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.  MappeaConfirmUploadInput:  ## ConfirmUpload  MappeaMapSupplierInput:  # MapSupplier  UploadFileData:    SupplierDetected:     "
},
{
	"uri": "/hotelx/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026ldquo;{\\\u0026ldquo;int\\\u0026rdquo;: 1, \\\u0026ldquo;string\\\u0026rdquo;: \\\u0026ldquo;value\\\u0026ldquo;}\u0026rdquo;.\nGraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   "
},
{
	"uri": "/travelgatex/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026ldquo;{\\\u0026ldquo;int\\\u0026rdquo;: 1, \\\u0026ldquo;string\\\u0026rdquo;: \\\u0026ldquo;value\\\u0026ldquo;}\u0026rdquo;.\nGraphQL schema definition scalar JSON   Required by AddOns:  Additional information about the option  AddOn:  Additional information about the option   "
},
{
	"uri": "/mappea/reference/scalars/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": " JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.\nGraphQL schema definition scalar JWT   Required by MemberData:     "
},
{
	"uri": "/paymentx/reference/scalars/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": " JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.\nGraphQL schema definition scalar JWT   Required by MemberData:     "
},
{
	"uri": "/stats/reference/scalars/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": " JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.\nGraphQL schema definition scalar JWT   Required by MemberData:     "
},
{
	"uri": "/travelgatex/reference/scalars/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": " JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.\nGraphQL schema definition scalar JWT   Required by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  MemberData:     "
},
{
	"uri": "/hotelx/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes \u0026ldquo;en\u0026rdquo;.\nGraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  HotelXDefaultSettingsData:    Text:    CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelXDefaultSettingsDataInput:    HotelBookInput:  Criteria of book.  HotelCancelInput:  Cancellation Criteria.   "
},
{
	"uri": "/travelgatex/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes \u0026ldquo;en\u0026rdquo;.\nGraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  HotelXDefaultSettingsData:    Text:    CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelXDefaultSettingsDataInput:    HotelBookInput:  Criteria of book.  HotelCancelInput:  Cancellation Criteria.   "
},
{
	"uri": "/hotelx/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " Indicates the location of the hotel\nGraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields address(String): Contains Hotel Address  city(String): Contains the city  zipCode(String): Contains the zipCode.  country(Country!): Country where is the Hotel.  coordinates(Coordinates): Geographical coordinates corresponding to a location.  closestDestination(DestinationData!): Closest destination  airports([Airport!]): Airports  geoNames([Geoname!]!): Detailed information about the destinations geonames  \nRequired by HotelData:  Hotel data  AirportData:  Information about the airport  \n"
},
{
	"uri": "/travelgatex/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " Indicates the location of the hotel\nGraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!    airports: [Airport!]    geoNames: [Geoname!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields address(String): Contains Hotel Address  city(String): Contains the city  zipCode(String): Contains the zipCode.  country(Country!): Country where is the Hotel.  coordinates(Coordinates): Geographical coordinates corresponding to a location.  closestDestination(DestinationData!): Closest destination  airports([Airport!]): Airports  geoNames([Geoname!]!): Detailed information about the destinations geonames  \nRequired by HotelData:  Hotel data  AirportData:  Information about the airport  \n"
},
{
	"uri": "/mappea/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupEdge:    \n"
},
{
	"uri": "/stats/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupEdge:    \n"
},
{
	"uri": "/mappea/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    \n"
},
{
	"uri": "/stats/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    \n"
},
{
	"uri": "/mappea/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):   \nRequired by ManagedGroup:    \n"
},
{
	"uri": "/paymentx/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):   \nRequired by ManagedGroup:    \n"
},
{
	"uri": "/stats/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):   \nRequired by ManagedGroup:    \n"
},
{
	"uri": "/travelgatex/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):   \nRequired by ManagedGroup:    \n"
},
{
	"uri": "/mappea/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   \nRequired by ManagedGroupConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   \nRequired by ManagedGroupConnection:    \n"
},
{
	"uri": "/stats/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   \nRequired by ManagedGroupConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):   \nRequired by ManagedGroupConnection:    \n"
},
{
	"uri": "/hotelx/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " Map codes.\nGraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.  \n"
},
{
	"uri": "/travelgatex/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " Map codes.\nGraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.  \n"
},
{
	"uri": "/mappea/reference/inputobjects/mappeaconfirmuploadinput/",
	"title": "MappeaConfirmUploadInput",
	"tags": [],
	"description": "",
	"content": " ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/",
	"title": "MappeaConfirmUploadInput",
	"tags": [],
	"description": "",
	"content": " ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):   \n"
},
{
	"uri": "/mappea/reference/inputobjects/mappeagetmappeastatsinput/",
	"title": "MappeaGetMappeaStatsInput",
	"tags": [],
	"description": "",
	"content": " GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/",
	"title": "MappeaGetMappeaStatsInput",
	"tags": [],
	"description": "",
	"content": " GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):   \n"
},
{
	"uri": "/mappea/reference/inputobjects/mappeamapsupplierinput/",
	"title": "MappeaMapSupplierInput",
	"tags": [],
	"description": "",
	"content": " MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeamapsupplierinput/",
	"title": "MappeaMapSupplierInput",
	"tags": [],
	"description": "",
	"content": " MapSupplier GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/mappeamutation/",
	"title": "MappeaMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!):   \nRequired by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server  \n"
},
{
	"uri": "/mappea/reference/schema/query/",
	"title": "MappeaQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/mappeaquery/",
	"title": "MappeaQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):   \nRequired by Query:  The query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/mappea/reference/inputobjects/mappeasupplierconfirmedinput/",
	"title": "MappeaSupplierConfirmedInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/",
	"title": "MappeaSupplierConfirmedInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):   \n"
},
{
	"uri": "/mappea/reference/inputobjects/mappeauploadfileinput/",
	"title": "MappeaUploadFileInput",
	"tags": [],
	"description": "",
	"content": " UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeauploadfileinput/",
	"title": "MappeaUploadFileInput",
	"tags": [],
	"description": "",
	"content": " UploadFile GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!):   \n"
},
{
	"uri": "/hotelx/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " Returns the mapping for a group.\nGraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " Returns the mapping for a group.\nGraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " Returns the differents group contexts\nGraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Code of the context  hotels([MappingEntity!]): Mapping of hotels, you can filter by hotel code.  rooms([MappingEntity!]): Mapping of rooms, you can filter by room code.  boards([MappingEntity!]): Mapping of boards, you can filter by board code.  \n"
},
{
	"uri": "/travelgatex/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " Returns the differents group contexts\nGraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Code of the context  hotels([MappingEntity!]): Mapping of hotels, you can filter by hotel code.  rooms([MappingEntity!]): Mapping of rooms, you can filter by room code.  boards([MappingEntity!]): Mapping of boards, you can filter by board code.  \n"
},
{
	"uri": "/hotelx/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " Mapping about client codes with the equivalence per supplier.\nGraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.  \n"
},
{
	"uri": "/travelgatex/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " Mapping about client codes with the equivalence per supplier.\nGraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Client code  contexts([Map!]): You can filter by output context.  \n"
},
{
	"uri": "/hotelx/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " Informs markup applied over supplier price.\nGraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields channel(String): channel of markup application.  currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier plus the markup. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer plus the markup.  exchange(Exchange!): Informs about the currency of origin, and the rate applied over result. This information is mandatory.  rules([Rule!]!): Breakdown of the applied rules for a markup  \n"
},
{
	"uri": "/travelgatex/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " Informs markup applied over supplier price.\nGraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields channel(String): channel of markup application.  currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier plus the markup. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer plus the markup.  exchange(Exchange!): Informs about the currency of origin, and the rate applied over result. This information is mandatory.  rules([Rule!]!): Breakdown of the applied rules for a markup  \n"
},
{
	"uri": "/hotelx/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " Indicates what type of value is the markup, by percentage or is an import.\nGraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:    \n"
},
{
	"uri": "/travelgatex/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " Indicates what type of value is the markup, by percentage or is an import.\nGraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:    \n"
},
{
	"uri": "/hotelx/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " Contains media information.\nGraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): Code.  order(String): Indicates the order priority.  type(ApplicationAreaType!): Indicates the type of the media.  updatedAt(DateTime!): Date updated.  url(URI!): Url.  texts([Text!]): Contains the descriptive.  \n"
},
{
	"uri": "/travelgatex/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " Contains media information.\nGraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): Code.  order(String): Indicates the order priority.  type(ApplicationAreaType!): Indicates the type of the media.  updatedAt(DateTime!): Date updated.  url(URI!): Url.  texts([Text!]): Contains the descriptive.  \n"
},
{
	"uri": "/mappea/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\nGraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OrganizationData:    GroupCommonData:    MemberEdge:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\nGraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by GroupData:    GroupCommonData:    MemberEdge:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\nGraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OrganizationData:    GroupCommonData:    MemberEdge:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\nGraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OrganizationData:    GroupCommonData:    GroupData:    MemberEdge:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/mappea/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/mappea/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    impersonationJWT: JWT!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!): Can members does queries in the platform?  type(MemberType!): Member Type  groups(GroupConnection): which groups the member is in?  roles(RoleConnection): which roles the member has in?  impersonationJWT(JWT!): get a bearer with the same persmissions as the member  \nRequired by Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  \n"
},
{
	"uri": "/paymentx/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    impersonationJWT: JWT!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!): Can members does queries in the platform?  type(MemberType!): Member Type  groups(GroupConnection): which groups the member is in?  roles(RoleConnection): which roles the member has in?  impersonationJWT(JWT!): get a bearer with the same persmissions as the member  \nRequired by Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  \n"
},
{
	"uri": "/stats/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    impersonationJWT: JWT!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!): Can members does queries in the platform?  type(MemberType!): Member Type  groups(GroupConnection): which groups the member is in?  roles(RoleConnection): which roles the member has in?  impersonationJWT(JWT!): get a bearer with the same persmissions as the member  \nRequired by Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  \n"
},
{
	"uri": "/travelgatex/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    impersonationJWT: JWT!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!): Can members does queries in the platform?  type(MemberType!): Member Type  groups(GroupConnection): which groups the member is in?  roles(RoleConnection): which roles the member has in?  impersonationJWT(JWT!): get a bearer with the same persmissions as the member  \nRequired by Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  \n"
},
{
	"uri": "/mappea/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):   \nRequired by MemberConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):   \nRequired by MemberConnection:    \n"
},
{
	"uri": "/stats/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):   \nRequired by MemberConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):   \nRequired by MemberConnection:    \n"
},
{
	"uri": "/mappea/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    \n"
},
{
	"uri": "/paymentx/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    \n"
},
{
	"uri": "/stats/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    \n"
},
{
	"uri": "/travelgatex/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    CreateMemberInput:    \n"
},
{
	"uri": "/hotelx/reference/enums/metadatatype/",
	"title": "MetadataType",
	"tags": [],
	"description": "",
	"content": " Indicates value type of current paramter\nGraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier  \n"
},
{
	"uri": "/travelgatex/reference/enums/metadatatype/",
	"title": "MetadataType",
	"tags": [],
	"description": "",
	"content": " Indicates value type of current paramter\nGraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier  \n"
},
{
	"uri": "/travelgatex/reference/enums/method/",
	"title": "Method",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum Method{   ADD,    DEL,   }   Required by UpdateMemberInput:    \n"
},
{
	"uri": "/stats/reference/enums/modetype/",
	"title": "ModeType",
	"tags": [],
	"description": "",
	"content": " Mode to select which kind of stats do you want query\nGraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  \n"
},
{
	"uri": "/travelgatex/reference/enums/modetype/",
	"title": "ModeType",
	"tags": [],
	"description": "",
	"content": " Mode to select which kind of stats do you want query\nGraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  \n"
},
{
	"uri": "/hotelx/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/mappea/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/paymentx/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/stats/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \n"
},
{
	"uri": "/hotelx/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " Information about occupancy.\nGraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " Information about occupancy.\nGraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.  \n"
},
{
	"uri": "/mappea/reference/objects/onlystatusresponse/",
	"title": "OnlyStatusResponse",
	"tags": [],
	"description": "",
	"content": " Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):   \nRequired by MappeaMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/onlystatusresponse/",
	"title": "OnlyStatusResponse",
	"tags": [],
	"description": "",
	"content": " Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):   \nRequired by MappeaMutation:    \n"
},
{
	"uri": "/mappea/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OperationEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OperationEdge:    \n"
},
{
	"uri": "/stats/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OperationDetailed:  Stats information per operation  OperationEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by OperationEdge:    OperationDetailed:  Stats information per operation  \n"
},
{
	"uri": "/mappea/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   \nRequired by APIData:    \n"
},
{
	"uri": "/paymentx/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   \nRequired by APIData:    \n"
},
{
	"uri": "/stats/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   \nRequired by APIData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  APIData:    \n"
},
{
	"uri": "/mappea/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):   \nRequired by Operation:    \n"
},
{
	"uri": "/paymentx/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):   \nRequired by Operation:    \n"
},
{
	"uri": "/stats/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):   \nRequired by Operation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):   \nRequired by Operation:    \n"
},
{
	"uri": "/stats/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " Stats information per operation\nGraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!): Total hits.  detailedHits([StatsInfo!]): Hits grouped depending on their status  cache(Boolean!): Responsible for the execution of the this stats. If TRUE then cache, else client  \n"
},
{
	"uri": "/travelgatex/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " Stats information per operation\nGraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!): Total hits.  detailedHits([StatsInfo!]): Hits grouped depending on their status  cache(Boolean!): Responsible for the execution of the this stats. If TRUE then cache, else client  \n"
},
{
	"uri": "/mappea/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   \nRequired by OperationConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   \nRequired by OperationConnection:    \n"
},
{
	"uri": "/stats/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   \nRequired by OperationConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):   \nRequired by OperationConnection:    \n"
},
{
	"uri": "/mappea/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "/paymentx/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "/stats/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "/travelgatex/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "/mappea/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nGraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by SupplierData:    AccessData:    ClientData:    DomainData:    \n"
},
{
	"uri": "/paymentx/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nGraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierData:    DomainData:    ClientData:    PointOfSaleData:    \n"
},
{
	"uri": "/stats/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nGraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierData:    DomainData:    ClientData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nGraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierData:    DomainData:    ClientData:    PointOfSaleData:    ProfileData:  Profile data  OrganizationEdge:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationconnection/",
	"title": "OrganizationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/mappea/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    domains: [Domain]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection): Only responses folders.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection): APIs assigned to this group. Products have APIs.  products(ProductConnection): Products asign to a organization  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically)  accesses(AccessConnection): Access resources in a organization  suppliers(SupplierConnection): Supplier resources in a organization  clients(ClientConnection): Clients resources in a organization  domains([Domain]!):   \nRequired by Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  \n"
},
{
	"uri": "/paymentx/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    domains: [Domain]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection): Only responses folders.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection): APIs assigned to this group. Products have APIs.  products(ProductConnection): Products asign to a organization  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically)  accesses(AccessConnection): Access resources in a organization  suppliers(SupplierConnection): Supplier resources in a organization  clients(ClientConnection): Clients resources in a organization  domains([Domain]!):   \nRequired by Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  \n"
},
{
	"uri": "/stats/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    domains: [Domain]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection): Only responses folders.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection): APIs assigned to this group. Products have APIs.  products(ProductConnection): Products asign to a organization  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically)  accesses(AccessConnection): Access resources in a organization  suppliers(SupplierConnection): Supplier resources in a organization  clients(ClientConnection): Clients resources in a organization  domains([Domain]!):   \nRequired by Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    domains: [Domain]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection): Only responses folders.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection): APIs assigned to this group. Products have APIs.  products(ProductConnection): Products asign to a organization  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically)  accesses(AccessConnection): Access resources in a organization  suppliers(SupplierConnection): Supplier resources in a organization  clients(ClientConnection): Clients resources in a organization  domains([Domain]!):   \nRequired by Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationedge/",
	"title": "OrganizationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationEdge {  node: Organization    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Organization):   cursor(String!):   \nRequired by OrganizationConnection:    \n"
},
{
	"uri": "/travelgatex/reference/enums/organizationtemplate/",
	"title": "OrganizationTemplate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OrganizationTemplate{   ORGANIZATION_DEFAULT,   }   Required by CreateOrganizationInput:    \n"
},
{
	"uri": "/channelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "ChannelX Information",
	"content": " This tool extracts the product loaded at InventoryX and sends it to a third partner, normally an OTA. These clients will have the option of loading all the product in their system by selecting the Full Copy tab in InventoryX\u0026rsquo;s extranet, having the possibility to only select the hotels they are interested in copying. Also, each update the provider will be notified to the client in a smaller product request, as they will only receive information that has changed. This is due to the ability of ChannelX to detect what information has changed and which is duplicated.\n  What can I receive Delta: will keep information up to date, sending the different updates that the hotels can have (prices, availability, inventory). Its main use is to receive real time changes in order to have the product up to date.\nFullCopy: sends a complete copy of the product of a hotel or a bunch of them. Its main use is to get a full refresh of the product in case something happens (data base dropped, server down for a period of time\u0026hellip;) or simply as a precaution measure.\nOnce you have received the first element of the Full Copy, please bear in mind that you will have to drop the loaded information, overwrite it with all the incoming information for that hotel or do a proper merge with the changing information.\nHow it works ChannelX is defined by 3 main parts. Each part has its own functionality and helps to define the global flow of the service.\n Product to service: every time a message arrives to the InventoryX service (either inventory notification, availability load, price load\u0026hellip;) and it belongs to a ChannelX relation, the message will be sent to this service. At first, this message will be converted from InventoryX API to an own ChannelX object. Once we have this, the message is sent to a storage database.\n Aggregation of the product: this process will be based on reading each one of the messages stored into application memory. Each of them will be added to a final message structure which will get the product with the final changes. In other words, this process aggregates the different changes received in a period of time and sends one unique ChannelX message. With this, we help the system to reduce message workload, compacting several messages into one in a period of time.\n Product Delivery: once the compacted message is created, application gets ready to send it to the Client.\n  What should I expect from HotelRatePlanInventoryNotif\nEach element can have one of these three states: \u0026lsquo;New\u0026rsquo;, \u0026lsquo;Delta\u0026rsquo;, \u0026lsquo;Remove\u0026rsquo;, each one will be indicated in its correspondent tag.\n New: it means the element was not added before. Add the element in your system with the information provided\n Delta (Edit): it means the element was created before but it has been edited. The element should be already created in your system, change the information of it with the new one. Note: here you will get all the info of the element, as we need to provide it, but it is not extrictly necessary that all of this info has changed, it could only change a part of it. You can override all the information already loaded for that specific element and reload it with the new one or have control of what has changed.\n Remove: it means the element has been removed. You should delete the element in your system and all its dependences. When deleting an element (Hotel, rate, derived rate or room), all the information you will receive about the element in the request is the code. If this happens, you should remove from your system all the elements that are depending on the one to delete.\n  HotelAvailNotif\nIt loads availability and conditions for the different elements. No rate information will be returned except code.\nHotelRatePlanNotif\nIt loads prices and supplements for the different elements. No rate information will be returned except Code, currency and status.\nThings to keep in mind  Our system works with up to 3 types of prices: per room, per occupancy and per standard occupancy. Although it is unusual that a channel works with more than one, it can happen. If this is the case, the 3 price types can coexist and the system should always return the lowest one at availability response. Once conditions are loaded they cannot be deleted, they can only modified by sending same dates with different values. If you do not get information for a certain range of dates that you got previously loaded in the system, do not overwrite them, as this means these days conditions that don\u0026rsquo;t appear in the request have not changed.  "
},
{
	"uri": "/flightx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "See how the TravelgateX platform and APIs fit together",
	"content": "TravelgateX provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface).\nCompletely rebuilt in GraphQL from our many years of experience with travel XML integrations, we are offering state of the art, cutting edge API technology that is quick to learn and makes integration simple and fast. Our first API \u0026ndash; HotelX \u0026ndash; is currently available and provides access to over 600 hotel booking suppliers, with thousands of properties available.\n                                                                                                                                                                                       \nThe TravelgateX platform supports both travel buyers and sellers.\nBUYERS are businesses that provide travel services to their customer base.\nBuyers are:\n Online travel agents, Travel apps, Niche travel operators or Direct-to-consumer travel platforms.  As a buyer, you can use the TravelgateX platform and our HotelX API to integrate a wide selection of realtime, hotel bed booking databases into your applications.\nOur buyers first need to have an agreement with the hotel bed supplier in place, and once that has been arranged, you are able to connect to our HotelX API and to begin displaying hotel bed availability directly in your client applications and interfaces.\n SELLERS are hotel bed and travel service providers who have an inventory of hotel beds (or travel services) that you want to make available for online booking.\nSellers are:\n \u0026gt;B2B travel aggregators, Travel fare aggregators and travel metasearch engines, Large hotel chains, Travel service catalogues, or Direct-to-consumer travel platforms.  As a seller, TravelgateX connects to your realtime booking databases so that you can optimize your vacancies and make them available to buyers. Where you have made set pricing arrangements with particular buyers, specific pricing is displayed as per your agreements. TravelgateX supports suppliers to reach new buyers by helping make it easy for new buyers to sign up for hotel and travel service contracts via our platform.\nOur HotelX API is now live and able to integrate thousands of hotel beds into your client applications. Check out our roadmap pages for details of our forthcoming APIs, including an optional Speed API to speed up response times and bookings to large hotel databases, our next-generation Mappea mapping API, and APIs that help you track statistics and travel demands so that you have better insight into tourism trends and changing consumer patterns. "
},
{
	"uri": "/hotelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "HotelX Overview",
	"content": " The HotelX API is a powerful accomodation aggregation solution that will speed up your travel websites and apps and expand your catalogue of hotel booking services.\nUsing HotelX, you can improve your hotel search response times and their accuracy by customizing aggregated responses based on your preferred criteria.\nThe below map shows our architecture and the average impact on response rates caused by each layer.\n  Each and every layer described in the this figure is explained as follows:\nGraphQL Gateway Our gateway is the only endpoint to access all of our products. The gateway also manages authentication and authorization of our system. You can read about this, here.\nBusiness Logic We’ve added a new layer of business logic in front of the transformation layer of our API. This fast, totally scalable and flexible layer allows you to overwrite everything at the request level, or to leave it as it is. Our API is completely written in Go and Redis for performance and scalability. You can create additional plugins (in Go) in order to add your own logic or add an extra functionality.\nSome of the functionalities available in the business logic layer include:\n Configuration and access management  Hotel, Room and Board Mappings  Agggregate, Sort \u0026amp; Filter results  Add pricing/markups  Currency Exchange  Plugins   Plugins HotelX allows you to add Plugins to our API.\nA plugin is a piece of code that is executed inside our application. There are a few points in the request lifetime where anyone can develop a plugin. A plugin receives the request or response as an input and outputs the changed request or response.\nPlugins are a core package in the Go Programming language. You can learn more about how to use plugins here.\n Transformation Layer The transformation layer takes care of the actual transformation into the Supplier’s specific format and back. It generates requests to the Supplier in an optimal way. (We have learnt how to create optimal connections with suppliers through our years of interacting with them, learning from them and understanding how to send them requests.) Each different Supplier uses a different business logic, and we know exactly which request will be handled most effectively by each Supplier.\nThe transformation layer keeps each and every Supplier integration at the optimal level. Whenever a new version of the Supplier\u0026rsquo;s integration is released, we update our integration. Our team is constantly monitoring the traffic, both automatically and manually in order to make sure the connectivity works.\nOptional Cache Layer Our cache layer, called Speed does exactly what the name says! It is an optional layer that ensures your responses are lightening fast, by creating a cache.\nWe use advanced Machine Learning models to predict how long each cached item will be valid. This takes into account a large number of variables set in the request. The cache is hosted in Google’s BigTable, a “Massively Scalable NoSQL” database, built with performance and scalability in mind.\nSuppliers Each and every Supplier works in a different way. Most use old legacy SOAP APIs and none of them use GraphQL! We have developed integrations for all of them, and we keep them all optimized so that response times are super fast. We are seamlessly connected to more than 600 Suppliers.\nJoin us on Slack to talk with us about how to use HotelX in your websites, apps, and products. You can also send us a Jira service desk request. If you would like any new features or more information in our documentation, send us an issues request.\n "
},
{
	"uri": "/hotelx/plugins/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Plugins Overview. What they are, when they get executed and how to execute them.",
	"content": " Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific functionalities. Any Partner can develop custom Plugins, nevertheless HotelX, HotelX has developed many Plugins available for anyone to use out of the box.\nFlows HotelX query or mutation determine what flow is executed. Plugins can be executed in different Queries or Mutations:\n Search Quote Book Cancel  Steps Step is the minium container where plugins are executed sequentially.\n   Step When is executed     Request After Client requests message to HotelX.   Request Access Before send request to Supplier using Access and after Accesses has been calculated.   Response Option After Supplier responds message. For every option returned.   Response Access After all Access options has been responded.   Response Before HotelX responds message to to Client.    Plugin Types Plugin types supported by HotelX:\n Pre Step: First execution on every step. Hotel Map: Hotel mapping codes. Board Map: Board mapping codes. Room Map: Room mapping codes. Currency Conversion: Currency rate conversion. Net Price: Calculate the net price.  Markup: Markups to supplier price. Aggregation: Aggregate multiple supplier options. Post Step: Last execution on every step.  Plugin Context Execution Once message enters on HotelX it flows over different flows and steps. That\u0026rsquo;s why plugins are executed in different contexts.\nContext allows:\n Read objects involved in current query and/or mutations. Read objects available in all HotelX operations.  With context information developers can personalize plugin features, more information about plugin development can be found here.\nPlugin Step Execution HotelX determine the order and plugin types executed for each step.\n    search quote hotelBook hotelCancel     Request Pre Step\nHotel Map\nPost Step Pre Step\nPost Step Pre Step\nPost Step Pre Step Post Step   Request Access Pre Step\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step   Response Option Pre Step\nBoard Map\nRoom Map\nRate Map\nCurrency Conversion\nNet Price\nCommissionX\nMarkup\nAggregation\nPost Step\nSafety Margin Pre Step\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nCommissionX\nMarkup\nPost Step Pre Step\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nCommissionX\nMarkup\nPost Step Pre Step\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nPost Step   Response Pre Step\nAggregation\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step    Ftp Endpoint ftp://ftp.xmltravelgate.com\nYou will receive access credentials to the FTP server with your Welcome Pack\n Directory Format Root path The structure of the directory should be in the below format, all files should be inside this directory\n/F[Folder code]_[Unique code]/HotelX_[Unique code]/\n F[Folder code]_[Unique code]\n Folder code: corresponds to the folder number. Unique code: corresponds to the folder unique code in our system.  HotelX_[Unique code]\n Unique code: corresponds to the HotelX unique code in our system.   Example  /F**0**\\_**178**/HotelX\\_**179**  "
},
{
	"uri": "/insights-x/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Insights-X Overview",
	"content": " In order to analyze and produce useful insights, Insights-X extracts, loads and consolidates data from products like Hotel-X.\nOnce the data is consolidated in our Data warehouse, we can share data depending on each partner\u0026rsquo;s relationship with TravelgateX:\n Partners: e.g. OTAs and Wholesalers already connected to our platform, they will have access to accurate data regarding their performance, ratios, prices, product usage\u0026hellip; With these insights an accurate benchmarking against competitors is provided so that our partners can gain a competitive advantage. We do this without ever exposing our partners’ data because we use anonymous competitive sets.\n Hoteliers: connected or not to our platform, will also have access to benchmarking information, discover KPIs such ADR and supplier-client demand, which will help maximize room revenue.\n Other Industry partners: not connected to our platform, can have access to insights about segmentation, profitability and demand across global markets. This data will help you forecast your own needs.\n    Datasets Insights-X will allow access to Datasets with structured data to perform any kind of analysis.\nWe support different Dataset publication formats which are documented here\nTooling If you don\u0026rsquo;t have your own reporting tool, the easiest way to interact with Insights-X datasets is via our free Google Data Studio Templates.\nFind out more about TravelgateX free tools in Dataset tooling\nAPI Insights-X API, which allows to query insights using GraphqQL \u0026lsquo;queries\u0026rsquo;, is coming soon. Please submit an issue to our issue tracker if you require these API immediately.\n "
},
{
	"uri": "/mappea/overview/",
	"title": "Overview",
	"tags": [],
	"description": "ChannelX Information",
	"content": "{{ % wip % }}\n"
},
{
	"uri": "/stats/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Stats-X Overview",
	"content": " In order to analyze useful metrics about performance, Stats-X extracts, loads and stores data from all TravelgateX products.\nOnce the metrics are stored in our infrastructure, you can query and analyze your performance using API stats query or TravelgateX Stats Web\n  Working with Stats-X The most important use case working with Stats is to query about your performance.\n"
},
{
	"uri": "/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "TravelgateX Platform Information",
	"content": " This page provides an overview of the TravelgateX platform.\nGraphQL Gateway TravelgateX is the travel API completely based in GraphQL. Unlike many legacy XML Soap APIs, GraphQL enables each client to ask for and receive exactly the data that is needed. Learn more by reading our Learning GraphQL guides.\nOur Gateway is the only endpoint to access all of our APIs. It is written in NodeJS. This makes it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API There are two types of allowed operations in the TravelgateX GraphQL APIs:\n Queries: Queries are \u0026ldquo;read only\u0026rdquo; and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.  GraphQL Endpoint One of the benefits of using GraphQL is that there is only a single endpoint. You can use this endpoint for all the operations you want to perform.\nOur GraphQL API endpoint for all operations is: https://api.travelgatex.com Communicating with the Server To communicate with our GraphQL server, you\u0026rsquo;ll need an access token with the right scopes. You are able to create a token by following the steps mentioned in the Security Overview.\nMaking Requests The best place to test how to make GraphQL queries in TravelgateX is to start with our interactive API Playground. You can also use curl or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header Accept-Encoding: gzip  To query GraphQL using curl, make a POST request with a JSON payload. The payload must contain a string called query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{hotelX{searchStatusService{code description}}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  GraphQL Reference There are several ways you can learn more about the full capabilities of our TravelgateX GraphQL data model\n Reference Documentation provides complete reference documentation for all resources, fields and objects in our GraphQL data model (called a Schema).\n API Playground provides an interactive, multi-column schema definition based on the GraphiQL tool, but with many additional features.\n GraphQL-voyager displays our GraphQL API as an interactive relational database-like graph to help you understand the different parent and child tables within our schema.\n Learning GraphQL is a set of resources to get to know GraphQL and to understand our schema.\n  Examples Check out our GraphQL Playground to get started with making your first query and to work thropugh other query examples.\nKeep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n You can easily share your Queries with others by generating a link using the share button available in the API Playground. This share function works as a Pastebin for your GraphQL query and includes the context (endpoint, HTTP headers, open tabs, etc) so you can share exactly what your Playground query setup looks like.\nConventions TravelgateX follows some conventions about schema definition:\n Relay schema implementation Definition of custom scalar types Token Based Authentication  "
},
{
	"uri": "/travelgatex/security/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn platform security",
	"content": " This page describes the how security is implemented in TravelgateX platform.\nIntroduction TravelgateX offers a fine-grained access control and visibility for centrally managing Resources, which are granted to Partners belonging to Organizations.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it\u0026rsquo;s an API Key or a JSON Web Token (JWT).\nAPI Key The API key takes cares of the authentication of applications, normally created as a Service Account with limited scopes. The correct way to send it to GraphQL server is via HTTP Header:\nAll queries must include a HTTP Header with the API key inserted in the format: * API key: \u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot;\nIf you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey 64780338-49c8-4439-7c7d-d03c2033b145\u0026quot;\n curl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey 64780338-49c8-4439-7c7d-d03c2033b145\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Creating an API Key For development and testing purposes, please use the following Test API Key 64780338-49c8-4439-7c7d-d03c2033b145\n JSON Web Token (JWT) The JSON Web Token takes cares of the authentication of users, normally created as User.\nWhenever the user wants to access a protected resource, the user agent should send the JWT, in the Authorization header using the Bearer schema. The content of the header should look like the following:\nAll queries to a protected resources must include an Authorization Header using the Bearer schema. The content of the header should look like the following: \u0026quot;Authorization: Bearer xxxxxxxxx\u0026quot;\n Authorization Once the Member is authenticated we must authorize the Partner to use the requested Resource.\nTravelgateX Identity and Access Management let Partner administrators authorize who can take action on specific resources. This gives you full control and internal visilibity to manage your resources centrally.\n"
},
{
	"uri": "/hotelx/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequired by BoardConnection:  BoardList definition  CategoryConnection:  CategoryList definition  HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  \n"
},
{
	"uri": "/mappea/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequired by AccessConnection:    GroupConnection:    MemberConnection:    APIConnection:    ProductConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ManagedGroupConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequired by PaymentXStoredCardConnection:    GroupConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ProductConnection:    \n"
},
{
	"uri": "/stats/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequired by StatsConnection:    GroupConnection:    AccessConnection:    MemberConnection:    APIConnection:    ProductConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ManagedGroupConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequired by AccessConnection:    SupplierConnection:    ClientConnection:    PointOfSaleConnection:    ProfileConnection:    EntityConnection:    OrganizationConnection:    ProductConnection:    MemberConnection:    GroupConnection:    APIConnection:    ResourceConnection:    RoleConnection:    OperationConnection:    ManagedGroupConnection:    BoardConnection:  BoardList definition  CategoryConnection:  CategoryList definition  HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  PaymentXStoredCardConnection:    StatsConnection:    \n"
},
{
	"uri": "/mappea/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \nRequired by AccessData:    \n"
},
{
	"uri": "/paymentx/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \nRequired by AccessData:    \n"
},
{
	"uri": "/stats/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \nRequired by AccessData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \nRequired by AccessData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " Parameters Input.\nGraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " Parameters Input.\nGraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \nRequired by AccessInput:  Access input  \n"
},
{
	"uri": "/hotelx/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\nGraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.  \n"
},
{
	"uri": "/travelgatex/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\nGraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!): Specifies the age pax.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " Pax object that contains the pax age.\nGraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!): Pax age.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " Pax object that contains the pax age.\nGraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!): Pax age.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\nGraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cardType(String!): Indicates the card type.  holder(HolderInput!): Contains owner\u0026#39;s name  number(String!): Contains credit card number  CVC(String!): Contains credit card CVC  expire(ExpireDateInput!): Contains credit card expiration date  \nRequired by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\nGraphQL schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cardType(String!): Indicates the card type.  holder(HolderInput!): Contains owner\u0026#39;s name  number(String!): Contains credit card number  CVC(String!): Contains credit card CVC  expire(ExpireDateInput!): Contains credit card expiration date  \nRequired by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/hotelx/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " Options payment type\nGraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  \n"
},
{
	"uri": "/travelgatex/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " Options payment type\nGraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  \n"
},
{
	"uri": "/paymentx/reference/objects/paymentxexpiredate/",
	"title": "PaymentXExpireDate",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  \nRequired by PaymentXStoredCardData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxexpiredate/",
	"title": "PaymentXExpireDate",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!): Month MM  year(Int!): Year yy  \nRequired by PaymentXStoredCardData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxmutation/",
	"title": "PaymentXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card  \nRequired by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server  \n"
},
{
	"uri": "/paymentx/reference/schema/query/",
	"title": "PaymentXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!): Returns the stored card list. For security, this query never will return clear card information.   storedCard(PaymentXStoredCard!): Returns a stored card information.   \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxquery/",
	"title": "PaymentXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!): Returns status of the vault service.  allStoredCards(PaymentXStoredCardConnection!): Returns the stored card list. For security, this query never will return clear card information.   storedCard(PaymentXStoredCard!): Returns a stored card information.   \nRequired by Query:  The query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/paymentx/reference/objects/paymentxstoredcard/",
	"title": "PaymentXStoredCard",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  \nRequired by PaymentXStoredCardEdge:    PaymentXQuery:    PaymentXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxstoredcard/",
	"title": "PaymentXStoredCard",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Stored card ID  storedCardData(PaymentXStoredCardData): Stored card information  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  \nRequired by PaymentXQuery:    PaymentXStoredCardEdge:    PaymentXMutation:    \n"
},
{
	"uri": "/paymentx/reference/objects/paymentxstoredcardconnection/",
	"title": "PaymentXStoredCardConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):   \nRequired by PaymentXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxstoredcardconnection/",
	"title": "PaymentXStoredCardConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):   \nRequired by PaymentXQuery:    \n"
},
{
	"uri": "/paymentx/reference/objects/paymentxstoredcarddata/",
	"title": "PaymentXStoredCardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instance(Group!): Asigned instance of PaymentX of the booked property.  pointOfSale(PointOfSale!): Physical point of sale where the card was registered.  bookingReference(String!): Indicates the referece of the booking  checkOut(Date): Check-out, booking date Format: YYYY-MM-DD  checkIn(Date): Check-in, booking date Format: YYYY-MM-DD  cardType(String): Indicates the card type.  holder(Holder): Contains owner\u0026#39;s name  number(CardNumber): Card Number (16 digits typically)  CVC(CVC): Contains credit card CVC  expire(PaymentXExpireDate): Contains credit card expiration date  \nRequired by PaymentXStoredCard:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxstoredcarddata/",
	"title": "PaymentXStoredCardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instance(Group!): Asigned instance of PaymentX of the booked property.  pointOfSale(PointOfSale!): Physical point of sale where the card was registered.  bookingReference(String!): Indicates the referece of the booking  checkOut(Date): Check-out, booking date Format: YYYY-MM-DD  checkIn(Date): Check-in, booking date Format: YYYY-MM-DD  cardType(String): Indicates the card type.  holder(Holder): Contains owner\u0026#39;s name  number(CardNumber): Card Number (16 digits typically)  CVC(CVC): Contains credit card CVC  expire(PaymentXExpireDate): Contains credit card expiration date  \nRequired by PaymentXStoredCard:    \n"
},
{
	"uri": "/paymentx/reference/objects/paymentxstoredcardedge/",
	"title": "PaymentXStoredCardEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):   \nRequired by PaymentXStoredCardConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/paymentxstoredcardedge/",
	"title": "PaymentXStoredCardEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):   \nRequired by PaymentXStoredCardConnection:    \n"
},
{
	"uri": "/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/",
	"title": "PaymentXStoredCardFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([PaymentXStoredCardFilterInput!]): Logical AND on all given filters.  OR([PaymentXStoredCardFilterInput!]): Logical OR on all given filters.  checkIn_in([DateTime!]): All values that are contained in given list.  checkIn_not_in([DateTime!]): All values that are not contained in given list.  checkIn_lt(DateTime): All values less than the given value.  checkIn_lte(DateTime): All values less than or equal the given value.  checkIn_gt(DateTime): All values greater than the given value.  checkIn_gte(DateTime): All values greater than or equal the given value.  checkOut_in([DateTime!]): All values that are contained in given list.  checkOut_not_in([DateTime!]): All values that are not contained in given list.  checkOut_lt(DateTime): All values less than the given value.  checkOut_lte(DateTime): All values less than or equal the given value.  checkOut_gt(DateTime): All values greater than the given value.  checkOut_gte(DateTime): All values greater than or equal the given value.  holder_like(HolderInput): All values with holder like the given value.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/",
	"title": "PaymentXStoredCardFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([PaymentXStoredCardFilterInput!]): Logical AND on all given filters.  OR([PaymentXStoredCardFilterInput!]): Logical OR on all given filters.  checkIn_in([DateTime!]): All values that are contained in given list.  checkIn_not_in([DateTime!]): All values that are not contained in given list.  checkIn_lt(DateTime): All values less than the given value.  checkIn_lte(DateTime): All values less than or equal the given value.  checkIn_gt(DateTime): All values greater than the given value.  checkIn_gte(DateTime): All values greater than or equal the given value.  checkOut_in([DateTime!]): All values that are contained in given list.  checkOut_not_in([DateTime!]): All values that are not contained in given list.  checkOut_lt(DateTime): All values less than the given value.  checkOut_lte(DateTime): All values less than or equal the given value.  checkOut_gt(DateTime): All values greater than the given value.  checkOut_gte(DateTime): All values greater than or equal the given value.  holder_like(HolderInput): All values with holder like the given value.  \n"
},
{
	"uri": "/paymentx/reference/inputobjects/paymentxstoredcardidinput/",
	"title": "PaymentXStoredCardIDInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentxstoredcardidinput/",
	"title": "PaymentXStoredCardIDInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID): Indicates the code of the booked property  bookingReference(String): Indicates the referece of the booking  code(ID): Stored card ID returned in allStoredCards query  \n"
},
{
	"uri": "/paymentx/reference/inputobjects/paymentxstoredcardinput/",
	"title": "PaymentXStoredCardInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID!): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID!): Indicates the code of the booked property  bookingReference(String!): Indicates the referece of the booking  checkOut(Date): Check-out, booking date Format: YYYY-MM-DD  checkIn(Date): Check-in, booking date Format: YYYY-MM-DD  cardType(String): Indicates the card type.  holder(HolderInput): Contains owner\u0026#39;s name  number(CardNumber!): Contains credit card number  CVC(CVC!): Contains credit card CVC  expire(ExpireDateInput!): Contains credit card expiration date  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentxstoredcardinput/",
	"title": "PaymentXStoredCardInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID!): Asigned instance of PaymentX of the booked property.  pointOfSaleCode(ID!): Indicates the code of the booked property  bookingReference(String!): Indicates the referece of the booking  checkOut(Date): Check-out, booking date Format: YYYY-MM-DD  checkIn(Date): Check-in, booking date Format: YYYY-MM-DD  cardType(String): Indicates the card type.  holder(HolderInput): Contains owner\u0026#39;s name  number(CardNumber!): Contains credit card number  CVC(CVC!): Contains credit card CVC  expire(ExpireDateInput!): Contains credit card expiration date  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!): Indicates where the plugin will be executed.  pluginsType([PluginsInput!]): Indicates the plugin that will be executed.  \n"
},
{
	"uri": "/hotelx/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " Plugin Step Type. https://docs.travelgatex.com/hotelx/plugins/overview/\nGraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:    \n"
},
{
	"uri": "/travelgatex/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " Plugin Step Type. https://docs.travelgatex.com/hotelx/plugins/overview/\nGraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:    \n"
},
{
	"uri": "/hotelx/reference/enums/plugintype/",
	"title": "PluginType",
	"tags": [],
	"description": "",
	"content": " Plugin Type. https://docs.travelgatex.com/hotelx/plugins/overview/\nGraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,    COMMISSION,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:    \n"
},
{
	"uri": "/travelgatex/reference/enums/plugintype/",
	"title": "PluginType",
	"tags": [],
	"description": "",
	"content": " Plugin Type. https://docs.travelgatex.com/hotelx/plugins/overview/\nGraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,    COMMISSION,   }   Required by HotelXDefaultPlugin:    PluginsInput:  Plugin to execute.  HotelXDefaultPluginInput:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!]): Plugin\u0026#39;s parameters  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(PluginType!): type of the plugins to execute  name(String!): name of plugin to execute  parameters([ParameterInput!]): Plugin\u0026#39;s parameters  \n"
},
{
	"uri": "/paymentx/reference/objects/pointofsale/",
	"title": "PointOfSale",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of advise messages.  \nRequired by PaymentXStoredCardData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/pointofsale/",
	"title": "PointOfSale",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of advise messages.  \nRequired by PointOfSaleEdge:    PaymentXStoredCardData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/pointofsaleconnection/",
	"title": "PointOfSaleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleConnection {  edges: [PointOfSaleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PointOfSaleEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/paymentx/reference/objects/pointofsaledata/",
	"title": "PointOfSaleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner  \nRequired by PointOfSale:    \n"
},
{
	"uri": "/travelgatex/reference/objects/pointofsaledata/",
	"title": "PointOfSaleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): POS Identifier  name(String): POS Name  owner(Organization): POS owner  \nRequired by PointOfSale:    \n"
},
{
	"uri": "/travelgatex/reference/objects/pointofsaleedge/",
	"title": "PointOfSaleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleEdge {  node: PointOfSale    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(PointOfSale):   cursor(String!):   \nRequired by PointOfSaleConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pointofsalefilter/",
	"title": "PointOfSaleFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleFilter {  code: [ID]    groupID: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code([ID]):   groupID([ID]):   owner([ID!]):   \n"
},
{
	"uri": "/hotelx/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\nGraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer.  exchange(Exchange!): Provides information about the currency of original, and its rate applied over the results returned by the Supplier. This information is mandatory.  markups([Markup!]): Informs markup applied over supplier price.  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  RoomPrice:  Specifies the room price.  PriceBreakdown:  Information about daily price.  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  BookingRoom:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\nGraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer.  exchange(Exchange!): Provides information about the currency of original, and its rate applied over the results returned by the Supplier. This information is mandatory.  markups([Markup!]): Informs markup applied over supplier price.  \nRequired by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  RoomPrice:  Specifies the room price.  PriceBreakdown:  Information about daily price.  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking  BookingRoom:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/hotelx/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " Information about daily price.\nGraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.  price(Price!): Specifies the daily price.  \n"
},
{
	"uri": "/travelgatex/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " Information about daily price.\nGraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.  price(Price!): Specifies the daily price.  \n"
},
{
	"uri": "/hotelx/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!): Is binding.  net(Float!): Specifies the import net.  gross(Float): Specifies the import gross.  exchange(Exchange!): Specifies the exchange.  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!): Specifies the currency.  binding(Boolean!): Is binding.  net(Float!): Specifies the import net.  gross(Float): Specifies the import gross.  exchange(Exchange!): Specifies the exchange.  \n"
},
{
	"uri": "/mappea/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " An APIs collection.\nGraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ProductEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " An APIs collection.\nGraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ProductEdge:    \n"
},
{
	"uri": "/stats/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " An APIs collection.\nGraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ProductEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " An APIs collection.\nGraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ProductEdge:    \n"
},
{
	"uri": "/mappea/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    \n"
},
{
	"uri": "/paymentx/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  OrganizationData:    \n"
},
{
	"uri": "/mappea/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs  \nRequired by Product:  An APIs collection.  \n"
},
{
	"uri": "/paymentx/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs  \nRequired by Product:  An APIs collection.  \n"
},
{
	"uri": "/stats/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs  \nRequired by Product:  An APIs collection.  \n"
},
{
	"uri": "/travelgatex/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs  \nRequired by Product:  An APIs collection.  \n"
},
{
	"uri": "/mappea/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):   \nRequired by ProductConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):   \nRequired by ProductConnection:    \n"
},
{
	"uri": "/stats/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):   \nRequired by ProductConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):   \nRequired by ProductConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequired by ProfileEdge:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  \n"
},
{
	"uri": "/travelgatex/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/travelgatex/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " Profile data\nGraphQL schema definition type ProfileData {  code: ID!    label: String    type: ProfileType    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Profile Identifier  label(String): Profile label  type(ProfileType): Profile type  entities(EntityConnection): Profile Entities (suppliers/clients)  group(Group): Indicates the group where the Client belongs  owner(Organization): Profile owner  isActive(Boolean): Active profile  isPublished(Boolean): Profile is published  \nRequired by Profile:    \n"
},
{
	"uri": "/travelgatex/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):   \nRequired by ProfileConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/profilefilter/",
	"title": "ProfileFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileFilter {  profileIDs: [ID]    groupIDs: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields profileIDs([ID]):   groupIDs([ID]):   owner([ID!]):   \n"
},
{
	"uri": "/travelgatex/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   Required by ProfileData:  Profile data  CreateProfileInput:    UpdateProfileInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " Information about room promotions(offers).\nGraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.  effectiveDate(Date): Promotion effective date.  expireDate(Date): Promotion expire date.  \n"
},
{
	"uri": "/travelgatex/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " Information about room promotions(offers).\nGraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.  effectiveDate(Date): Promotion effective date.  expireDate(Date): Promotion expire date.  \n"
},
{
	"uri": "/hotelx/reference/objects/property/",
	"title": "Property",
	"tags": [],
	"description": "",
	"content": " Indicates Property type\nGraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code  \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/property/",
	"title": "Property",
	"tags": [],
	"description": "",
	"content": " Indicates Property type\nGraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String): Indicates property type  code(String): Indicates property type code  \nRequired by HotelData:  Hotel data  \n"
},
{
	"uri": "/mappea/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):   \nRequired by SupplierData:    \n"
},
{
	"uri": "/paymentx/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):   \nRequired by SupplierData:    \n"
},
{
	"uri": "/stats/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):   \nRequired by SupplierData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):   \nRequired by SupplierData:    \n"
},
{
	"uri": "/travelgatex/reference/schema/query/",
	"title": "Query",
	"tags": [],
	"description": "",
	"content": " The query root of TravelgateX\u0026rsquo;s GraphQL interface.\nGraphQL schema definition type Query {  admin: AdminQuery    hotelX: HotelXQuery    mappea: MappeaQuery    paymentX: PaymentXQuery    stats: StatsQuery   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields admin(AdminQuery): The admin query root of TravelgateX\u0026#39;s for implementing GraphQL query.  hotelX(HotelXQuery): The hotelX product query root for implementing GraphQL query.  mappea(MappeaQuery): The Mappea product query root for implementing GraphQL query.  paymentX(PaymentXQuery): The PaymentX product query root for implementing GraphQL query.  stats(StatsQuery): The Stats product query root for implementing GraphQL query.  \n"
},
{
	"uri": "/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "How to get support for using our APIs",
	"content": "   Four steps to using our API If you\u0026rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below:\n STEP 1: Get to know our APIs. Read through our documentation and test some sample calls in our API Playground. You can use a test API key and start experimenting with our APIs straight away. STEP 2: Sign an agreement with hotel suppliers to be using their booking databases. You can see a full list of suppliers and contact the ones you want to connect with by visiting our supplier database. STEP 3: Sign up for TravelgateX API access. Send us an email and tell us who you are and which hotel suppliers you are working with. TravelgateX works with over 600 suppliers, and we are the first certified partner to work with EAN Rapid. We will send you a welcome pack with your login details and further guides on how to make your first integration. STEP 4: Start generating new business! Read through our integration guides and start integrating our HotelX API into your booking applications. BONUS STEP: TravelgateX is using one of the latest and most advanced API technologies, GraphQL. It is quick to learn and immensely powerful. Check out our free GraphQL guides to learn more about this cutting edge technology.  Join the TravelgateX partner program In order to start building your own API, you\u0026rsquo;ll need to join the TravelgateX partner program. You can sign up through us directly to become a partner.\nProduct Quick Start Choose which APIs you would like to use from our constantly growing catalog of travel services.\n HotelX: Search, check availability, compare prices, and book hotels in realtime with our API Stats: (Coming soon!) Track all of your API calls to our travel services, the calls being made, the response times and the status codes. Ideal for managing DevOps for large travel websites. Insights: (Coming soon!) Stand back and get a wider perspective on your travel customers with a forthcoming data API that will reveal the trends and travel patterns of your customer base. All the messages, all the searches, everything you’ve done on TravelgateX will be available in Insight. Mappea: (Coming soon!) The fastest way to display maps of your hotels, travel services and HotelX bookings on your website, in customer communication, and in your client apps.  Interactive, user-friendly documentation All of our endpoint reference documentation is generated from our GraphQL schema. Use the schema column in the navigation of the API Playground to see and understand what information will be returned by each query.\nBe part of the community The TravelgateX community of developers are creative, clever, data-driven, fun, and helpful. Join us on Slack and contribute to the conversation, learn from other developers working in the travel industry, and share your own best practices and unique insights. Feel connected and be part of a bigger industry sector by participating in our forums. It is also a great place to learn and share new GraphQL practices and to learn about our other tools, including our payments platform, and how other developers are connecting with our 600+ suppliers.\nOur developer and support team also actively participate in our forums, so when you post a query, we are quick to respond and solve your integration challenge. The GraphQL playground has all of our API functionalities baked in, so you can quickly explore making queries and testing calls, but if you need more help, you can post in our Slack channel, or you can contact us through our Jira Service Desk using the username and password that we sent you in your welcome pack. (But don\u0026rsquo;t worry if you can\u0026rsquo;t find it, send us an email and we will send it to you again.)\nAlthough the API has been designed to be very intuitive and easy to read, we are aware that some concepts can be confusing. That\u0026rsquo;s why we\u0026rsquo;re here to help! You have access to complete API documentation guide, an interactive version available inside the Playground, a large community of experienced members ready to answer your questions, and a support team ready to solve any doubts that you might have during the process.\nCan\u0026rsquo;t find your answer? Got any technical questions or need support from our team? We’re here to help. Get in touch through Jira Service Desk using the username and password that has been sent to you together with the welcome pack. Let us know if you haven\u0026rsquo;t received it, or can\u0026rsquo;t find it, so we can send it to your email address again.\n"
},
{
	"uri": "/hotelx/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " Information about the rate of the option returned.\nGraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the rate code.  name(String): Specifies the rate name.  effectiveDate(Date): Start date in which the rate becomes effective.  expireDate(Date): Expire date of the rate.  \n"
},
{
	"uri": "/travelgatex/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " Information about the rate of the option returned.\nGraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the rate code.  name(String): Specifies the rate name.  effectiveDate(Date): Start date in which the rate becomes effective.  expireDate(Date): Expire date of the rate.  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " If requested, only options with the specified rateRules will be returned\nGraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!]): if excludes not nil: only options without rate rules and options with rate rules that haven\u0026#39;t been sent in excludes will be returned  \nRequired by FilterInput:   Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026#34;deprecated from 2018-08-20. Please, use filterSearch\u0026#34;)  HotelXFilterSearchInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " If requested, only options with the specified rateRules will be returned\nGraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!]): if excludes not nil: only options without rate rules and options with rate rules that haven\u0026#39;t been sent in excludes will be returned  \nRequired by FilterInput:   Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026#34;deprecated from 2018-08-20. Please, use filterSearch\u0026#34;)  HotelXFilterSearchInput:    \n"
},
{
	"uri": "/hotelx/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/mappea/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/paymentx/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/stats/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/travelgatex/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/stats/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " Ratios details\nGraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!): Quotes needed to do a booking  \nRequired by StatsData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " Ratios details\nGraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!): Quotes needed to do a booking  \nRequired by StatsData:    \n"
},
{
	"uri": "/hotelx/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " Contains reference codes.\nGraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking  \nRequired by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " Contains reference codes.\nGraphQL schema definition type Reference {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String): Client reference booking  supplier(String): Supplier reference booking  \nRequired by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/relayinput/",
	"title": "RelayInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/relayinput/",
	"title": "RelayInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):   \n"
},
{
	"uri": "/hotelx/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " Contains information about the Resort.\nGraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.  description(String): Specifies the resort description.  \nRequired by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " Contains information about the Resort.\nGraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.  description(String): Specifies the resort description.  \nRequired by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/mappea/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " Resources are those used in APIs and Products.\nGraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ResourceEdge:    ManagedGroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " Resources are those used in APIs and Products.\nGraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ResourceEdge:    ManagedGroupData:    \n"
},
{
	"uri": "/stats/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " Resources are those used in APIs and Products.\nGraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ResourceEdge:    ManagedGroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " Resources are those used in APIs and Products.\nGraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupData:    ResourceEdge:    \n"
},
{
	"uri": "/mappea/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   \nRequired by RoleData:    APIData:    \n"
},
{
	"uri": "/paymentx/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   \nRequired by APIData:    RoleData:    \n"
},
{
	"uri": "/stats/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   \nRequired by RoleData:    APIData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  APIData:    RoleData:    \n"
},
{
	"uri": "/mappea/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection): which API have asigned this resource?  roles(RoleConnection): which roles are asigned or are possibles in this resource?  \nRequired by Resource:  Resources are those used in APIs and Products.  \n"
},
{
	"uri": "/paymentx/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection): which API have asigned this resource?  roles(RoleConnection): which roles are asigned or are possibles in this resource?  \nRequired by Resource:  Resources are those used in APIs and Products.  \n"
},
{
	"uri": "/stats/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection): which API have asigned this resource?  roles(RoleConnection): which roles are asigned or are possibles in this resource?  \nRequired by Resource:  Resources are those used in APIs and Products.  \n"
},
{
	"uri": "/travelgatex/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection): which API have asigned this resource?  roles(RoleConnection): which roles are asigned or are possibles in this resource?  \nRequired by Resource:  Resources are those used in APIs and Products.  \n"
},
{
	"uri": "/mappea/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   \nRequired by ResourceConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   \nRequired by ResourceConnection:    \n"
},
{
	"uri": "/stats/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   \nRequired by ResourceConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):   \nRequired by ResourceConnection:    \n"
},
{
	"uri": "/hotelx/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.  errors([Error!]): Errors that lead the service to stop  warnings([Warning!]): Potentially harmful situations or errors that do not stop the service  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest): Application stats  auditData(AuditData): Data sent and received in the supplier’s original format.  errors([Error!]): Errors that lead the service to stop  warnings([Warning!]): Potentially harmful situations or errors that do not stop the service  \n"
},
{
	"uri": "/hotelx/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.",
	"content": "We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.\nHere is the GitHub project with Public Roadmap of TravelgateX.\nThe Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc\u0026hellip;\n"
},
{
	"uri": "/insights-x/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "We have created a GitHub Project where we will keep you updated with all the future modifications regarding this Project",
	"content": "We have created a GitHub Project where we will keep you updated with all the future modifications regarding this Project.\nHere you will find the GitHub project with the Public Roadmap of TravelgateX.\nThe Project has a few columns that act as the status, whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the Insights-X, Documentation, etc\u0026hellip;\n"
},
{
	"uri": "/travelgatex/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.",
	"content": "We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.\nHere is the GitHub project with Public Roadmap of TravelgateX.\nThe Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc\u0026hellip;\n"
},
{
	"uri": "/mappea/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " Permissions determine what operations are allowed on a resource\nGraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by RoleEdge:    ManagedGroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " Permissions determine what operations are allowed on a resource\nGraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupData:    RoleEdge:    \n"
},
{
	"uri": "/stats/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " Permissions determine what operations are allowed on a resource\nGraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by RoleEdge:    ManagedGroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " Permissions determine what operations are allowed on a resource\nGraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by ManagedGroupData:    RoleEdge:    \n"
},
{
	"uri": "/mappea/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   \nRequired by MemberData:    ResourceData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    MemberData:    ResourceData:    \n"
},
{
	"uri": "/stats/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   \nRequired by MemberData:    ResourceData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  MemberData:    GroupData:    ResourceData:    \n"
},
{
	"uri": "/mappea/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!): Has resource Create permission?  isRead(Boolean!): Has resource Create permission?  isUpdate(Boolean!): Has resource Update permission?  isDelete(Boolean!): Has resource Delete permission?  isEnable(Boolean!): Is role enabled or not?  isExecutable(Boolean!): Has resource Executable permission?  isSpecial(Boolean!): Has any other non-basic permission/s?  special(String): Special permission  resources(ResourceConnection): Resources used  \nRequired by Role:  Permissions determine what operations are allowed on a resource  \n"
},
{
	"uri": "/paymentx/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!): Has resource Create permission?  isRead(Boolean!): Has resource Create permission?  isUpdate(Boolean!): Has resource Update permission?  isDelete(Boolean!): Has resource Delete permission?  isEnable(Boolean!): Is role enabled or not?  isExecutable(Boolean!): Has resource Executable permission?  isSpecial(Boolean!): Has any other non-basic permission/s?  special(String): Special permission  resources(ResourceConnection): Resources used  \nRequired by Role:  Permissions determine what operations are allowed on a resource  \n"
},
{
	"uri": "/stats/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!): Has resource Create permission?  isRead(Boolean!): Has resource Create permission?  isUpdate(Boolean!): Has resource Update permission?  isDelete(Boolean!): Has resource Delete permission?  isEnable(Boolean!): Is role enabled or not?  isExecutable(Boolean!): Has resource Executable permission?  isSpecial(Boolean!): Has any other non-basic permission/s?  special(String): Special permission  resources(ResourceConnection): Resources used  \nRequired by Role:  Permissions determine what operations are allowed on a resource  \n"
},
{
	"uri": "/travelgatex/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!): Has resource Create permission?  isRead(Boolean!): Has resource Create permission?  isUpdate(Boolean!): Has resource Update permission?  isDelete(Boolean!): Has resource Delete permission?  isEnable(Boolean!): Is role enabled or not?  isExecutable(Boolean!): Has resource Executable permission?  isSpecial(Boolean!): Has any other non-basic permission/s?  special(String): Special permission  resources(ResourceConnection): Resources used  \nRequired by Role:  Permissions determine what operations are allowed on a resource  \n"
},
{
	"uri": "/mappea/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):   \nRequired by RoleConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):   \nRequired by RoleConnection:    \n"
},
{
	"uri": "/stats/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):   \nRequired by RoleConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):   \nRequired by RoleConnection:    \n"
},
{
	"uri": "/mappea/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:    \n"
},
{
	"uri": "/paymentx/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:    \n"
},
{
	"uri": "/stats/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:    \n"
},
{
	"uri": "/travelgatex/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:    \n"
},
{
	"uri": "/hotelx/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " Contains the room information of the option returned.\nGraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!): ID reference to the occupancy  code(String!): Indicates the room code  description(String): Description about the room  refundable(Boolean): Identifies if the room is refundable or not.  units(Int): Number of rooms available with the same type.  roomPrice(RoomPrice!): Specifies the room price.  beds([Bed!]): List of beds.  ratePlans([RatePlan!]): Daily break downs rate plan.  promotions([Promotion!]): Daily break downs promotions.  \n"
},
{
	"uri": "/travelgatex/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " Contains the room information of the option returned.\nGraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!): ID reference to the occupancy  code(String!): Indicates the room code  description(String): Description about the room  refundable(Boolean): Identifies if the room is refundable or not.  units(Int): Number of rooms available with the same type.  roomPrice(RoomPrice!): Specifies the room price.  beds([Bed!]): List of beds.  ratePlans([RatePlan!]): Daily break downs rate plan.  promotions([Promotion!]): Daily break downs promotions.  \n"
},
{
	"uri": "/hotelx/reference/objects/roomconnection/",
	"title": "RoomConnection",
	"tags": [],
	"description": "",
	"content": " RoomList definition\nGraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roomconnection/",
	"title": "RoomConnection",
	"tags": [],
	"description": "",
	"content": " RoomList definition\nGraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/hotelx/reference/objects/roomdata/",
	"title": "RoomData",
	"tags": [],
	"description": "",
	"content": " Room data\nGraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  \nRequired by RoomStatic:  Room Type  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomdata/",
	"title": "RoomData",
	"tags": [],
	"description": "",
	"content": " Room data\nGraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  \nRequired by RoomStatic:  Room Type  \n"
},
{
	"uri": "/hotelx/reference/objects/roomedge/",
	"title": "RoomEdge",
	"tags": [],
	"description": "",
	"content": " RoomList Edge definition\nGraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):   \nRequired by RoomConnection:  RoomList definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomedge/",
	"title": "RoomEdge",
	"tags": [],
	"description": "",
	"content": " RoomList Edge definition\nGraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):   \nRequired by RoomConnection:  RoomList definition  \n"
},
{
	"uri": "/hotelx/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/hotelx/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " Specifies the room price.\nGraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  \nRequired by Room:  Contains the room information of the option returned.  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " Specifies the room price.\nGraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  \nRequired by Room:  Contains the room information of the option returned.  \n"
},
{
	"uri": "/hotelx/reference/objects/roomstatic/",
	"title": "RoomStatic",
	"tags": [],
	"description": "",
	"content": " Room Type\nGraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by RoomEdge:  RoomList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomstatic/",
	"title": "RoomStatic",
	"tags": [],
	"description": "",
	"content": " Room Type\nGraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by RoomEdge:  RoomList Edge definition  \n"
},
{
	"uri": "/hotelx/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!): value applied by this rule  \n"
},
{
	"uri": "/travelgatex/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!): value applied by this rule  \n"
},
{
	"uri": "/hotelx/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‘schema’ in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are “read only” and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "/mappea/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‘schema’ in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are “read only” and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "/paymentx/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‘schema’ in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are “read only” and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "/stats/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‘schema’ in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are “read only” and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "/travelgatex/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‘schema’ in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are “read only” and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "/travelgatex/reference/objects/serviceapi/",
	"title": "ServiceApi",
	"tags": [],
	"description": "",
	"content": " Information related to a Service API\nGraphQL schema definition type ServiceApi {  code: ID!    name: String!    operations: [ServiceOperation]    error: [Error!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Service API ID  name(String!): Service API Name  operations([ServiceOperation]): Operations that a Service Api has  error([Error!]): Errors  \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/serviceapifilter/",
	"title": "ServiceApiFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceApiFilter {  ApiName: String    OperationName: String    OperationType: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields ApiName(String):   OperationName(String):   OperationType(String):   \n"
},
{
	"uri": "/stats/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " Services Api available.\nGraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   "
},
{
	"uri": "/travelgatex/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " Services Api available.\nGraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   "
},
{
	"uri": "/travelgatex/reference/objects/serviceoperation/",
	"title": "ServiceOperation",
	"tags": [],
	"description": "",
	"content": " Information related to an API operation\nGraphQL schema definition type ServiceOperation {  code: ID!    name: String!    type: String!    travelOperation: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Service Operation ID  name(String!): Service Operation name  type(String!): Service Operation type  travelOperation(Int!): Service Operation Travel Operation ID (1: avail) (2: reservation) (3: batch) (4: batchLongRun)  \nRequired by ServiceApi:  Information related to a Service API  \n"
},
{
	"uri": "/stats/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   "
},
{
	"uri": "/travelgatex/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   "
},
{
	"uri": "/hotelx/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " Indicates the status of the service\nGraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " Indicates the status of the service\nGraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): Status code  type(String): Status type  description(String): Status description  \nRequired by HotelXQuery:    \n"
},
{
	"uri": "/hotelx/concepts/settings/",
	"title": "Settings",
	"tags": [],
	"description": "Learn about settings in HotelX",
	"content": " On this page you will learn more about settings in HotelX.\nWhat are settings? Settings are the common configuration that will be used in order to build the request to the supplier/s.\nThere are two kind of settings, overridable and partially overridable. You can find the partially overridable settings in the first level of settings and are known as HotelX_Settings. These settings are formed by some non-overridable settings such as \u0026ldquo;group\u0026rdquo; and \u0026ldquo;testMode\u0026rdquo;, some overridable global settings such as \u0026ldquo;timeout\u0026rdquo;, \u0026ldquo;auditTransactions\u0026rdquo;, etc., and some overridable baseSettings such as \u0026ldquo;businessRules\u0026rdquo;.\nWe have several levels of settings that can be combined in order to build customised settings. The hierarchy of heritage and type of settings for each level is:\n0 - Criteria common settings fields (currency, auditTransactions, businessRules, etc.)\n1 - Access Settings [Base Settings]\n2 - Supplier Settings [Base Settings]\n3 - Query Settings [HotelX Settings]\n4 - Database Access Settings [Base Settings]\n5 - Database Supplier Settings [Base Settings]\n6 - Database Client Settings [Default Settings]\n7 - Database Group Settings [Default Settings]\nAny field that is empty in one level, will be filled in with the value of the following level.\nA special case is input fields specified in Criteria: if one field of Criteria is specified in settings, the value of Criteria is the most significant. It is mandatory that after the settings heritage flow, each field of Default Settings will be filled, because these settings will be sent to supplier.\nWhere can Settings be applied? Settings can be applied to the following operations:\nQueries These queries have the same settings configuration Click here to see configuration\n Search\n Search setting example  Quote\n Quote setting example  Booking List\n Booking List setting example   Mutations These mutations have the same settings configuration Click here to see configuration\n Book\n Example : Book setting example  Cancel\n Example : Quote setting example    Should you need to modify any fields of the database Settings, please contact with our support team. Please find an example of each type of the settings above:\nHotelX Settings Query/Mutation settings\n\u0026quot;settings\u0026quot;: { \u0026quot;group\u0026quot;: \u0026quot;HotelX_test\u0026quot;, \u0026quot;client\u0026quot;: \u0026quot;xtg\u0026quot;, \u0026quot;context\u0026quot;: \u0026quot;HOTELTEST\u0026quot;, \u0026quot;testMode\u0026quot;: true, \u0026quot;timeout\u0026quot;: 18000, \u0026quot;language\u0026quot;:\u0026quot;es\u0026quot;, \u0026quot;suppliers\u0026quot;: [ { \u0026quot;code\u0026quot;: \u0026quot;HOTELTEST\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;auditTransactions\u0026quot;: true }, \u0026quot;accesses\u0026quot;: [ { \u0026quot;accessId\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot; } } ] } ] }  Base Settings Access or supplier settings (from Query or database)\n\u0026quot;settings\u0026quot;: { \u0026quot;timeout\u0026quot;: 300, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;businessRules\u0026quot;: { \u0026quot;optionsQuota\u0026quot;: 500, \u0026quot;businessRulesType\u0026quot;: \u0026quot;CHEAPER_AMOUNT\u0026quot; } }  [Default Settings] Group or client database settings\n\u0026quot;settings\u0026quot;: { \u0026quot;context\u0026quot;: \u0026quot;CONTEXT\u0026quot;, \u0026quot;client\u0026quot;: \u0026quot;client\u0026quot;, \u0026quot;timeout\u0026quot;: { \u0026quot;search\u0026quot;: 18000, \u0026quot;quote\u0026quot;: 25000, \u0026quot;book\u0026quot;: 180000 }, \u0026quot;language\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;ES\u0026quot;, \u0026quot;market\u0026quot;: \u0026quot;ES\u0026quot;, \u0026quot;businessRules\u0026quot;: { \u0026quot;optionsQuota\u0026quot;: 0, \u0026quot;businessRulesType\u0026quot;: \u0026quot;CHEAPER_AMOUNT\u0026quot; } }  If we send a Query with the previous HotelX Settings, the configuration that will be sent to the supplier is:\n Context: \u0026ldquo;CONTEXT\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Language: \u0026ldquo;en\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From HotelX Query/Mutation Settings\n Currency: \u0026ldquo;EUR\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access Settings in Query/Mutation (Base Settings)\n Nationality: \u0026ldquo;ES\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Market: \u0026ldquo;ES\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Timeout: 18000\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From HotelX Query/Mutation Settings  AuditTransactions: true\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Supplier Settings in Query/Mutation (Base Settings)\n BusinessRules/OptionQuota: 0\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access DB Settings (Base Settings)\n BusinessRules/BusinessRulesType: \u0026ldquo;CHEAPER_AMOUNT\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access DB Settings (Base Settings)\n  Plugins As you can observe in GraphQL API Specifications, the input field \u0026ldquo;plugins\u0026rdquo; allows to insert plugins that will be executed during execution process.\nDefault Plugins Additionally, it is possible to load default plugins in our database. Currently, the only way to load these plugins in our database is contacting with our Customer Care team. These default plugins will be executed in all the Queries and Mutations specified above if no filters are specified.\nFilter Plugins Besides, in the Query/Mutation Settings, there is a filter that allows to include or exclude the execution of any plugin. The way it works is similar to the Access Filter in Hotel-Search and it is only allowed specifying includes or excludes, not both. HotelX always reads Query/Mutation input plugins and then joins them to the loaded default plugins of our database, then applies the plugin filters.\n On the one hand, if you specify plugins to be included, these plugins will be executed only if they are found in all the joined plugins (Query/Mutation input plugins in settings and Default plugins from database).\n On the other hand, if you specify plugins be to excluded, these will be deleted from joined plugins and consequently not executed.\n  The way of indicating which plugins we want to include/exclude is introducing Step, Type and Name of the plugin in the Query/Mutation.\n"
},
{
	"uri": "/hotelx/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " Contains the time out and business rules of a supplier or an access.\nGraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Specifies if transactions exchanged with the supplier have to be logged or not.  businessRules(BusinessRulesInput): Business rules  currency(Currency): The currency  \nRequired by HotelXSupplierInput:  Supplier object. Contains its own settings, code and access.  HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " Contains the time out and business rules of a supplier or an access.\nGraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Specifies if transactions exchanged with the supplier have to be logged or not.  businessRules(BusinessRulesInput): Business rules  currency(Currency): The currency  \nRequired by HotelXSupplierInput:  Supplier object. Contains its own settings, code and access.  HotelXAccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  \n"
},
{
	"uri": "/hotelx/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds  \nRequired by StatsRequest:  Contains internal information.  StatPlugin:    StatAccess:    StatTransaction:    \n"
},
{
	"uri": "/travelgatex/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds  \nRequired by StatsRequest:  Contains internal information.  StatPlugin:    StatAccess:    StatTransaction:    \n"
},
{
	"uri": "/hotelx/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access name  total(Stat!): Total access time  staticConfiguration(Stat): Static configuration time  hotels(Int!): Number of hotels  zones(Int!): Number of zones  cities(Int!): Number of cities  requestAccess(StatPlugin): Access request time  responseAccess(StatPlugin): Access response time  transactions([StatTransaction!]!): Detail transaction time  plugins([StatPlugin!]): Plugin execution time  \n"
},
{
	"uri": "/travelgatex/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access name  total(Stat!): Total access time  staticConfiguration(Stat): Static configuration time  hotels(Int!): Number of hotels  zones(Int!): Number of zones  cities(Int!): Number of cities  requestAccess(StatPlugin): Access request time  responseAccess(StatPlugin): Access response time  transactions([StatTransaction!]!): Detail transaction time  plugins([StatPlugin!]): Plugin execution time  \n"
},
{
	"uri": "/hotelx/reference/objects/statplugin/",
	"title": "StatPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time  \nRequired by StatsRequest:  Contains internal information.  StatAccess:    \n"
},
{
	"uri": "/travelgatex/reference/objects/statplugin/",
	"title": "StatPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Plugin name  total(Stat!): total plugin time  \nRequired by StatsRequest:  Contains internal information.  StatAccess:    \n"
},
{
	"uri": "/hotelx/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!): Total transaction time  buildRequest(Stat!): Build request time  workerCommunication(Stat!): Worker connection time  parseResponse(Stat!): Parse response time  \n"
},
{
	"uri": "/travelgatex/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(String!): Extra information about transaction.  total(Stat!): Total transaction time  buildRequest(Stat!): Build request time  workerCommunication(Stat!): Worker connection time  parseResponse(Stat!): Parse response time  \n"
},
{
	"uri": "/stats/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " The service used to access the stats of every connection that uses the HUB\nGraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   statsData(StatsData): The data returned by a Stats query.  adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequired by StatsEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " The service used to access the stats of every connection that uses the HUB\nGraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   statsData(StatsData): The data returned by a Stats query.  adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequired by StatsEdge:    \n"
},
{
	"uri": "/stats/reference/objects/statsasset/",
	"title": "StatsAsset",
	"tags": [],
	"description": "",
	"content": " Asset of an specific error\nGraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!): Endpoint to download the full XML of the request with its response  \n"
},
{
	"uri": "/travelgatex/reference/objects/statsasset/",
	"title": "StatsAsset",
	"tags": [],
	"description": "",
	"content": " Asset of an specific error\nGraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!): Endpoint to download the full XML of the request with its response  \n"
},
{
	"uri": "/stats/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   \nRequired by StatsQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   \nRequired by StatsQuery:    \n"
},
{
	"uri": "/stats/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(Access!): Owner access  client(Client!): Owner client  from(DateTime!): From date of search  to(DateTime!): To date of search  ratios(Ratios!): Ratios details  operations([OperationDetailed!]): Stats information per operation  \nRequired by Stats:  The service used to access the stats of every connection that uses the HUB  \n"
},
{
	"uri": "/travelgatex/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(Access!): Owner access  client(Client!): Owner client  from(DateTime!): From date of search  to(DateTime!): To date of search  ratios(Ratios!): Ratios details  operations([OperationDetailed!]): Stats information per operation  \nRequired by Stats:  The service used to access the stats of every connection that uses the HUB  \n"
},
{
	"uri": "/stats/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Stats):   cursor(String!):   \nRequired by StatsConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Stats):   cursor(String!):   \nRequired by StatsConnection:    \n"
},
{
	"uri": "/stats/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)\nGraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!]    serviceOperations: [ID!]    from: DateTime!    to: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields groups([ID!]): Groups codes list  accesses([ID!]): List of accesses  suppliers([ID!]): List of suppliers  clients([ID!]): List of clients  mode(ModeType!): Buyer or Seller  serviceApis([ServiceApiType!]): List of services apis  operation([ServiceOperationType!]): List of services operations  serviceOperations([ID!]):   from(DateTime!): From date of search  to(DateTime!): To date of search  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)\nGraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!]    serviceOperations: [ID!]    from: DateTime!    to: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields groups([ID!]): Groups codes list  accesses([ID!]): List of accesses  suppliers([ID!]): List of suppliers  clients([ID!]): List of clients  mode(ModeType!): Buyer or Seller  serviceApis([ServiceApiType!]): List of services apis  operation([ServiceOperationType!]): List of services operations  serviceOperations([ID!]):   from(DateTime!): From date of search  to(DateTime!): To date of search  \n"
},
{
	"uri": "/stats/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " Details of an specific error\nGraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(StatsInfoTypes!): Stats type  hits(Int!): Total hits  time(Int!): Average time (ms)  assets([StatsAsset!]): Details about errors.  \n"
},
{
	"uri": "/travelgatex/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " Details of an specific error\nGraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(StatsInfoTypes!): Stats type  hits(Int!): Total hits  time(Int!): Average time (ms)  assets([StatsAsset!]): Details about errors.  \n"
},
{
	"uri": "/stats/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error  \n"
},
{
	"uri": "/travelgatex/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error  \n"
},
{
	"uri": "/stats/reference/schema/query/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields report(StatsConnection!): The report query, represents all of the entry points into our object graph  \n"
},
{
	"uri": "/travelgatex/reference/objects/statsquery/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields report(StatsConnection!): The report query, represents all of the entry points into our object graph  \nRequired by Query:  The query root of TravelgateX\u0026#39;s GraphQL interface.  \n"
},
{
	"uri": "/hotelx/reference/objects/statsrequest/",
	"title": "StatsRequest",
	"tags": [],
	"description": "",
	"content": " Contains internal information.\nGraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields total(Stat!): Total transaction time  validation(Stat!): Request validation time  process(Stat!): Process time. Contains communication time, parse time and plugin time.  configuration(Stat!): Build access time  request(Stat!): Request time  response(Stat!): Response time  requestPlugin(StatPlugin): Plugin execution time  responsePlugin(StatPlugin): Plugin execution time  hotels(Int!): Number of hotels  zones(Int!): Number of zones  cities(Int!): Number of cities  dockerID(String!): Docker Id  Accesses([StatAccess!]!): Detail access time  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/objects/statsrequest/",
	"title": "StatsRequest",
	"tags": [],
	"description": "",
	"content": " Contains internal information.\nGraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields total(Stat!): Total transaction time  validation(Stat!): Request validation time  process(Stat!): Process time. Contains communication time, parse time and plugin time.  configuration(Stat!): Build access time  request(Stat!): Request time  response(Stat!): Response time  requestPlugin(StatPlugin): Plugin execution time  responsePlugin(StatPlugin): Plugin execution time  hotels(Int!): Number of hotels  zones(Int!): Number of zones  cities(Int!): Number of cities  dockerID(String!): Docker Id  Accesses([StatAccess!]!): Detail access time  \nRequired by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/hotelx/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " Indicartes options status\nGraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  \n"
},
{
	"uri": "/travelgatex/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " Indicartes options status\nGraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  \n"
},
{
	"uri": "/hotelx/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by ServiceStatus:  Indicates the status of the service  RelayInput:    HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  HotelXDestinationSearcherInput:    HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  HotelXDefaultSettingsData:    AdviseMessage:  List of advise messages.  HotelXDefaultPluginStep:    HotelXDefaultPlugin:    HotelXParameter:    ExternalMessage:    BoardEdge:  BoardList Edge definition  PageInfo:    BoardData:  Board data  Error:  Application errors  Text:    CategoryEdge:  CategoryList Edge definition  CategoryData:  Category data  HotelEdge:  HotelList Edge definition  HotelData:  Hotel data  Property:  Indicates Property type  Location:  Indicates the location of the hotel  Contact:  Contact Data.  Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.  DestinationData:  Information about destinantion  AirportData:  Information about the airport  GeonameData:  Geoname data, which contain a reference to his parent location  RoomEdge:  RoomList Edge definition  RoomData:  Room data  DestinationEdge:  DestinationList Edge definition  HotelXSupplierInput:  Supplier object. Contains its own settings, code and access.  ConfigurationInput:  The information and credentials required to access the supplier’s system.  ParameterInput:  Parameters Input.  PluginsInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    StatsRequest:  Contains internal information.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  Warning:  Application warnings  StatPlugin:    StatAccess:    StatTransaction:    Transactions:  Supplier transaction  Room:  Contains the room information of the option returned.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  BookableOptionSearch:    Bed:  Contains information about a bed.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  Markup:  Informs markup applied over supplier price.  Rule:    Resort:  Contains information about the Resort.  AddOn:  Additional information about the option  HotelOptionQuote:  Contains information about quote(s)  CriteriaBookingReferencesInput:  Criteria by references  BookReferenceInput:  Reference object that contains the client reference and/or supplier reference.  HotelBookingDetail:  Contains information about booking  Reference:  Contains reference codes.  Holder:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  BookingHotel:    BookingRoom:    MappingContext:  Returns the differents group contexts  MappingEntity:  Mapping about client codes with the equivalence per supplier.  Map:  Map codes.  HotelRuntimeParameter:  template of all fields used by the supplier  HotelXDefaultSettingsDataInput:    HotelBookInput:  Criteria of book.  HotelCancelInput:  Cancellation Criteria.  HotelXDefaultPluginInput:    PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  HolderInput:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.  HotelCancelDetail:  Contains information about cancel  HotelXMutation:     "
},
{
	"uri": "/mappea/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by MappeaGetMappeaStatsInput:  # GetMappeaStats  Error:  Application errors  Warning:  Application warnings  File:    GetMappeaStatsData:    MappeaUploadFileInput:  ## UploadFile  UploadFileData:    SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  AccessEdge:    PageInfo:    AccessData:    Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  OrganizationData:    AdviseMessage:  List of advise messages.  GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:    GroupEdge:     "
},
{
	"uri": "/paymentx/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by AdviseMessage:  List of advise messages.  PaymentXStoredCardIDInput:    ExternalMessage:    HolderInput:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  PaymentXStoredCardEdge:    PageInfo:    PaymentXStoredCardData:    Holder:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  GroupData:    GroupCommonData:    GroupEdge:    MemberData:    MemberEdge:    APIEdge:    APIData:    ResourceEdge:    ResourceData:    OperationEdge:    OperationData:    ManagedGroupEdge:    RoleData:    AccessEdge:    AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    RoleEdge:    PointOfSaleData:    PaymentXStoredCardInput:     "
},
{
	"uri": "/stats/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:  List of advise messages.  AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  AccessEdge:    OrganizationData:    GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:     "
},
{
	"uri": "/travelgatex/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by ServiceApiFilter:    ServiceApi:  Information related to a Service API  AccessEdge:    PageInfo:    AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    AdviseMessage:  List of advise messages.  GroupCommonData:    MemberData:    ExternalMessage:    SupplierEdge:    ClientEdge:    GroupData:    ManagedGroupEdge:    APIData:    ResourceData:    RoleData:    ServiceOperation:  Information related to an API operation  PointOfSaleEdge:    PointOfSaleData:    ProfileEdge:    ProfileData:  Profile data  EntityEdge:    OrganizationEdge:    ProductEdge:    ProductData:    MemberEdge:    GroupEdge:    APIEdge:    ResourceEdge:    RoleEdge:    OperationEdge:    OperationData:    ServiceStatus:  Indicates the status of the service  RelayInput:    HotelConnection:  HotelList definition  RoomConnection:  RoomList definition  DestinationConnection:  DestinationList definition  HotelXDestinationSearcherInput:    HotelCriteriaSearchInput:  Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  HotelXDefaultSettingsData:    HotelXDefaultPluginStep:    HotelXDefaultPlugin:    HotelXParameter:    BoardEdge:  BoardList Edge definition  BoardData:  Board data  Text:    CategoryEdge:  CategoryList Edge definition  CategoryData:  Category data  HotelEdge:  HotelList Edge definition  HotelData:  Hotel data  Property:  Indicates Property type  Location:  Indicates the location of the hotel  Contact:  Contact Data.  Amenity:  An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.  Media:  Contains media information.  DestinationData:  Information about destinantion  AirportData:  Information about the airport  GeonameData:  Geoname data, which contain a reference to his parent location  RoomEdge:  RoomList Edge definition  RoomData:  Room data  DestinationEdge:  DestinationList Edge definition  HotelXSupplierInput:  Supplier object. Contains its own settings, code and access.  ConfigurationInput:  The information and credentials required to access the supplier’s system.  ParameterInput:  Parameters Input.  PluginsInput:  Plugin to execute.  HotelXFilterPluginTypeInput:    StatsRequest:  Contains internal information.  CriteriaSearch:  Search criteria contains destination, travel dates and the number of pax in each room.  HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  Warning:  Application warnings  StatPlugin:    StatAccess:    StatTransaction:    Transactions:  Supplier transaction  Room:  Contains the room information of the option returned.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  BookableOptionSearch:    Bed:  Contains information about a bed.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  Markup:  Informs markup applied over supplier price.  Rule:    Resort:  Contains information about the Resort.  AddOn:  Additional information about the option  HotelOptionQuote:  Contains information about quote(s)  CriteriaBookingReferencesInput:  Criteria by references  BookReferenceInput:  Reference object that contains the client reference and/or supplier reference.  HotelBookingDetail:  Contains information about booking  Reference:  Contains reference codes.  Holder:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  BookingHotel:    BookingRoom:    MappingContext:  Returns the differents group contexts  MappingEntity:  Mapping about client codes with the equivalence per supplier.  Map:  Map codes.  HotelRuntimeParameter:  template of all fields used by the supplier  MappeaGetMappeaStatsInput:  # GetMappeaStats  File:    GetMappeaStatsData:    PaymentXStoredCardIDInput:    HolderInput:  Holder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.  PaymentXStoredCardEdge:    PaymentXStoredCardData:    StatsEdge:    HotelXMutation:    AccessInput:  Access input  CreateClientInput:    UpdateClientInput:    CreateProfileInput:    UpdateProfileInput:    CreateOrganizationInput:    CreateMemberInput:    CreateGroupInput:    UpdateMemberInput:    UpdateGroupInput:    HotelXDefaultSettingsDataInput:    HotelBookInput:  Criteria of book.  HotelCancelInput:  Cancellation Criteria.  HotelXDefaultPluginInput:    PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.  HotelCancelDetail:  Contains information about cancel  MappeaUploadFileInput:  ## UploadFile  UploadFileData:    PaymentXStoredCardInput:     "
},
{
	"uri": "/community/style-guide/",
	"title": "Style Guide",
	"tags": [],
	"description": "Community Style Guide",
	"content": " This document provides guidance for contributors to the TravelgateX Platform Community site.\n Caveats Types of documentation Designing a doc Visual assets File organization in GitHub General content guidelines General style guidelines Markdown usage Voice and tone Including source code Writing resources  Caveats Let\u0026rsquo;s get these things out of the way right up front:\n Don\u0026rsquo;t sell or do marketing. -\u0026gt; TBD Don\u0026rsquo;t editorialize. Document. Assure that the content you\u0026rsquo;re writting is not duplicated on another page, avoid incosistences. Unify. Don\u0026rsquo;t make assumptions about your reader unless you state the assumptions up front. Don\u0026rsquo;t use absolutes, such as \u0026ldquo;instantaneously,\u0026rdquo; \u0026ldquo;perfectly,\u0026rdquo; \u0026ldquo;absolutely,\u0026rdquo; \u0026ldquo;totally,\u0026rdquo; or \u0026ldquo;100%,\u0026rdquo; unless you can back up what you\u0026rsquo;re saying with documentation. Don\u0026rsquo;t use superlatives, such as \u0026ldquo;the best solution,\u0026rdquo; \u0026ldquo;the perfect answer,\u0026rdquo; and so on. Don\u0026rsquo;t use logos or trademarks unless you have explicit permission. Don\u0026rsquo;t make performance claims unless you back them up with current data. This means either external links, or links to benchmarking code. Don\u0026rsquo;t include diagrams or pictures that you have no legal rights to include. Don\u0026rsquo;t alter or truncate TravelgateX Platform product names. For example, it’s HotelX, not hotelX. Don\u0026rsquo;t alter or truncate other names. For example, it\u0026rsquo;s Cloud BigQuery, not BigQuery.  Types of documentation Documentation submitted by contributors is usually one of this types:\n Concept: Helps the user gain deeper understanding of a product or architecture. Concept docs answer questions such as \u0026ldquo;What is X?\u0026rdquo; and \u0026ldquo;How does X work?\u0026rdquo; They don\u0026rsquo;t provide specific walkthroughs. It\u0026rsquo;s common the use of blockquotes to quote people. They might contain numbered steps as generic examples, but this is rare.   More info at Writing a Concept doc.\n Tutorial: Walks a user through a real-world, industry-specific, or end-to-end development scenario that uses your product. Tutorials teach \u0026ldquo;how to do Y in the context of ABC.\u0026rdquo; Tutorials contain numbered steps that prescribe what to do. They can have enough supporting conceptual information, interspersed among the steps, to help the reader understand what they\u0026rsquo;re doing, why they\u0026rsquo;re doing it, and how and why it works. The end result is a working example. Usually, code on GitHub supports the document.   More info at Writing a Tutorial.\n Reference: Programming concept explanation. Reference relates to an specific topic. References must have a title, an overview with a general explanation and an generic example on a code block. They must be listed the fields available (if it applies) and will include if the field is required and optional values. Finally it will be related if it\u0026rsquo;s required by any other topic (if it applies).   More info at Writing a Reference doc\n Plugin: The plugins must have an explanation that indicates on a clear way the bennefits of using it and the improvements that it applies to the general HotelX behaviour. Plugins must have a title, general explanation and \u0026hellip; (This will be completed).   More info at Writing a Plugin doc\nDesigning a doc Just as you design an app before you start coding, designing how your doc works before you write saves you writing time, helps focus your document, and helps to make sure you\u0026rsquo;re giving the reader the right information. A good way to design your document is by outlining.\nAs you develop your outline, ask yourself:\n In one sentence, what is my doc about? You can reuse a version of this sentence as the opener in the doc. What does my reader need to know before they can understand the contents? This question can lead to a set of prerequisites. Why does the reader care? This information will be part of your introduction. Am I building concepts for the reader from most general to most specific? Am I introducing ideas in the right order? Is there anything I can remove? Is there anything missing? Have I made the right assumptions about my audience?  The following sections show the main, top-level organization for the concept and tutorial doc types. Use these sections to start your outlines.\nWriting a Concept doc A Concept doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.  Body  Provides the details. Contains headings and subheadings as needed to make the content easy to skim.   Example: GraphQL Overview\nWriting a Tutorial A Tutorial doc has these major sections. Items in bold below are literal heading names:\n Title Overview\n First sentence tells what the page is about Tell the user what they\u0026rsquo;re going to learn and provide any concise background information that\u0026rsquo;s helpful. Don\u0026rsquo;t use the heading \u0026ldquo;Overview.\u0026rdquo; Just get right to it.  Objectives\n A short, bulleted list of what the tutorial teaches the reader.  Before you begin\n A numbered list of steps required to set up for the tutorial. Any general prerequisites. Don\u0026rsquo;t assume anything about the user\u0026rsquo;s environment. Assume that the user has only basic operating system installed. If doing the tutorial requires the user to have a specific environment, state what is required. For easy-to-install environment bits, just give them the instructions, such as \u0026ldquo;Run apt-get install…\u0026rdquo;. For more complex setups, link to official documentation.  Costs (optional)\n Tell the reader which technologies will be used and what it costs to use them. Link to the Pricing Calculator, preconfigured, if possible. If there are no costs to be incurred, state that.  Body\n Use as many headings and subheadings as needed. Use numbered steps in each section. Start each step with the action: \u0026ldquo;Click,\u0026rdquo; \u0026ldquo;Run,\u0026rdquo; \u0026ldquo;Enter,\u0026rdquo; and so on. Keep numbered step lists to around 7 or less, if possible. If you need more steps, break it up into subheadings. Provide context and explain what\u0026rsquo;s going on. Use screenshots when they help the reader. Don\u0026rsquo;t provide a screenshot for every step. Show what success looks like along the way. For example, showing console output or describing what happens helps the reader to feel like they\u0026rsquo;re doing it right and help them know things are working so far.  Cleaning up\n Omit this section if you stated there are no costs in the Costs section. Tell the user how to shut down what they built to avoid incurring further costs.   Example: Configure HotelX Security Tutorial\nWriting a Reference doc A Reference doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.  Code block  You can wrap your code between \\\u0026ldquo;\u0026rsquo; and \\\u0026ldquo;\u0026rsquo;  Body  Provides the details. Contains headings and subheadings as needed to make the content easy to skim.   Example: GraphQL AdminMutation\nWriting a Plugin doc A Plugin doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.   (Provisional documentation not finished)\nExample: Aggregation plugin\nVisual assets TravelgateX offers a set of logos and architectural diagram assets for your use:\nhttps://cloud.google.com/icons/\nFile organization in GitHub Follow these guidelines for how to organize your documents:\n If necessary, create a new folder for your document. Name the folder by slugifying your doc\u0026rsquo;s title. You can omit articles such as \u0026ldquo;and\u0026rdquo; and \u0026ldquo;the.\u0026rdquo; Name your new doc index.md. Store media in the same folder. i.e. /images as discused here.  For example, if you submit a tutorial named \u0026ldquo;Identity and Access Management\u0026rdquo;:\n Folder name: security URL: https://cloud.google.com/travelgatex/security/identity-access-management  If you don\u0026rsquo;t have any additional files that go along with your tutorial, you can simply make a top-level Markdown file within the security/ folder, e.g. security/identity-access-management.md instead of security/identity-access-manangement/index.md.\nGeneral content guidelines This site seeks technical content. While it\u0026rsquo;s fine and often appropriate to point out the advantages of a particular product or TravelgateX Platform, don\u0026rsquo;t give sales pitches in the document. Here are some guidelines:\n Write for a technical audience. If the document looks like a sales brochure, it\u0026rsquo;s not appropriate as TGX content. Avoid superlatives. Don\u0026rsquo;t say \u0026ldquo;the best,\u0026rdquo; \u0026ldquo;amazing,\u0026rdquo; \u0026ldquo;fantastic,\u0026rdquo; and so on. No exclamation points.  Ambiguity Ambiguity is the enemy of technical content. Re-read what you\u0026rsquo;ve written to check whether it can be read to mean more than one thing.\nRepetition Avoid needless repetition. Telling the reader a fact one time usually suffices.\nGeneral style guidelines Here are style guidelines to help you craft a great article.\nAcronyms Don’t create acronyms from product or feature names. Only use acronyms that your audience is familiar with. The A–Z word list has guidelines for many common acronyms, and some acronyms are so widely used that they’re in The American Heritage Dictionary.\nFor example: Conversation as a platform (CaaP) has the potential to make booking a flight as easy as sending a text message. Developers are also looking to CaaP to make computing more accessible to users of all abilities. Learn how to connect a USB device to your Microsoft Surface.\nHeadings Use headings to organize your page into sections and subsections. Headings make it easier for readers to skim and understand what the article is about. Capitalize only the first word and product names in your headings.\nAvoid using an acronym for the first time in a title or heading, unless it’s a keyword that you need to place in the title or heading for SEO. If the first use of the acronym is in a title or heading, introduce the acronym (in parentheses, following the spelled-out term) in the following body text.\nFor example:\nCreating a new object\nNot:\nCreating a New Object\nLists Lists help make your page more scannable.\nNumbered lists Use numbered lists when it\u0026rsquo;s essential that the items be done in a specific order. Otherwise, use a bulleted list. Don\u0026rsquo;t use a numbered list as a way to count the things in the list.\nFor example:\n Do this. Do that. Do another thing.  Not:\nThere are three colors that I like:\n Red Blue Yellow  Think about the order. When writing instructions, give the reader orientation cues in the proper order. Think about moving someone\u0026rsquo;s eyes around the screen.\nFor example:\n\u0026ldquo;Click the OK button in the Cloud Console, on the VM instances page, in the Compute Engine section.\u0026rdquo;\nNot this, because it causes someone to visually search backwards:\n\u0026ldquo;Click the OK button in the Compute Engine section of the VM instances page of the Cloud Console.\u0026rdquo;\nBulleted lists Use bulleted lists for lists that don\u0026rsquo;t imply a sequence. End each item with a period if the item is a sentence or a phrase. Don\u0026rsquo;t use periods for lists of single words or if the list contains only product names.\nFor example:\nI have three favorite colors:\n Red Blue Yellow  Parallelism Try to keep your language across list items in a similar format. For example, start each item with a noun or a verb, but don\u0026rsquo;t mix the formats.\nFor example:\n Write the docs. Write them well. Enjoy the process.  Not:\n Write the docs. The docs should be great. You can have fun writing the docs.  Tables Tables are a great way to help the reader compare a set of items, such as mutually exclusive options. Tables work well when there\u0026rsquo;s a consistent set of properties for each item in a list.\nUse the parallelism principle previously described for table headings and the first column.\nImages A well-designed diagram or a screen shot can save you a lot of writing and help the reader better understand a complex idea. Make sure any text is legible at the display size in the doc (800 pixels wide or less). If the image itself becomes too complex, consider breaking it up into more than one picture.\n Don\u0026rsquo;t use images you don\u0026rsquo;t have rights to use. Don\u0026rsquo;t store the images in the same folder where your document\u0026rsquo;s index.md file is stored, images must be saved in current_folder/images. Don\u0026rsquo;t embed SVG images on the .md files, so the SVG images must be in a separate svg file under /images dir.  Code Format code, command lines, paths, and file names as code font.\nLinking Provide inline links to relevant information, where appropriate. For example, link to:\n \u0026ldquo;One source of truth\u0026rdquo; content. Anything that\u0026rsquo;s likely to go out of date quickly if you copied it into your article. Information that gives more depth than is appropriate for the current context.  Provide direct links to pages in the Google Cloud Console when you give Cloud Console-based instructions. These deep links save the reader time spent looking for the right page and can save you time writing descriptions of how to find the page. Deep links open the page with the project set to the user\u0026rsquo;s last-used project.\n Write short link text (four or fewer words) that\u0026rsquo;s descriptive and includes keywords. If it works, use the title or description of the target page as link text. Link to background and related information rather than summarizing it.  Formatting common text elements    Element Convention Example     Database names Bold. The capitalization of database names varies Contoso database   Emphasis It’s OK to use italic formatting sparingly for emphasis Cybercriminals might call you and claim to be from Microsoft. Be aware that Microsoft will never call you to charge for security or software fixes.   New terms Italicize the first mention of a new term if you\u0026rsquo;re going to define it immediately in text Profile may consist of buyer or seller   Products, services, apps, and trademarks Usually title-style capitalization HotelX\nStats    Markdown usage This site uses Markdown when publishing tutorial content. The site recognizes basic Markdown with a few extensions and edge cases.\nAutolinks Publishing recognizes and adds links to URLs without http:// or https:// prefixes when they are delimited by whitespace, parentheses, or text formatting characters (*_~). Do not use \u0026lt; and \u0026gt; delimiters for these, as they will be stripped out as raw HTML.\nDisallowed Raw HTML Publishing strips all possible HTML from tutorial content, essentially anything contained within \u0026lt; and \u0026gt; delimiters. Note that this is stricter than standard GFM, which only strips certain \u0026ldquo;unsafe\u0026rdquo; HTML.\nStrikethrough Publishing formats text delimited in tildes (~) as strikethrough, making ~a bad example~ look like ~a bad example~ in your document.\nTables Publishing formats text blocks as tables if they have consistent pipe (|) separators and a second delimiter row with just hyphens (-), optionally using : to specify left, right, or centered alignment. Publishing converts this:\n| Table | header | row | default is centered | | :---- | :----: | --: | ------------------- | | Table | data | row | default is left |  into this:\n   Table header row default is centered     Table data row default is left    You cannot create multi-line cells (although other Markdown dialects allow this), and while you can omit both the initial and final pipe separators, it can break table recognition if the first cell looks like a list item.\nGraphics and Theme Learn enhances On our Hugo server we\u0026rsquo;ve got a theme that extends some shortcodes on Markdown.\nFlowchart example {{\u0026lt; mermaid align=\u0026quot;left\u0026quot; \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\ngraph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r Sequence example {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-John: Hello John, how are you?\rloop Healthcheck\rJohn-John: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail...\rJohn--Alice: Great!\rJohn-Bob: How about you?\rBob--John: Jolly good!\r Gantt example {{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\ngantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\r More info on Hugo Theme Learn\nCode within lists The site\u0026rsquo;s Markdown parser does not understand code fences (triple backticks) within lists. You should instead use indentation to signify code within lists.\nVoice and tone Active voice Use active voice. Active voice makes it obvious who is performing the action, which makes your writing clearer and stronger.\nFor example:\n\u0026ldquo;The logging agent writes a line to the log file.\u0026rdquo;\nNot:\n\u0026ldquo;A line is written in the log file by the logging agent.\u0026rdquo;\nIt\u0026rsquo;s okay to use passive voice when you\u0026rsquo;d have to go out of your way to use active voice. For example, sometimes you don\u0026rsquo;t need to include the actor in the sentence because the actor isn\u0026rsquo;t relevant. Just use passive voice, instead.\nFor example:\n\u0026ldquo;RFID tag readers are typically positioned in multiple locations in a retail store.\u0026rdquo;\nNot:\n\u0026ldquo;System engineers typically place RFID tag readers in multiple locations in a retail store.\u0026rdquo;\nDirect Speak to the reader. Documentation reads better if you speak to the reader in the second person. That means use \u0026ldquo;you\u0026rdquo; and avoid \u0026ldquo;I\u0026rdquo; or \u0026ldquo;we.\u0026rdquo;\nFor example:\n\u0026ldquo;Now load your data into BigQuery. Follow these steps: \u0026hellip;\u0026rdquo;\nNot:\n\u0026ldquo;Now we\u0026rsquo;ll load the data into BigQuery.\u0026rdquo;\nPresent tense Keep to present tense. Avoid using future or past tenses.\nFor example:\n\u0026ldquo;The Cloud Console downloads a JSON file to your computer.\u0026rdquo;\nNot:\n\u0026ldquo;The Cloud Console will download a JSON file to your computer.\u0026rdquo;\nSimple Keep it simple. Use short, simple sentences. They are easier for readers to parse and understand. Omit unnecessary words.\nFor example:\n\u0026ldquo;Click Change to set a new owner.\u0026rdquo;\nNot:\n\u0026ldquo;It is possible for you to set a different owner by clicking the Change button.\u0026rdquo;\nAlso, keep your paragraphs short and to the point. On the web, people skim more and expect shorter content than when they read books. Five sentences or less per paragraph is a good guideline.\nIf a sentence is long, even with straightforward word choices, break it up into multiple, shorter sentences.\nRe-read what you wrote and then eliminate all the unnecessary words.\nIncluding source code If you would like to include source code within your tutorial, you have two options:\nOption 1 Just embed the source code directly in the tutorial. Wrap the code in three backticks or indent by four spaces to achieve proper formatting.\nThis option is the simplest, but offer no way to test the code, and does not allow the user to view actual source code files as they might exist in a real project.\nFor an example, see Run Koa.js on Google App Engine Flexible Environment.\nOption 2 Instead of a Markdown file in the tutorials/ directory, create a folder for your files. The Markdown for the tutorial should be in an index.md file within the new folder, and the rest of the source code files must be in the new folder as well. You can use EmbedMd to include snippets from the source code files in the Markdown file. You should run the embedmd program on index.md to actually include the code block in the Markdown source in one of the commits for your pull request.\nThis option is more complicated, but allows us to test the code, and allows the user to view real source code files.\nFor an example, see Using Node.js to Calculate the Size of a BigQuery Dataset.\nWriting resources Learn more about strong writing.\n What is plain language? Purdue Online Writing Lab (OWL) Grammar Girl The Elements of Style (book by Strunk and White) The Deluxe, Transitive Vampire (book by Karen Elizabeth Gordon) Markdown Syntax (Cheatsheet from GitHub)  "
},
{
	"uri": "/hotelx/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.\nGraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the supplement code.  name(String): Specifies the supplement name.  description(String): Specifies the supplement description.  supplementType(SupplementType!): Indicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.  chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this supplement is mandatory and included in the option\u0026#39;s price when exclude: this supplement is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the supplement is mandatory or not. If mandatory, this supplement will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  durationType(DurationType): Specifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.  quantity(Int): Indicates the quantity of field in the element \u0026#34;unit\u0026#34;.  unit(UnitTimeType): Indicates the unit type. Possible unit types: Day or Hour.  effectiveDate(Date): Indicates the effective date of the supplement.  expireDate(Date): Indicates the expire date of the supplement.  resort(Resort): Contains information about the resort  price(Price): Indicates the supplement price.  \n"
},
{
	"uri": "/travelgatex/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.\nGraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Specifies the supplement code.  name(String): Specifies the supplement name.  description(String): Specifies the supplement description.  supplementType(SupplementType!): Indicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.  chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this supplement is mandatory and included in the option\u0026#39;s price when exclude: this supplement is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the supplement is mandatory or not. If mandatory, this supplement will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  durationType(DurationType): Specifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.  quantity(Int): Indicates the quantity of field in the element \u0026#34;unit\u0026#34;.  unit(UnitTimeType): Indicates the unit type. Possible unit types: Day or Hour.  effectiveDate(Date): Indicates the effective date of the supplement.  expireDate(Date): Indicates the expire date of the supplement.  resort(Resort): Contains information about the resort  price(Price): Indicates the supplement price.  \n"
},
{
	"uri": "/hotelx/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " Supplement Type\nGraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " Supplement Type\nGraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/mappea/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers\nGraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by SupplierDetected:    AccessData:    SupplierEdge:    \n"
},
{
	"uri": "/paymentx/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers\nGraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierEdge:    \n"
},
{
	"uri": "/stats/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers\nGraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers\nGraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  \nRequired by AccessData:    SupplierEdge:    AdminMutation:  The admin query root of TravelgateX\u0026#39;s for implementing GraphQL mutations.  SupplierDetected:    \n"
},
{
	"uri": "/mappea/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/paymentx/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   \nRequired by GroupData:    GroupCommonData:    OrganizationData:    \n"
},
{
	"uri": "/stats/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   \nRequired by OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   \nRequired by AdminQuery:  The admin query root of TravelgateX\u0026#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    \n"
},
{
	"uri": "/mappea/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!): instance to which this supllier is connected  context(String!): Context where the Supplier belongs to  serviceApi(Int!): Service API  supplierGroup(ID): SupplierGroup Internal Supplier grouping  accesses(AccessConnection): Accesses where the supplier is referenced  owner(Organization): Supplier owner  groups(GroupConnection): Groups where access belongs  \nRequired by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  \n"
},
{
	"uri": "/paymentx/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!): instance to which this supllier is connected  context(String!): Context where the Supplier belongs to  serviceApi(Int!): Service API  supplierGroup(ID): SupplierGroup Internal Supplier grouping  accesses(AccessConnection): Accesses where the supplier is referenced  owner(Organization): Supplier owner  groups(GroupConnection): Groups where access belongs  \nRequired by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  \n"
},
{
	"uri": "/stats/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!): instance to which this supllier is connected  context(String!): Context where the Supplier belongs to  serviceApi(Int!): Service API  supplierGroup(ID): SupplierGroup Internal Supplier grouping  accesses(AccessConnection): Accesses where the supplier is referenced  owner(Organization): Supplier owner  groups(GroupConnection): Groups where access belongs  \nRequired by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  \n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!): instance to which this supllier is connected  context(String!): Context where the Supplier belongs to  serviceApi(Int!): Service API  supplierGroup(ID): SupplierGroup Internal Supplier grouping  accesses(AccessConnection): Accesses where the supplier is referenced  owner(Organization): Supplier owner  groups(GroupConnection): Groups where access belongs  \nRequired by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  \n"
},
{
	"uri": "/mappea/reference/objects/supplierdetected/",
	"title": "SupplierDetected",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdetected/",
	"title": "SupplierDetected",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):   \n"
},
{
	"uri": "/mappea/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   \nRequired by SupplierConnection:    \n"
},
{
	"uri": "/paymentx/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   \nRequired by SupplierConnection:    \n"
},
{
	"uri": "/stats/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   \nRequired by SupplierConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):   \nRequired by SupplierConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):   \n"
},
{
	"uri": "/hotelx/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\nGraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this surcharge is mandatory and included in the option\u0026#39;s price when exclude: this surcharge is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the surcharge is mandatory or not. If mandatory, this surcharge will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  price(Price!): Indicates the surcharge price.  description(String): Specifies the surcharge description.  \n"
},
{
	"uri": "/travelgatex/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\nGraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this surcharge is mandatory and included in the option\u0026#39;s price when exclude: this surcharge is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the surcharge is mandatory or not. If mandatory, this surcharge will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  price(Price!): Indicates the surcharge price.  description(String): Specifies the surcharge description.  \n"
},
{
	"uri": "/hotelx/reference/enums/tagruntimetype/",
	"title": "TagRuntimeType",
	"tags": [],
	"description": "",
	"content": " Indicates xml tag used by the current parameter\nGraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier  \n"
},
{
	"uri": "/travelgatex/reference/enums/tagruntimetype/",
	"title": "TagRuntimeType",
	"tags": [],
	"description": "",
	"content": " Indicates xml tag used by the current parameter\nGraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:  template of all fields used by the supplier  \n"
},
{
	"uri": "/travelgatex/reference/enums/template/",
	"title": "Template",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum Template{   FOLDER_DEFAULT,   }   Required by CreateGroupInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields text(String!):   language(Language!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields text(String!):   language(Language!):   \n"
},
{
	"uri": "/hotelx/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequired by HotelXDefaultSettingsData:    HotelXCommonSettingsData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequired by HotelXDefaultSettingsData:    HotelXCommonSettingsData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequired by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequired by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:    \n"
},
{
	"uri": "/hotelx/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " Supplier transaction\nGraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.  \n"
},
{
	"uri": "/travelgatex/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " Supplier transaction\nGraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.  \n"
},
{
	"uri": "/insights-x/datasets/types-of-datasets/",
	"title": "Types of Datasets",
	"tags": [],
	"description": "Learn about what Dataset types can you use",
	"content": " This page describes how Insights-X shares different Datasets with customers.\nAs a customer, you can access Insights-X data via BigQuery Dataset or as Exported Table Data to Cloud Storage\nBigQuery BigQuery is a “big data” SQL store invented by Google. Many massive Datasets, like all the code in GitHub and the complete history of the Bitcoin blockchain, are made available to the public through the Google BigQuery Datasets initiative.\nBigQuery Datasets are multi-terabyte datasets hosted on Google’s servers. You interact with the dataset by writing SQL fetch queries within either the web UI, Command-line tool or any client library.\nSome resources on BigQuery:\n BigQuery overview  To get started using a BigQuery Dataset, Insights-X will allow permission to your own project so you can start querying datasets. If you intend to go beyond the included quotas, you must also enable billing.\nExported Data Up to 1 GB of table data can be exported into a single file.\nCSV The simplest file type available on Insights-X is the “Comma-Separated List”, or CSV, for tabular data. A CSV representation of a booking list with a header row, for example, looks like this:\n   client_id provider_id check_in     clientA providerX 2019-01-13 00:00:00 UTC   clientB providerX 2019-01-15 00:00:00 UTC    CSV format does not support nested and repeated data.\nJSON While CSV is the most common file format for “flat” data, JSON is the most common file format for “tree-like” data that potentially has multiple layers, like the branches on a tree:\n{ \u0026quot;bookings\u0026quot;: [ { \u0026quot;client_id\u0026quot;: \u0026quot;clientA\u0026quot;, \u0026quot;provider_id\u0026quot;: \u0026quot;providerX\u0026quot;, \u0026quot;check_in\u0026quot;: \u0026quot;2019-01-13 00:00:00 UTC\u0026quot; }, { \u0026quot;client_id\u0026quot;: \u0026quot;clientB\u0026quot;, \u0026quot;provider_id\u0026quot;: \u0026quot;providerX\u0026quot;, \u0026quot;check_in\u0026quot;: \u0026quot;2019-01-15 00:00:00 UTC\u0026quot; } ] }  When exported data is in JSON format, INT64 (integer) data types are encoded as JSON strings to preserve 64-bit precision when the data is read by other systems.\nAVRO Avro™ is an open source project that provides data serialization and data exchange services for Apache™ Hadoop®. \u0026hellip; Avro stores the data definition in JSON format making it easy to read and interpret, the data itself is stored in binary format making it compact and efficient.\n"
},
{
	"uri": "/hotelx/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by GiataData:  Hotel data obtained from Giata System.  Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input   "
},
{
	"uri": "/mappea/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by Urls:  Url\u0026#39;s   "
},
{
	"uri": "/paymentx/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by Urls:  Url\u0026#39;s   "
},
{
	"uri": "/stats/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by Urls:  Url\u0026#39;s  StatsAsset:  Asset of an specific error   "
},
{
	"uri": "/travelgatex/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by Urls:  Url\u0026#39;s  GiataData:  Hotel data obtained from Giata System.  Contact:  Contact Data.  Media:  Contains media information.  UrlsInput:  URLs Input  StatsAsset:  Asset of an specific error   "
},
{
	"uri": "/hotelx/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " Unit Time Type\nGraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " Unit Time Type\nGraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updateclientinput/",
	"title": "UpdateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateClientInput {  code: ID!    name: String    isActive: Boolean    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(String): Client complete name  isActive(Boolean): Indicates whether a Client is active or inactive  owner(ID): Client owner  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updateentitiesinput/",
	"title": "UpdateEntitiesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateEntitiesInput {  code: ID!    entities: EntitiesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Profile Code  entities(EntitiesInput): Entities to add/remove  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updategroupinput/",
	"title": "UpdateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateGroupInput {  api: ID!    group: ID!    info: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields api(ID!):   group(ID!):   info(String):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updatememberinput/",
	"title": "UpdateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateMemberInput {  member: ID!    info: String    group: ID!    role: ID!    resources: [ID!]!    method: Method!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID!):   info(String):   group(ID!):   role(ID!):   resources([ID!]!):   method(Method!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updateprofileinput/",
	"title": "UpdateProfileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateProfileInput {  code: ID!    label: String    type: ProfileType    owner: ID    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): Profile Code  label(String): Label of the Profile  type(ProfileType): Profile type  owner(ID): Profile owner  isActive(Boolean): Active profile  isPublished(Boolean): Profile is published  \n"
},
{
	"uri": "/mappea/reference/objects/uploadfiledata/",
	"title": "UploadFileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):   \nRequired by UploadFileResponse:    \n"
},
{
	"uri": "/travelgatex/reference/objects/uploadfiledata/",
	"title": "UploadFileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):   \nRequired by UploadFileResponse:    \n"
},
{
	"uri": "/mappea/reference/objects/uploadfileresponse/",
	"title": "UploadFileResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):   \nRequired by MappeaMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/uploadfileresponse/",
	"title": "UploadFileResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):   \nRequired by MappeaMutation:    \n"
},
{
	"uri": "/travelgatex/data-automation/uploading-strategies/",
	"title": "Uploading Strategies",
	"tags": [],
	"description": "How to Upload data",
	"content": " How to upload data to the platform There are two ways of uploading data to the platform:\n Secure File Transfer Protocol (SFTP) GraphQL mutation  We recommend continuing to use SFTP at present while we build out more GraphQL resources.\nWhile you can make your updates via a mutation, we have not yet written up resources to show you how to do that.\nIf you require these resources immediately, please contact us via Slack, Jira or by raising an issue in GitHub.\n Secure File Transfer Protocol (SFTP) SFTP, or Secure File Transfer Protocol, is a network protocol that provides secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in finance, technology, and consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. Some of the advanced security measures we take include:\n Password-based authentication. IP Whitelisting: We whitelist the IP Addresses from where you\u0026rsquo;ll be accessing your SFTP server to ensure you are the only one allowed to access your account. Anomaly Detection: To ensure no loss of data, we detect anomalies in your uploads to the SFTP server and immediatly warn you when an upload is about to significantly change your account. Encryption: Data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Jira Service Desk.\nNaming Conventions Keep in mind that the file is loaded using a specific name, depending on the data being uploaded. For the appropriate file name, please see the specific file documentation in each API product section.\nRemember to always overwrite the last file, because only the last file will be loaded into the platform.\nIf in some case you need to revert to an old version, don\u0026rsquo;t worry because we keep a copy of the old files.\n GraphQL Mutation Resources to help you upload your data via GraphQL mutation are coming soon. Please submit an issue to our issue tracker if you require these resources immediately.\n "
},
{
	"uri": "/mappea/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by AccessData:    \n"
},
{
	"uri": "/paymentx/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by AccessData:    \n"
},
{
	"uri": "/stats/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by AccessData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by AccessData:    \n"
},
{
	"uri": "/hotelx/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " URLs Input\nGraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by ConfigurationInput:  The information and credentials required to access the supplier’s system.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " URLs Input\nGraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequired by ConfigurationInput:  The information and credentials required to access the supplier’s system.  AccessInput:  Access input  \n"
},
{
	"uri": "/hotelx/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description  \n"
},
{
	"uri": "/mappea/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description  \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:    \n"
},
{
	"uri": "/travelgatex/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description  \nRequired by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:    \n"
},
{
	"uri": "/community/release-notes/",
	"title": "Writting release notes",
	"tags": [],
	"description": "Release notes, document with the changelog",
	"content": " This document assists on write release notes with the changelog of products.\n Release Notes Organization How to keep a good changelog  General Principles  What is a changelog? Why keep a changelog? Who needs a changelog?   How do I make a good changelog?  Guiding Principles Types of changes  How can I reduce the effort required to maintain a changelogs document? Can changelogs be bad?  Do not document commit log diffs Do not ignore deprecations Avoid confusing dates  Changelog example Writing resources  Release Notes Organization Release notes includes:\n Roadmap: GIT repository where we publish future functionalities and term planned for being released. Changelogs: Documents containing a chronologically ordered list of notable changes. We have:  A general platform changelog with common changes Product specific changelogs hosted at TravelgateX/Release Notes or directly at the Product Space/Release Notes (if exists) for example: https://docs.travelgatex.com/hotelx/release-notes/changelog/ You can find an specific instructions to fill the changelog on this document.  GraphQL Schema Changes: Is a list of recent and upcoming changes to our GraphQL API schema. Deprecated Schema Changes: Specific list of changes that can break existing queries to the GraphQL API. Deleted Schema Changes: Contains a changes history of deprecated notes previously announced.  How to keep a good changelog General Principles What is a changelog? A changelog is a file which contains a curated, chronologically ordered list of notable changes for each version of a project.\nWhy keep a changelog? To make it easier for users and contributors to see precisely what notable changes have been made on the project.\nWho needs a changelog? People do. Whether consumers or developers, the end users of software are human beings who care about what\u0026rsquo;s in the software. When the software changes, people want to know why and how.\nHow do I make a good changelog? Guiding Principles  changelogs are for humans, not machines. The same types of changes should be grouped. Versions and sections should be linkable. The latest changes comes first. The release date of each is displayed.  Types of changes  Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be removed features. Removed for now removed features. Fixed for any bug fixes. Security in case of vulnerabilities.  How can I reduce the effort required to maintain a changelogs document? Keep an Unreleased section at the top to track upcoming changes.\nThis serves two purposes: - People can see what changes they might expect in upcoming releases - At release time, you can move the Unreleased section changes into a new release version section.\nCan changelogs be bad? Yes. Here are a few ways they can be less than useful.\nDo not document commit log diffs Using commit log diffs as changelogs is a bad idea: they\u0026rsquo;re full of noise. Things like merge commits, commits with obscure titles, documentation changes, etc.\nThe purpose of a commit is to document a step in the evolution of the source code. Some projects clean up commits, some don\u0026rsquo;t.\nThe purpose of a changelog entry is to document the noteworthy difference, often across multiple commits, to communicate them clearly to end users.\nDo not ignore deprecations When people upgrade from one version to another, it should be painfully clear when something will break. It should be possible to upgrade to a version that lists deprecations, remove what\u0026rsquo;s deprecated, then upgrade to the version where the deprecations become removals.\nIf you do nothing else, list deprecations, removals, and any breaking changes in your changelog.\nAvoid confusing dates Regional date formats vary throughout the world and it\u0026rsquo;s often difficult to find a human-friendly date format that feels intuitive to everyone. The advantage of dates formatted like 2017-07-17 is that they follow the order of largest to smallest units: year, month, and day. This format also doesn\u0026rsquo;t overlap in ambiguous ways with other date formats, unlike some regional formats that switch the position of month and day numbers. These reasons, and the fact this date format is an ISO standard, are why it is the recommended date format for changelog entries.\nChangelog example # Changelog All notable changes to this project will be documented in this file. {{% release-notes-container type=\u0026quot;u\u0026quot; %}} - \u0026quot;How do I make a changelog?\u0026quot; section. {{% / release-notes-container %}} ## 2017-06-20 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - New visual identity by @tylerfortune8. - Version navigation. - Links to latest released version in previous versions. - \u0026quot;Why keep a changelog?\u0026quot; section. {{% / release-notes-container %}} {{% release-notes-container type=\u0026quot;c\u0026quot; %}} - Start versioning based on the current English version at 0.3.0 to help translation authors keep things up-to-date. - Rewrite \u0026quot;What makes unicorns cry?\u0026quot; section. {{% / release-notes-container %}} {{% release-notes-container type=\u0026quot;r\u0026quot; %}} - Section about \u0026quot;changelog\u0026quot; vs \u0026quot;change log\u0026quot;. {{% / release-notes-container %}} ## 2015-12-03 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - RU translation. - pt-BR translation. - es-ES translation. {{% / release-notes-container %}} ## 2015-10-06 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Answer \u0026quot;Should you ever rewrite a change log?\u0026quot;. {{% / release-notes-container %}} {{% release-notes-container type=\u0026quot;c\u0026quot; %}} - Improve argument against commit logs. - Start following [SemVer](http://semver.org) properly. {{% / release-notes-container %}}  View an example\nReference table    Types of changes Level Code     Added H3 {{% release-notes-container type=\u0026ldquo;a\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Changed H3 {{% release-notes-container type=\u0026ldquo;c\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Deprecated H3 {{% release-notes-container type=\u0026ldquo;d\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Removed H3 {{% release-notes-container type=\u0026ldquo;c\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Fixed H3 {{% release-notes-container type=\u0026ldquo;f\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Security H3 {{% release-notes-container type=\u0026ldquo;s\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Unreleased H2 {{% release-notes-container type=\u0026ldquo;u\u0026rdquo; %}} LIST {{% / release-notes-container %}}    Writing resources Learn more about changelogs and release notes.\n Keep a changelog  "
},
{
	"uri": "/hotelx/concepts/accesses-supplier-context/",
	"title": "Access, Supplier and Context",
	"tags": [],
	"description": "Learn about entities used in HotelX",
	"content": " On this page you will learn more about Core Entities used in HotelX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.\nSupplier Product segmentation over a Supplier API implementation. Each Supplier has a Supplier code. These are unique values and they are used consistently throughout all TravelgateX implementations. See our Supplier database, or ask us via our Jira Service desk for a list of Supplier codes.\nPlatform (Provider) Since not all suppliers have their own API, in some cases they will use a third party platform to return availability and allow you to make reservations. This is generally transparent to you as a customer.\nAccess Configuration used when interacting with a Supplier, which includes:\n URLs  Credentials  Markets  Rate Types  Specific Supplier settings   Client Client codes are consistent throughout all TravelgateX implementations. These codes are used to identify the business that is making the request and to confirm that the business has a configuration assigned to it.\nContext Context is the way codes are formed and used in implementations. Each Profile (either a Buyer or Supplier) can manage their own contexts or reuse existing ones. Different buyers or sellers can also manage the same codes context. For example, the SupplierSmyRooms uses SMY contexts for their implementations.\nContext applies to:\n Hotel Codes  Board Codes  Room Codes   With our built-in solution, you are able to choose the context that you wish to use when requesting a HotelX operation. For example, if you are a Buyer, you can map your context to your Suppliers\u0026rsquo; contexts.\nShould you be using the aggregator mode, we recommend that you use the widest Context possible (the one that includes more portfolio) or that you use your own context - in doing so, all supplier mappings will be solved/unified.\nFor more information on setting contexts, check out our Plugin guide on Mapping. "
},
{
	"uri": "/hotelx/plugins/black-list/",
	"title": "Blacklist",
	"tags": [],
	"description": "Hotel codes Blacklist: filter out specific hotels from the Search query.",
	"content": " The Blacklist plugin is used to ignore hotel code(s) when a Search query is executed.\nLoading a Blacklist is as easy as following the steps below:\nFile Format The file should be in the below format:\n Encoding: UTF-8\n File Name: blacklist\\_access\\_hotels.csv\n Header Row: IdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values\n IdRule: Unique identifier of the rule.  Criteria rows: * ClientToken, NoClientToken: List of clienttoken separated by \u0026lsquo;;\u0026rsquo; * Client, NoClient: List of client codes separated by \u0026lsquo;;\u0026rsquo; * Supplier, NoSupplier: List of supplier codes separated by \u0026lsquo;;\u0026rsquo; * Access, NoAccess: List of access codes separated by \u0026lsquo;;\u0026rsquo; * Context, NoContext: List of operation context codes separated by \u0026lsquo;;\u0026rsquo;. These contexts are the client\u0026rsquo;s contexts.\n* ContextSup, NoContextSup: List of suppluer context codes separated by \u0026lsquo;;\u0026rsquo;\n Values: Hotel codes blacklisted grouped by context. These values are separated by the characters \u0026lsquo;|@|\u0026rsquo; . All values should have two blocks separated by the characters \u0026lsquo;||\u0026rsquo;. The first block identifies the context and the second block identifies the list of hotel codes separated by \u0026lsquo;;\u0026rsquo;.This cell must be specified between two characters \u0026lsquo; \u0026ldquo; \u0026lsquo;.   You should bear in mind this file is a collection of rules, and we chose in every Search the rule that better matches the criteria sent in the Query. Moreover, only one of the rules specified will match the criteria, therefore you should specify the more restrictive rules on the top of the file. If there is no value for any rule criteria row, it means that any value in the request matches this row. It is important to indicate the contexts used in values on the rule criteria to improve rule matching.\n Delimiter: Comma (“,”)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: blacklist_access_hotels.csv\nSample Data:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r1,,,cli1;cli2,,,HOTELTEST;TESTPRV,,,,,,,all||all r1,,,test_client,,,supplier_test,,,,,supplier_test_context,,\u0026quot;supplier_context||AB;CD;123\u0026quot; r2,,,,,,,,123;456,,,,,\u0026quot;all||all\u0026quot; r3,,,,,,HOTELTEST;TESTPRV,,,,,,,,  Use case:\nIf we want to block all hotels of two accesses in the Blacklist, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r2,,,,,,,123;456,,,,,,\u0026quot;all||all\u0026quot; With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: []  If we want to block all hotels of two suppliers in the blacklist, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,,HOTELTEST;TESTPRV,,,,,,,\u0026quot;all||all\u0026quot; With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: []  If we don\u0026rsquo;t specify any values in one rule, we are indicating that no hotel code should be blacklisted for any supplier different of HOTELTEST or TESTPRV:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,,HOTELTEST;TESTPRV,,,,,,,, With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;]  If we want block a hotel code using the supplier codes, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r1,,,test_client,,supplier_test,,,,,,supplier_test_context,,\u0026quot;supplier_context||AB;CD;123\u0026quot; With this input hotel: [\u0026quot;AB\u0026quot;,\u0026quot;CD\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;123\u0026quot;]  If we want block all hotel codes from any supplier except some specified, we should configure the file as stated below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,,HOTELTEST;TESTPRV,,,,,,,\u0026quot;all||all\u0026quot; With this input hotel: [\u0026quot;AB\u0026quot;,\u0026quot;CD\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;123\u0026quot;]  Request example In order to use the plugin, we shoud send the following json in the query variables\n\u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;blacklist\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot; } } ]  The following plugin is deprecated. Please use the previous plugin to blacklist The blacklist plugin is used to ignore hotel code(s) when we a search query is executed. There are 2 types of blacklists:\n Filter hotel codes of a specific Access Filter hotel codes of a specific Supplier  Loading a blacklist is as easy as following the steps below:\nAccess Blacklist Blacklist is applied for specific Access\nFile Format The file should be in the below format:\n Encoding: UTF-8\n File Name: access\\_blacklist.csv\n Header Row: Client, Code, Context, Values\n Client: The Client that you want to apply the blacklist to. If it is empty, it will apply to all Clients of the same Group\n Code: The Access code\n Context: The Context of the hotels codes\n Values: List of hotel codes, separated by \u0026ldquo;;\u0026rdquo;\n  Delimiter: Comma (“,”)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: access_blacklist.csv\nSample Data:\nClient,Code,Context,Values client1,access1,context1,a;b client2,access2,context2,a;b;c ,access3,context1,a;b;c;d;e  Supplier Blacklist Blacklist is applied for a specific provider\nFile Format The file should be in the below format:\n Encoding: UTF-8\n File Name: access_blacklist.csv\n Header Row: Client, Code, Context, Values\n Client: The client that you want to apply the blacklist to. If it is empty, it will apply to all clients from the same group.\n Code: The provider code\n Context: The context of hotel codes\n Values: It contains the list of hotel codes, separated by \u0026ldquo;;\u0026rdquo;\n  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: supplier_blacklist.csv\nSample Data:\nClient,Code,Context,Values client1,supplier1,context1,a;b client2,supplier2,context2,a;b;c ,supplier3,context1,a;b;c;d;e  "
},
{
	"uri": "/hotelx/concepts/search-mode/booking-flow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\n --                                            1. SEARCH  2. QUOTE  3. BOOK                            OptionID  WHERE TO NEXT?   QuoteID  OptionID   ConfirmationID  QuoteID      \nSearch Performs a hotel availability search over 1 or more Seller accesses. Depending Seller, search operations implicit use supplier’s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;search\u0026quot;: { } } } }  PlayGround Samples  search   Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;quote\u0026quot;: { } } } }  PlayGround Samples  quote   Book Performs a book or reservation over an option returned in Quote Response.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;book\u0026quot;: { } } } }  PlayGround Samples  book   "
},
{
	"uri": "/hotelx/release-notes/changelog/",
	"title": "Changelog",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " Easily accessible log of notable changes to HotelX API\nAll notable changes in our platform will be documented on this page. 2019-03-07  Added CurrencyX management for the cancel penalties.    Bug when the cancel penalty type is empty or invalid format. Mandatory field always returns FALSE when fee is EXCLUSIVE type in Surcharge node.   2019-02-26  New plugin, add parameter. You can see the documentation here.    Management of the default currency settings.   2019-02-12  Type HotelData introduces new field \u0026ldquo;GiataData\u0026rdquo;. Internal, better performant, REST endpoint in Search operation. Field filters have been added to minimize the throughput, this wasn\u0026rsquo;t necessary with graphql, filtered fields that have a relation with Legacy api are now also sent as filter.   Expire date of payment card in Book now accept the follow format, month: 1 digit or 2 digits, year: 4 digits or 2 digits\n 2019-02-04  Fix hotel-list and hotel-room EOF error, when elastic returns empty result.   2019-01-28  Fix the error of destinationSearcher when elastic returns empty value.   2019-01-23  Fix the error of hotel-list and hotel-room when requesting more than one code.   2019-01-14  Upgrade permission check in all microservices Environment variable health check Add parameter in Hotel-Quote and Hotel-Book   2018-12-04  Fix booking timeout issue    Added warning if any option has been discarded by CommissionX and CurrencyX plugins   2018-11-29  Fix filter maxSize Destination    Adapt Hotel-Room, Hotel-Board, Hotel-Category to new organization.    Added log if commission Fees is -1   2018-11-27  Ambiguous warning message in Book when supplier has not returned price Removed error nodes from Groups and Organization nodes Removed log if amount is 0 in Fees node   2018-11-20  Added geonames in Hotel-List Added access code in book log in some special cases of commission    Partially synchronous resource caches in Hotel-Quote, Hotel-Book, Hotel-Cancel, Hotel-Booking   2018-11-19  Fix Stats Fix Hotels requested stats in Access and Transaction spans where the count wasn\u0026rsquo;t correct in some cases    Margin plugin compares net commission in order to decide discarding or mantaining an option.   2018-11-08  Fix blacklist (by supplier) plugin   2018-11-02  Fix price discrepancy between Quote and Book   2018-10-02  Allow relay at the query hotel Count field in HotelConnection to retrieve the number of HotelEdges that match the filter, pagination doesn\u0026rsquo;t affect Count.   2018-09-25  Status tipification to be able to differentiate from critical to non-critical external services    Commission and currency rates are now keep unchanged between Quote and Book    Operation and Access processes have been updated to register times of their different execution steps and their processed options. Transactions to worker are now monitorized in their own span with supplier\u0026rsquo;s communication times, parsing times and processed options.   2018-09-06  Fix apply Markups to net price   2018-09-04  Fix currency bug inside markups, in Quote and Book   2018-09-03  Fix Exchange node empty if not CurrencyX (see doc in https://docs.travelgatex.com/hotelx/plugins/converter/) Fix bugs in Quote    Improve reponse time and service  \n2018-08-22  Settings heritage. Guide Plugins filter    Fix bugs  \n2018-08-21  New input field in Hotels Query filter. This allows to filter the response by hotel\u0026rsquo;s country. GraphQL Schema updated.   2018-07-24  New plugin, safety margin. You can see the documentation here.   2018-07-18  Hotel, board, room and rate maps caches are now updated synchronously. This will improve the user\u0026rsquo;s experience when 1st time debugging operations. Hotel maps cache refactoring to reduce the number of cached items and cached operations. Hotel maps cached requests are now pipelined to reduce Round Trip Time.   2018-07-16  HotelX concepts content examples.   2018-07-11  Improvement of the Rooms Schema with paginated list and max number of elements per page. By defect are 1000 rooms.   2018-07-04  Wrong behaviour that made options to be discarded when price in supplements was empty in Search query.   "
},
{
	"uri": "/insights-x/release-notes/changelog/",
	"title": "Changelog",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " Easily accessible log of notable changes to Insights-X\n2019-02-21  New table effective_bookings_(buyer|seller)    daily_insights table renamed as insights_daily_(buyer|seller) daily_insights_(client|provider) table renamed as insights_daily_(buyer|seller)   2019-02-07  Insights-X product documentation   "
},
{
	"uri": "/stats/release-notes/changelog/",
	"title": "Changelog",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " Easily accessible log of notable changes to Stats-X\n2019-03-14  Insights-X product documentation   "
},
{
	"uri": "/travelgatex/release-notes/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": " To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. 2019-02-11  GraphQL Schema updated.    Audit deprecated loadFile query   2019-02-07  GraphQL Schema updated.    Response header. Content-type   2019-01-30  GraphQL Schema updated.    Entities resolvers   2019-01-11  The DEFAULT_TEMPLATE option has been modified.The permissions given to the owner were : iam:all:viewer Now: all:all:1a This is for future updates. Ignore it for the time being. The owner of the organization now has an admin permission all across the apis: org:api:rsc:crud1xaf. Intern members (@xmltravelgate.com, @travelgatex.com) only can be added to TEAM type groups. Operations now does not check permissions. All operations listed.    deleteApi function implemented. Api-key can be added to more than one product on the same folder. Group query can now be filtered by parent.    Error when adding apis to TEAM type groups. When creating new member used to always return \u0026ldquo;Auth0 connection error\u0026rdquo; Some errors description have been improved.   2019-01-09  Endpoint error messages    Launch patch with new patch file New patch fixing write headers    Headers patch   2018-12-19  New implement of cache Use gzip to unzip response instead of delegate to request module    Two caches, one for apikeys and another one to redirect endpoint Implement case not zipped Implement cache to rewrite endpoint    Timming   2018-12-17  Worker   2018-12-14  Use worker and main thread to stats depends search, and calculate Send stringify of body_worker Protect Buffer    ElapsedTime when error, and fix jsonstringify Timming    Tracing from worker (detail) Tracing from utils2 (detail)   2018-12-13  GraphQL Schema updated.    Timming and use workers for stats. Status code when endpoint fails Worker   2018-12-11  Handler for updating api-keys to different groups    Error description to not found members deleteApi functionality Parent filter to groups Filters to external schema    isAdmin from productData   2018-12-04  All check for GetSons Description to more than one member in a api-key error    Descendents query, only returns valid groups all permissions, now returns only orgs and validGroups    Debug prints   2018-11-29  Upgrade libraries    Autogencode. Deleted commit   2018-11-27  \u0026lsquo;all\u0026rsquo; requestors now able to update accesses non of their ownage    Shared automatic update in UpdateAccess   2018-11-26  impersonatedJwt to member resolver    all permissions for productData-\u0026gt;apis resolver all\u0026rsquo; user case in resource data resolver for role connection get organizations function for normal permission table   2018-11-22  Max length for org code raised to 8    UpdateOrganizationDomain mutation to intern schema Error on alpha-numeric characters for organization code UpdateOrganizationDomain delete function Domain filter to organizations function resolver Autogenerated code for new orgs with no code Domain filter to organizations function in external schema    all:api:all use case   2018-11-21  RefreshToken now returns a list of apikeys with the result Intern schema modified adding domain scalar and domains in organization Organization data resolver has been modified to add domain resolvers    Token-gen for updateGroupAdmin   2018-11-20  GraphQL Schema updated.    Refresh token funcition. Create Organization. Errors description. Update group    Entities call when move folder and change members refresh token position.    Useless folders from create folder template   2018-11-07  GraphQL Schema updated.    Force group names to lowcase only in TEAM/ORG cases    Useless folders    Update organizations.   2018-10-28  GraphQL Schema updated.    New field Geoname in Hotels query, which provides hotel\u0026rsquo;s geographical information   2018-10-18  GraphQL Schema updated.    Profile type    Supplier, Client and Access entities resources content.   2018-09-26  GraphQL Schema updated.   2018-09-20  GraphQL Schema updated.    Product name FlightsX.   2018-09-10  GraphQL Schema updated.   2018-08-29  Added pagination to partners list   2018-08-27  GraphQL Schema updated.   2018-08-22  GraphQL Schema updated.    Entity\u0026rsquo;s Owner and its related Filters, queries and mutations. parents and descendents queries for Group and Organization. Old connect form migrated to TravelgateX Clients and suppliers CRUD    Corrected change of Payment\u0026rsquo;s structure Basic Audit by request using header TGX-Audit: 1 See more: TGX Headers page   2018-08-14  New section for entities in IAM Accesses CRUD    GraphQL Schema updated.   2018-08-13  GraphQL Schema updated.   2018-08-08  GraphQL Schema updated.    TGX Headers page Support basic Tracing by request using header TGX-Tracing: 1 Return groups codes on entities queries (accessData,suppierData,clientData,profileData). Access name filter New default group when user account is deleted. Audit members has been added in createMember and deleteMember    Response of Access and Supplier query when no accesses on the request Entity propagation Permission check Update member auditions and refactor that funcionality URL resolver API/resource resolvers Roles function with new admin permissions   2018-07-31  Improvements in the organization selector and modal. GraphQL Schema updated.    IAM mutations All groups in resources and apis resolvers    Delete member mutation (Delete Apikeys or uninvite user emails) Public deleteGroup function and made it public   2018-07-27  Organizations queries resolvers   2018-07-26  GraphQL Schema updated.    Groups resolvers  \n2018-07-25  GraphQL Schema updated. Admin permissions management for groups.    Old support Apikey    Team\u0026rsquo;s permission management for groups.    Flow (Cascade) permissions. Inprove time response of groups resolvers.  \n2018-07-16  GraphQL Schema breaking changes. Substitutes and fixes to Deprecated and Deleted Notes pages.    GraphQL Schema updated. Changelog based on keep a changelog    Deprecated schema notes pages. Deleted schema notes pages.    Documentation pages\u0026rsquo; styles  \n2018-07-10  Deleted schema notes Documentation pages\u0026rsquo; index    GraphQL Schema updated. New version of Deprecated schema notes   2018-07-09  Previously deprecated queries. See more   "
},
{
	"uri": "/channelx/documentation/codelists/",
	"title": "Code Lists",
	"tags": [],
	"description": "Static InventoryX information",
	"content": " Error Codes    Error Code Error Description     -1 Validation error   1 POS credentials not found   2 HotelCode or RatePlanList not found   3 Rates not found   4 Incomplete Rate values   6 Incomplete AvailStatusMessage StatusApplicationControl Values   7 Incomplete AdditionalGuestAmount values   8 SellableProduct not found   9 Room not found in SellableProduct    Meal Plan Codes (OTA MPT)    Code Description     1 All inclusive   2 American   3 Bed \u0026amp; breakfast   4 Buffet breakfast   5 Caribbean breakfast   6 Continental breakfast   7 English breakfast   8 European plan   9 Family plan   10 Full board   11 Full breakfast   12 Half board/modified American plan   13 As brochured   14 Room only   15 Self catering   16 Bermuda   17 Dinner bed and breakfast plan   18 Family American   19 Breakfast   20 Modified   255 Full board And Drinks   256 Half board And Drinks   257 All inclusive Premium   258 Gala Dinner    Payment Type Codes    Payment Type Code Description     MerchantPayment The customer pays the client and the client will pay the provider.   DirectPayment The customer will have to use a credit card as guarantee for the hotel and the payment will be done by the customer at check-in.   BookingDatePayment The client will use a credit card with the exact amount of the option so he can pay the provider/hotel. The provider will charge the payment on the reservation day.   ArrivalDatePayment The client will use a credit card with the exact amount of the option so he can pay the provider/hotel. The provider will charge the payment on the checking day.    Credit Cards    Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP Universal air travel card   OP optima   ER Air Canada/RnRoute   XS access   O others     "
},
{
	"uri": "/hotelx/faqs/common-errors/",
	"title": "Common Errors",
	"tags": ["faq", "errors"],
	"description": "FAQs on common errors",
	"content": " Error 204 - No Results Found Error “204 No results found” is a common error that you can receive in the Search Query response. This error means that the product you are trying to obtain is not available.\nThere are several potential reasons as to why this error occurs:\n The product is not available for the dates in the request. The product is not available for the number of passengers selected in the request. The product is not available for the destination selected in the request.  In case an error of this type is received, you should first contact the supplier directly on a commercial level and check with them whether there should be availability for the product you are trying to obtain with the specific search criteria (dates, passenger quantity, passenger age, destination you have chosen, etc.). In case the supplier confirms that there should be availability but you are still not obtaining it, you should contact our Customer Care department.\n"
},
{
	"uri": "/travelgatex/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "   Common resources Learn about common resources used in TravelgateX\n     Quotas \u0026amp; Limits      Request Headers HTTP request headers required in all API requests\n    "
},
{
	"uri": "/travelgatex/tutorials/howto-configure-permissions/",
	"title": "Configure HotelX Security",
	"tags": [],
	"description": "Configure your own HotelX security model",
	"content": " Granting Permissions This topic describes how to configure permissions for a organization using HotelX and Stats.\nBefore you begin  Read IAM, which contains information about how TravelgateX manages security Read HotelX, which contains information about the HotelX API  Scenario: Organization buying suppliers through HotelX In this scenario, organanization org_test logs on to TravelgateX in order to use HotelX to buy product from suppliers.\nDistribution will be made through 2 different channels, end users will use org_test_B2C_site whereas that org_test_B2B_site will be used for business users. Every channel will be configured separately.\nPurchases will be made through accesses access_0 and access_1 which configure credentials for supplier_0 and supplier_1.\nOnce org_test integrates the HotelX API into their system and is certified, then they need to implement the role permission schema provided by TravelgateX to identify teams and members:\n   Team Members Description     CTO cto@org_test.com Manage all members and its permissions   Development dev1@org_test.com\ndev2@org_test.com Full access to HotelX and view stats   Operations operation1@org_test.com Only view stats   Backoffice backoffice1@org_test.com Permissions to Book, Cancel and Retrive Bookings through HotelX    A security implementation of this scenario will look similar to the following:\nGroup hiereachy\u0026lt;b\u0026gt;Group hiereachy\u0026lt;/b\u0026gt;Organization[Not supported by viewer]org_test[Not supported by viewer]Folders[Not supported by viewer]purchase[Not supported by viewer]Products[Not supported by viewer]HotelX_0[Not supported by viewer]Stats_0[Not supported by viewer]Resources[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]Accesses[Not supported by viewer]access_0[Not supported by viewer]access_1[Not supported by viewer]Suppliers[Not supported by viewer]supplier_0[Not supported by viewer]supplier_1[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]org.owner[Not supported by viewer]cto@org_test.com[Not supported by viewer]hotelx.booking[Not supported by viewer]backoffice1@org_test.com[Not supported by viewer]stats.viewer[Not supported by viewer]operation1@org_test.com[Not supported by viewer]hotelx.owner, stats.owner[Not supported by viewer]dev1@org_test.com, dev2@org_test.com\u0026lt;div style=\u0026ldquo;text-align: center\u0026rdquo;\u0026gt;dev1@org_test.com, dev2@org_test.com\u0026lt;/div\u0026gt;\nGroup hierarchy is organized as:\n 1 organization named org_test 1 folder named purchase, which manages all products purchased by org_test:  HotelX to manage clients, suppliers and accesses Stats to view statistics   The IAM policy manages these roles:\n org.owner: All permissions over all organization resources hotelx.owner: All permissions over all HotelX resources hotelx.booking: Booking permissions (Book, Cancel and Get Bookings) for HotelX operations stats.owner: All permissions for all Stats resources stats.viewer: View permissions over Stats  "
},
{
	"uri": "/insights-x/datasets/",
	"title": "Datasets",
	"tags": [],
	"description": "Understand Insights-X Datasets concepts",
	"content": "   Types of Datasets Learn about what Dataset types can you use\n     Reference Learn about how the information is stored in our datasets\n     Tooling Tools for Dataset exploration\n    "
},
{
	"uri": "/channelx/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "Guide to ChannelX",
	"content": " The API described in this document is used to transmit rate, availability and inventory, data between ChannelX and a partner system. A full implementation of this API requires that the partner system provides a service endpoint that accepts requests from ChannelX of the following types: HotelRatePlanInventoryNotif, HotelRatePlanNotif, HotelAvailNotif.\n  Code Lists Static InventoryX information\n     Price Use Cases Some examples on how to operate prices\n    Global Details Protocol and Headers All requests are expected to be standard HTTP POST requests in which the POST body is the request XML and the Content-Type header is set to \u0026ldquo;application/xml\u0026rdquo;.\nAuthentication Requests will be sent with a authentication encoded in Base-64. Credentials may be found in Authorization header tag, with value Basic (encoded credentials) as follows:\nAuthorization: Basic aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1RWWg2bVlJSkcyWQ==\nSummary BR = Only used for: \u0026lsquo;Basic Rates\u0026rsquo;\nDV = Only used for: \u0026lsquo;Derived Rates\u0026rsquo;\nN = Names allowed for a specific element\nHotelRatePlanInventoryNotif Sets up inventory information that should be followed with the structure Hotel \u0026gt; Rate \u0026gt; Room.\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan Duration = \u0026quot;0\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;BookingRules\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;20\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty Start = \u0026quot;2018-03-01\u0026quot; End = \u0026quot;2018-03-06\u0026quot;\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;10\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent Amount = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty NonRefundable = \u0026quot;true\u0026quot; Start = \u0026quot;2018-03-13\u0026quot; End = \u0026quot;2018-03-15\u0026quot;/\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;Viewerships\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LocationCode CountryCode = \u0026quot;ES\u0026quot;/\u0026gt; \u0026lt;/LocationCodes\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;/Viewerships\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;/BookingRules\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;8\u0026quot; MaxAge = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;7\u0026quot; MaxAge = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;PaymentPolicies\u0026gt; \u0026lt;GuaranteePayment PaymentCode = \u0026quot;BookingDatePayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;/PaymentPolicies\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;14\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Taxes\u0026gt; \u0026lt;Tax Amount = \u0026quot;20\u0026quot; ChargeFrequency = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;TaxDescription\u0026gt; \u0026lt;Text\u0026gt;city\u0026lt;/Text\u0026gt; \u0026lt;/TaxDescription\u0026gt; \u0026lt;/Tax\u0026gt; \u0026lt;/Taxes\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;bb\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;TPA_Extensions xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Attribute key = \u0026quot;HotelNotifType\u0026quot; value = \u0026quot;New\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  Example for Derived RatePlan\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;RatePlanInclusionsType\u0026gt; \u0026lt;RatePlanInclusionDescription\u0026gt; \u0026lt;Name\u0026gt;BaseMealPlanSupplement\u0026lt;/Name\u0026gt; \u0026lt;/RatePlanInclusionDescription\u0026gt; \u0026lt;/RatePlanInclusionsType\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Derived Rate\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  Example for Offers\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer OfferCode = \u0026quot;offer\u0026quot; OfferStatusType = \u0026quot;Active\u0026quot; OfferNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;OfferRules\u0026gt; \u0026lt;OfferRule\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;6\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;DOW_Restrictions\u0026gt; \u0026lt;AvailableDaysOfWeek Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;true\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;/DOW_Restrictions\u0026gt; \u0026lt;Inventories\u0026gt; \u0026lt;Inventory InvCode = \u0026quot;1BDAPT\u0026quot;/\u0026gt; \u0026lt;/Inventories\u0026gt; \u0026lt;/OfferRule\u0026gt; \u0026lt;/OfferRules\u0026gt; \u0026lt;Discount NightsDiscounted = \u0026quot;1\u0026quot; DiscountPattern = \u0026quot;Last\u0026quot;/\u0026gt; \u0026lt;OfferDescription\u0026gt; \u0026lt;Text\u0026gt;Offer Test\u0026lt;/Text\u0026gt; \u0026lt;/OfferDescription\u0026gt; \u0026lt;/Offer\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;     Element Rel Type Description     HotelRatePlanInventoryNotif 1     ../request 1     ../RatePlans 1     @HotelCode 1 String    @HotelStatusType 1 String N: Active, Deactivated   ../RatePlan 0..n     @RatePlanCode 1 String Rate code   @BaseRatePlanCode 0..1 String DV. Rate code of the base RatePlan   @RateReturn 0..1 String -   @RatePlanNotifType 0..1 String N: New, Delta, Remove   @RatePlanStatusType 1 String N: Active, Deactivated   @CurrencyCode 0..1 String BR. ISO Currency (EUR)   @Start 0..1 Date Booking Start Date for which the rate will be available.   @End 0..1 Date Booking Start Date for which the rate will be available.   RatePlan/BookingRules 0..1     ../BookingRule 1..n     @Code 0..1 String Empty if there are viewships conditions   ../CancelPenalties 1     ../CancelPenalty 1..n     @NonRefundable 1 Boolean    CancelPenalty/Deadline 1     @OffsetTimeUnit 1 String    @OffsetUnitMultiplier 1 Integer    @OffsetDropTime 1 String    CancelPenalty/AmountPercent 1  NmbrOfNights, Percent or Amount tag must be present   @NmbrOfNights 0..1 Integer Number of nights that will be charged   @Percent 0..1 Decimal Percent of the total amount that will be charged in case of cancellation applying the current cancel penalty   @Amount 0..1 Decimal Amount that will be charged   @CurrencyCode 0..1 String Must be present if amount tag is present   ../Viewerships 0..1     ../Viewership 1..n     ../LocationCodes 1     @LocationCodesInclusive 1 Boolean Can or cannot be requested from this countryCode   /LocationCode 0..1  If it is missing, applies to all countryCodes   @CountryCode 1 String Country ISO2 code can or cannot be requested from this rate.   RatePlan/Rates 1     ../Rate 1..n     Rate/AdditionalGuestAmounts 1     ../AdditionalGuestAmount 1..2     @AgeQualifyingCode 1 Integer N: 8, 7. Child, Baby   @MaxAge 1 Integer Max age (not inclusive) of the additional guest   Rate/PaymentPolicies 1     ../GuaranteePayment 1..n  Information about an accepted payment   @PaymentCode 1  Payment method accepted by the rate. Check Documentation \u0026gt; Code Lists \u0026gt; Payment Type Codes   ../AcceptedPayments 0..1  Accepted payments information. Only present if PaymentCode is not \u0026ldquo;MerchantPayment\u0026rdquo;   /AcceptedPayment 1..n     ../PaymentCard 1..n     @CardCode 1 String Check Documentation \u0026gt; Code Lists \u0026gt; Credit Cards   Rate/MealsIncluded 0..1  Present if board is included within the rate   @MealPlanCodes 1 Integer Check Documentation \u0026gt; Code Lists \u0026gt; Meal Plan Codes (OTA MPT)   RatePlan/SellableProducts 0..1  List of sellable products. When derived rate and not present, it applies to all rooms. In other cases, it informs about the rooms to which it applies   ../SellableProduct 0..n  Present if rooms are associated with this rate   @InvCode 1 String Sellable Product Code   @InvTypeCode 0..1 String External information about the room (own code, own description, etc.)   @InvType 1 String N: ROOM   @InvStatusType 1 String N: Active, Deactivated.   @InvNotifType 0..1 String N: New, Delta, Remove   ../GuestRoom 1..n     GuestRoom/Quantities 1     @StandardNumBeds 1 Integer Standard occupation of the room   GuestRoom/Occupancy 1     @MinOccupancy 1 Integer    @MaxOccupancy 1 Integer    @AgeQualifyingCode 1 Integer N: 10, 8, 7. Adult, Child, Infant.   GuestRoom/Room 1     @RoomTypeCode 1 String Room Code   @RoomID 1 Integer    GuestRoom/Description 0..1  Room description   Text 1 String    RatePlan/Taxes 0..1     ../Tax 1..n  Tax that applies to the room prices of the rate   @Amount/Percent 1 Decimal Tax will be applied relative to an amount or a percentage   @ChargeFrequency 0..1 Boolean Tax is/isn\u0026rsquo;t applied relative to the Amount of Nights booked   @ChargeUnit 0..1 Boolean Tax is/isn\u0026rsquo;t applied relative to the Amount of Paxes booked   ../TaxDescription 1     ../Text 1 String Description of tax type   ../RatePlanInclusionsType 0..1  DV   ../RatePlanInclusionDescription 1  DV   ../Name 1  DV.   RatePlan/Description 0..1  Rate description   ../Text 1 String    ../Offers 0..1     ../Offer 1..n     @OfferCode 1 String    @OfferStatusType 1 String N: Active, Deactivated   @OfferNotifType 0..1 String N: New, Delta, Remove   ../OfferRules 1     ../OfferRule 1     ../LengthsOfStay 1     ../LengthOfStay 1..2     @Time 1 Integer It indicates the number of nights for this stay   @MinMaxMessageType 1 String N: MinLOS, MaxLOS. Minimum or Maximum stay for the Offer   ../DOW_Restrictions 1     ../AvailableDaysOfWeek 1  It indicates whether the Offer data applies to a certain day of the week   @Mon 1 Boolean    @Tue 1 Boolean    @Weds 1 Boolean    @Thur 1 Boolean    @Fri 1 Boolean    @Sat 1 Boolean    @Sun 1 Boolean    ../Inventories 0..1  Rooms to which the offer will apply. If no Inventories are sent, the offer will apply to all the rooms in the Rate   ../Inventory 1..n     @InvCode 1 String Room code   ../Discount 1     @NightsDiscounted 1 String Nights discounted by the offer from the total stay amount   @DiscountPattern 1 String N: First, Last, Cheapest. Booking night/s the offer will dicount   ../OfferDescription 0..1  Offer description   ../Text 1 String    ../TPA_Extensions 0..1  Only added when creating or deleting a hotel   ../TPA_Extensions/Attribute 1     @key 1 String N: HotelNotifType   @value 1 String N: New, Remove. To create a hotel or remove all the hotel setup.    HotelRatePlanNotif \u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;/\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;HOT123\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-0-0\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;3-0-0\u0026quot; AmountAfterTax = \u0026quot;180.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;  Example for Derived RatePlan\n\u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-08-01\u0026quot; End = \u0026quot;2014-08-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;     Element Rel Type Description     HotelRatePlanNotif 1  Root Node   ../request 1     request/RatePlans 1     @HotelCode 1 String    ../RatePlan 1..n     @RatePlanCode 1 String    @RatePlanStatusType 0..1 String N: Active, Deactivated. Informative tag that indicates wheter RatePlan is active or not   @BaseRatePlanCode 0..1 String DV. Rate code of the base RatePlan   @CurrencyCode 0..1 String BR. ISO Currency   RatePlan/Rates 1     ../Rate 1..n     @Start 1 Date Start date of rate   @End 1 Date End date of rate   @AdjustedPercentage 0..1 Decimal DV. The percentage off the base rate plan amount used to determine the price of the Derived RatePlan   @AdjustedAmount 0..1 Decimal DV. The amount which should be added to the Base RatePlan to determine the price of the Derived RatePlan   @AdjustUpIndicator 0..1 Boolean DV: true: the adjusted amount/percentage is added to the amount specified for the Base RatePlan to determine the Derived RateAmount. false: the adjusted amount or adjusted percentage is subtracted from the amount specified for the Base RatePlan to determine the Derived RatePlan amount   Rate/BaseByGuestAmts 0..1  Different types of price can come in the same BaseByGuestAmts element.   ../BaseByGuestAmt 1..n     @AmountAfterTax 1 Decimal Total amount for the @NumberOfGuests indicated per day. This amount doesn\u0026rsquo;t include tax   @NumberOfGuests 0..1 Integer How many adults are indicated per day. If @NumberOfGuests is not informed then @Type must be informed. The maximum @NumberOfGuests is the standard occupancy of the room   @Type 0..1 Integer If amounts are per Room or per Occupancy instead of per Pax. @Type=25: price is per Room. @Type=14: price is per occupancy, @Code is mandatory, AdditionalGuestAmounts are not allowed   @Code 0..1 String Mandatory if @Type=14.   Rate/AdditionalGuestAmounts 0..1  BR   ../AdditionalGuestAmount 1..n  Price and information about the additional pax (children, infants or extra adults   @MaxAdditionalGuests 1 Integer Number of the additional pax   @AgeQualifyingCode 1 Integer N: 10, 8, 7. Adult, child or baby   @Type 0..1 String N: Exclusive. If present price is absolute and price tag is @Amount   @Amount 0..1 Decimal Price for each additional pax   @Percent 0..1 Decimal Percent for each additional pax   RatePlan/Supplements 0..1  BR. Present if supplements by board exists   ../Supplement 1..n     @Start 1 Date Start date of this supplement   @End 1 Date End date of this supplement   @AgeQualifyingCode 0..1 Integer N: 10, 8, 7. Adult, child, baby. Not allowed if charging Supplement Board by Occupancy   @ChargeTypeCode 0..1 String Occupancy Supplement Board. Only allowed if charging Supplement Board by Occupancy.   @Amount 1 Decimal Amount of the supplement   @SupplementType 1 String N: Board   @InvCode 1 String OTA MPT Code if @SupplementType is Board. Check Documentation \u0026gt; Code Lists \u0026gt; Meal Plan Codes (OTA MPT)   RatePlan/SellableProducts 0..1  BR. List of sellable products   ../SellableProduct 1..n     @InvCode 1 Integer Sellable Product Code   @InvType 1 Integer N: ROOM. Sellable product type.    HotelAvailNotif \u0026lt;HotelAvailNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;9\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; InvCode = \u0026quot;APT\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;8\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus SellThroughOpenIndicator = \u0026quot;false\u0026quot; MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-21\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Restriction = \u0026quot;Master\u0026quot; Status = \u0026quot;Close\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelAvailNotif\u0026gt;     Element Rel Type Description     HotelAvailNotif 1     ../request 1     request/AvailStatusMessages 1     @HotelCode 1 String    ../AvailStatusMessage 1..n     @BookingLimit 0..1 Integer DV. Number of available rooms per Room-RatePlan for the indicated dates   AvailStatusMessage/StatusApplicationControl 1     @Start 1 Date Start date   @End 1 Date End date   @RatePlanCode 1 String    @InvCode 0..1 String BR. Room Code   @InvType 0..1 String BR. N: ROOM   AvailStatusMessage/LengthsOfStay 0..1     @ArrivalDateBased 0..1 Boolean true: the Minimum and Maximum Stay is checked ONLY the first day of the availability. false or null: the Minimum and Maximum Stay is checked all the availability days. If both values are needed, two AvailStatusMessage will be sent.   ../LengthOfStay 1..2     @Time 1 Integer Indicates the number of @TimeUnit for this stay   @TimeUnit 1 String N: Day   @MinMaxMessageType 1 String N: MinLOS, MaxLOS. Minimum or maximum stay   AvailStatusMessage/RestrictionStatus 0..1     @Status 0..1 String N: Open Close   @Restriction 0..1 String N: Master, Arrival, Departure.   @MinAdvancedBookingOffset 0..1 Integer Minimum number of days before the check-in date to be available to be booked. This restriction is usually used to offer discounts on early bookings.   @MaxAdvancedBookingOffset 0..1 Integer Maximum number of days before the check-in date to be available to be booked. This restriction is usually used to offer last minute discounts on unsold inventory.   @SellThroughOpenIndicator 0..1 Boolean BR. Room-RatePlan can be sold with no limit if @Status is Open    Responses Each request should provide a response for the same type of element that has been sent. For example, if a HotelRatePlanNotif request is received, a HotelRatePlanNotif response should be sent and so on.\n   Possible combination Elements regarding Request     HotelAvailNotifResponse / HotelAvailNotifResult   HotelRatePlanNotifResponse / HotelRatePlanNotifResult   HotelRatePlanInventoryNotifResponse / HotelRatePlanInventoryNotifResult    Success For all successful requests is expected to be returned a Success element in the response. On a HotelAvailNotif request it should be looking like the following:\n\u0026lt;HotelAvailNotifResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;  Error On the other hand, when request provides any error, the response should look like:\n\u0026lt;HotelAvailNotifResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Errors xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Error ShortText = \u0026quot;AvailStatusMessages not found\u0026quot; Code = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;     Element Rel Type Description     Errors 1     Error 1..n  Displays error information that has occurred in the system   @ShortText 1 String Brief description of the error   @Code 1 Integer Check General Details \u0026gt; Error Table    "
},
{
	"uri": "/channelx/faq/",
	"title": "FaQ",
	"tags": [],
	"description": "Discover ChannelX",
	"content": " Generic What is the timezone displayed in the messages?\nTime zone is always UTC.\nHotelRatePlanInventoryNotif, HotelRatePlanNotif and HotelAVailNotif all include another message called \u0026ldquo;Derived\u0026rdquo;. What is a Derived rate and what is its purpose?\nA derived rate is a rate that has derived from its base rate, but you can change its condition so that you can present it as a discounted rate or some sort of offer. In the derived rate message you will also see a RateBasePlanCode. This is used to show the code of the parent rate of the Derived Rate.\nWhat is LocationCodesInclusive used for?\nIf set as true, this means that you are able to sell the hotel only for specific markets based on the value of \u0026ldquo;CountryCode\u0026rdquo;. If set as false, you will not be able ot sell the hotel for the markets indicated in the \u0026ldquo;CountryCode\u0026rdquo;.\nThere are currency codes displayed on both HotelRatePlanInventoryNotif and HotelRatePlanNotif. Is it possible for the currency to be different between these two messages?\nThe channel will receive an error if they try to introduce different currencies in these fields. It is not allowed to have different values for the currency in these fields.\nCould the system send overlapped dates between \u0026ldquo;End\u0026rdquo; in one load and \u0026ldquo;Start\u0026rdquo; in a new? (Ex. 1st load is for Start = 1 Aug | End = 31 Aug and 2nd load is for Start 31 Aug | End 30 Sept).\nYes, it is possible, but it is not common. When this happens, the last product loaded will be the one to be applied. In case they were loaded in the same request, the order goes from top to bottom, and the lowest line containing the overlapping date will be the one that is applied.\nSuppose one ARI sent by Travelgate contained multiple rate plans and then a few of them may not be in the right format (i.e. rate plan name missing, etc.). What happens in this case?\nIf there is an error at the time the product is pushed into your system, you need to return an error. You have to process the whole request correctly. As for the error description, it is up to you.\nFullCopy What is FullCopy for?\nIt is a tool that allows to make a Full Product copy of the selected hotels inside InventoryX system.\nHow do I know whether it is a Delta or a *Full Copy* - If you get an HotelRatePlanInventoryNotif call with an element\n\u0026lt;TPA_Extensions xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Attribute key = \u0026quot;HotelNotifType\u0026quot; value = \u0026quot;FullCopy\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt;   Full Copy will send a lot more information than a simple Delta  What happens if a rate is deleted, does Travelgate inform us of this in the Full Copy?\nNot in Full Copy. When a Full Copy is run after a rate has been deleted, you will only receive the information that is currently loaded in the system. You will be notified of a rate being removed by a Delta instead of a Full Copy after its removal.\nInventory For HotelRatePlanInventoryNotif, what does the \u0026lsquo;RatePlanNotifType\u0026rsquo; (New, Delta and Remove) stand for?\nRates can be created/deleted/modified. The status New means that it\u0026rsquo;s a rate that has been created (a new rate), the status Delta is for a rate that has been modified and the status Removed is for a deleted rate.\nIn HotelRatePlanInventoryNotif, what does CancelPenalty Start and End dates represent?\nStart and End dates in this instance show the range of dates in which these cancellation policies are going to be applied. The start and end days are included in the cancellation policy range.\nWhat does the \u0026ldquo;RatePlan Duration\u0026rdquo; atrribute in HotelRatePlanInventoryNotif mean?\nDuration is no longer being used and will be removed from the documentation.\nFrom the HotelRatePlanInventoryNotif, can you set \u0026lt;RatePlanStatusType = Deactivated\u0026gt; for specific periods? It also contains a start and end for rate plan attribute as well.\nThis is used to deactivate a rate. The deactivation can either be for an indefinite amount of time, of a specific time frame, and the date range (start and end) indicates this range.\nIf your RatePlanInventory ARI provided \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;??\u0026quot;/\u0026gt;, then the Supplement attribute will be present, is this correct? And, is it possible for it to show up when Mealplancode is \u0026lsquo;Room Only\u0026rsquo;?\nThe RatePlanInventory informs of what the base MealPlan for this rate is (Room only, Bed and Breakfast, All Inclusive, etc). A base rate cannot have more than one MealPlan. The Supplement is not indicated here, it is indicated in the RatePlanNotif. The MealPlanCode displayed in MealsIncluded is the push system code for the meal plans which can be found in the code list in the static infomration.\nAvail What does \u0026ldquo;LengthsOfStay ArrivalDateBased\u0026rdquo; mean? What\u0026rsquo;s different between the true and false values?\nIf this is set as true, the type of Min/Max LOS is on arrival for that specific day. For this type, the values for Min/Max LOS on arrival, only apply if it is applied to the check-in day. If this is set as false, it\u0026rsquo;s a normal Min/Max LOS.\nDoes TravelgateX have a default maxmimum nights restriction (Ex. max 30 days) if your HotelAvailNotif does not provide max LOS information for that rate?\nTravelgateX does not have any restriction on default maximum nights.\nWhat does Master/ArrivalClose/DepartureClose mean?\nThe Closed On Arrival means that the check-in day cannot be the same day as the one that has Closed On Arrival applied to it, but this day can be inside the Availability search range. The Closed On Departure means that the check-out day cannot be the same day as the one that has Closed On Departure applied, but this day can be in the Availability search range. Closed Master means that the hotel is closed that day. The Closed Master means that in the indicated dates, none of the days can be a check-in day, check-out day or a day inside the range of the search.\nPrices For the standard occupancy calculation, should the data from \u0026lt;Quantities StandardNumBeds\u0026gt; or \u0026lt;BaseByGuestAmt NumberOfGuests\u0026gt; be consumed?\nThe first part indicates the StandardOccupancy number (value). The second indicates the format in which prices are returned when they are loaded by price.\n Note: it is possible to load more than one price type at a time. Although it is not something that is done frequently, it can happen. If a channel manager loads more than one price type (i.e. by room and by pax) we will return the cheapest one in the Availability search response.\n Both tax \u0026lsquo;ChargeFrequency\u0026rsquo; and \u0026lsquo;ChargeUnit\u0026rsquo; are optional bits of information. So, what happens if they are not returned in a push message we send you? Do you need to re-calculate the price from HotelRatePlanNotif (if have tax elements are returned), or are you able to assume AmountAfterTax is the final price?\nIf these elements are not returned, then a fixed amount will be returned as a tax if you have set it up in the SetUp part of the extranet and depending on the type of tax you have set up. You always have to calculate the price that is returned in this tag with the tax.\nExample - suppose you set up an additional tax (i.e. per pax and per night), should we add up or subtract it from AmountAfterTax attribute?\nThe AmountAfterTax attribute inside the RatePlanNotify does not include the taxes you will set up (it might include any taxes the channel has loaded on their end if they have done so). The AmountAfterTax at the time of booking (the Reservation RS logs) will include the taxes indicated by you.\nReferring to the RatePlan message, there are \u0026lt;Supplement\u0026gt;. Understanding price is for meal basis, should you require calculation to add with \u0026lt;AmountAfterTax\u0026gt;, the purpose of this is an extra cost for supplement in case there are \u0026lt;AdditionalGuest\u0026gt; applied.\nThe Supplement tag is for MealPlans, not for additional paxes. The price indicated in there, shows the price of the supplement.\nWhat happens if more than one price type is loaded for the same day/range of days and for the same room/rooms?\nAll price types can be loaded at the same time (or at different times without overwriting). This isn\u0026rsquo;t usually the case and almost never is there more than 1 price type loaded at a time. If all price types are loaded at the same time, or only two are loaded at the same time, at the time of the Availability search the price that is returned is the cheapest one.\n "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-flightsx/",
	"title": "FlightsX",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " What is GraphQL? GraphQL is a query language for your API. It was first designed by Facebook. It\u0026rsquo;s a new way of dealing with and managing data models via API, and is especially useful for decoupling client from server logic.\n GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\nGraphQL uses a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\nA GraphQL query is a string that is sent to the server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n GraphQL at TravelgateX GraphQL is a perfect fit for all of our application needs:\n Scalable: GraphQL is able to handle millions of requests. Stable: GraphQL allows us to keep building our API products and introduce new changes to our APIs that do not break existing integrations in client applications. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but it also consumes less bandwidth which makes responses lighter.  We are focused on delivering the best APIs to our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard to understand, it also gets harder to manage as the data model gets bigger. At TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways to improve.\n \u0026ldquo;GraphQL allows us to think of our APIs as a whole, giving us a coherence across all of our products and services, which are accessible from one single endpoint. It is the ideal showcase for all of our innovative API products.\u0026rdquo; Oscar Perez, CTO\n Join us on Slack to talk with us about learning to use GraphQL and any questions you might have, or skills you would like to share with our community. You can also send us a Jira service desk request. If you would like any new features or more information in our Learning GraphQL documentation, send us an issues request. "
},
{
	"uri": "/hotelx/reference/schema/mutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!,     ): HotelXUpdateStatus    createCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    updateCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    book(    input: HotelBookInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBookPayload    cancel(    input: HotelCancelInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelCancelPayload   Show deprecated fields   loadFile( input: String!, ): String!    }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createDefaultSettings(HotelXDefaultSettings): Saves defaults settings to HotelX  updateDefaultSettings(HotelXDefaultSettings): Updates defaults settings to HotelX  updateStatus(HotelXUpdateStatus): Updates status of an entity of HotelX  createCommonSettings(HotelXCommonSettings):   updateCommonSettings(HotelXCommonSettings):   book(HotelBookPayload): Creates a new hotel booking consisting of an option of 1 or more rooms.  cancel(HotelCancelPayload): Cancels an existing hotel booking consisting of an option of 1 or more rooms.  loadFile(String!):   \n"
},
{
	"uri": "/hotelx/howtos/certification_process/howtoapply/",
	"title": "How to apply",
	"tags": [],
	"description": "How you can apply for certification process",
	"content": "Our Certification Process should be completed once you have finished the development.\nOnce Certification Process logs have been delivered through our Customer Care service desk, we will review it and advise you once the integration is certified.\n Within your WelcomePack email you should have received a user to access our customer care portal. Click on Certification Process option and upload or drag and drop your logs. You will be issued a WECARE ticket number. Any time you wish to comment on the issue or check on the status of your certification, all you need to do is log into Jira and open your WECARE ticket number. Once you pass the certification process, you are technically ready to start buying through our Hub.  Send us the following information in order to proceed with the certification process:\n CURL request and response of all the XTG methods used on your side to make an availability, valuation, reservation, cancellation, booking detail request of each case and an example of booking list. Additionally, attach the resulting XTG response interpretation screenshots of your system so we can insure you are showing the information correctly.  "
},
{
	"uri": "/stats/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides   Query Stats How to query about your performance\n    "
},
{
	"uri": "/travelgatex/security/identity-access-management/",
	"title": "Identity and access management",
	"tags": [],
	"description": "Advanced security management",
	"content": " This section provides an overview of Identity and access management.\nTravelgateX identity and acccess management lets administrators authorize who can take action on specific resources, giving you full control and internal visibility to manage resources centrally.\nIdentity and access management provides an unified view of your security policy across your entire organization, with built-in auditing to ease compliance processes.\nAs an administrator, when you register with us, we provide you with login details to access your TravelgateX account, including a username and password. As administrator, you can then add additional users to your account and grant them specific access.\nIdentity and access management lets you manage access control by defining who Member has what kind of access Role to each resource:\nConcepts related to identity You grant access to members which can be either:\n Users: A developer, administrator or any other person from your Organisation who interacts with the TravelgateX Platform. An email address can be used as the identity of a User.\n Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\n  Concepts related to access management When an authenticated member attempts to make a request, the IAM policy will decide if the member is allowed to perform the operation requested.\nResources and Groups You can grant access to member for each resource or set of resources. Some examples of common resources are Suppliers, Accesses and Clients.\nGroups are organized hierarchically, where the Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nHierarchy assignment Resources are assigned to groups and propagated by groups hierarchically from bottom to top.\nPermissions and Roles Permissions determine what operations are allowed on a resource.\nA role is a collection of permissions. You cannot assign a permission to the member directly; instead you grant them a role. When you grant a role to a user, you grant them all the permissions that the role contains.\nCommon roles include: - Viewer: Allows a User to make Queries of resources, but not change any data - Editor: Allows a User to make Mutations (changes) to the data - Special: In your admin account, you can create special roles that might allow some of your users to only access specific resources. For example, if you have a large team and have divided them based on suppliers, you may choose to only grant each User access to the resources for a specific Supplier.\nYou can grant roles to members, which define who has what type of access. A policy is attached to a resource and identifies which member role is applied to every resource.\nFor more information about Identity and access management configuration, check out our tutorial How-to configure HotelX permissions\u0026gt; "
},
{
	"uri": "/hotelx/howtos/bookingflow/",
	"title": "Integrate",
	"tags": [],
	"description": "How to integrate with HotelX booking process",
	"content": " In this section you will find, step by step, the booking process operations you must follow to complete your integration. In addition, you will find some query examples in order to perform the booking flow. You can also consult the Schema through our API playground besides to launch requests.\nNOTE: Remember that you can configure which fields you want to receive on the response, you just have to configure them on the correspondent graph query.\n Suggestions In order to help you during the booking process you can find several operations to get static data from the providers. You can find the info on our Static content page.\n The guides   Booking flow Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n     Search Search step\n     Quote How to valuate an availability option\n     Book How to perform a booking\n     Booking List How to request for booking detail\n     Cancellation How to cancel a booking\n    "
},
{
	"uri": "/mappea/reference/schema/mutation/",
	"title": "MappeaMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!):   \n"
},
{
	"uri": "/hotelx/plugins/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "Map different codes from different suppliers in order to get a de-duped response.",
	"content": " The map plugins are used to change the supplier codes to client codes or vice versa. There are four types:\n Hotel map  Board Map  Room Map  Rate Map   Our map formats share a common structure. In order to load your maps you just need to follow the instructions below:\nExample files You can download example for the files structure here\nEntity Maps File Format The file should be in the following format:\n Encoding: UTF-8\n File Name: [Context Source]_[Context Destination]_[entity]_map.csv\n Context Source: it corresponds to the client code\n Context Destination: it corresponds to the supplier code\n 1 file for each supplier\n  Header Row: Code Source, Code Destination\n Context Source: it corresponds to the client codes\n Context Destination: it corresponds to the supplier codes\n  Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/[entity]/\n  File Names All map files must have the same name structure as follows - you need create a file for Context Destionation\n   Entity File Name     Hotel [Context Source]_[Context Destination]_hotel_map.csv   Board [Context Source]_[Context Destination]_board_map.csv   Room [Context Source]_[Context Destination]_room_map.csv   Rate [Context Source]_[Context Destination]_rate_map.csv    Directories    Entity File Name     Hotel /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Hotel/   Board /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Board/   Room /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Room/   Rate /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Rate/    Sample Files Let\u0026rsquo;s suppose we have the following client code and supplier code, then we need to create one file for each supplier we have * Client code: GUE\n Supplier Code: BVJ  Name: GUE_BVJ_hotel_map.csv\nCode Source, Code Destination 10,c11\\#10 10000,7604 10000,1274249  Plugin Name    Entity Map Plugin Name     Hotel HotelMapX   Board BoardMapX   Room RoomMapX   Rate RateMapX    Other Maps Besides, an alternative for room map is also shown below:\nDescription Room Map As a room map alternative, you can generate a room code from a room description. This plugin applies some rules over the description and generates a code. You need to load other files for this plugin.\nFiles We have two files for this plugin:\n Alias Table: it is used to replace some words from the description  Noise Words: it deletes some words from the description   Alias Table Format File The file must be in the below format:\n Encoding: UTF-8  File Name: roomDescriptionMapX_aliasTable.csv  Header Row: ToReplace, ReplaceWith, Order  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/plugin/  Sample File Name: roomDescriptionMapX_aliasTable.csv\nToReplace,ReplaceWith,Order 1 bed,apt,102 1 bedroom,apt,100 2 bedroom,2-bedroom,200 3 bed,3-bedroom,303 apartment,apt,902  Noise Words Format File The file must be in the below format:\n Encoding: UTF-8  File Name: roomDescriptionMapX_noiseWords.csv  Header Row: ToRemove  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/plugin/  Sample File Name: roomDescriptionMapX_noiseWords.csv Data:\nToRemove ad b\u0026amp;b breakf  How applies When you execute the plugin the steps to be followed are:\n Get room description. Replace strings with roomDescriptionMapX_aliasTable.csv, the order to apply this replace depends on the order column. Sort the description words alphabetically. Remove words with roomDescriptionMapX_noiseWords.csv file.  Get your new code.   Execution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;ROOM_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;mapping_room_description\u0026quot; } ] } }  Modifying data Once mapping files are loaded, we can perform the following operations on them:\nUpdating data We have two options:\n Reprocessing the same data by renaming the file and just removing \u0026ldquo;_processed\u0026rdquo;: Example example_processed.csv \u0026ndash;\u0026gt; example.csv Changing the data by deleting the processed file and uploading a new one with new information.   Deleting data Uploading a new file only with headers (no information).\n"
},
{
	"uri": "/travelgatex/reference/schema/mutation/",
	"title": "Mutation",
	"tags": [],
	"description": "",
	"content": " The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server\nGraphQL schema definition type Mutation {  admin: AdminMutation    hotelX: HotelXMutation    mappea: MappeaMutation    paymentX: PaymentXMutation   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields admin(AdminMutation):   hotelX(HotelXMutation):   mappea(MappeaMutation):   paymentX(PaymentXMutation):   \n"
},
{
	"uri": "/hotelx/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object’s properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/mappea/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object’s properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/paymentx/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object’s properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/stats/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object’s properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/travelgatex/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object’s properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/paymentx/reference/schema/mutation/",
	"title": "PaymentXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!): Store Card  deleteStoredCard(PaymentXStoredCard!): Delete Card  \n"
},
{
	"uri": "/channelx/documentation/pricetut/",
	"title": "Price Use Cases",
	"tags": [],
	"description": "Some examples on how to operate prices",
	"content": " Three price charging types are allowed: price per Room, price per Pax and price per Occupancy. When more than one price is charged for the same day, the lowest price will be returned as available price.\nPrice per Room\nWhen a price is charged per Room means that all occupancies allowed in the room will have the same price. If an AdditionalGuestAmount are charged for occupancies over the standard occupancy, they will be applied.\nPrice per Pax\nWhen a price is charged per Pax means that the price is for the number of guests specified.\nIf NumberOfGuests is equal or under the standard occupancy, the price returned will have to be the same as the price charged. If NumberOfGuests is over the Standard Occupancy, the price is calculated from the Standard Occupancy price and the AdditionalGuestAmount charged.\nPrice per Occupancy\nWhen a price is charged per Occupancy means that this price will only be available for the specified occupancy. No AdditionalGuestAmount are applied.\nNotes\n Children and babies are not allowed in BaseByGuestAmts. Children and babies are always defined in AdditionalGuestAmounts. The possible Type values in the AdditionalGuestAmount tag are Exclusive and not specified. \u0026gt; If there is no value specified, then the price is a relative and it is added to the price of the current pax.\nIf the value is \u0026ldquo;Exclusive\u0026rdquo;, then the price is absolute and will represent the total price of the current pax.\n If the price is per Room, then all AdditionalGuestAmount must be relative.\n If the price is per Occupancy then @Type should be 14 and @Code should be specified.\n An Occupancy is defined by AdultNumber-ChildNumber-InfantNumber. E.g.: @Code for an occupancy of 2 adults, 1 child and 0 babies would be \u0026ldquo;2-1-0\u0026rdquo;\n  Price per Guests Case 1:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100    Case 2:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;130.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 2*(130\u0026frasl;2) = 130    Case 3:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + (40) = 190    Case 4:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Type=\u0026quot;Exclusive\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + 40 = 140    Case 5:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n1-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   1-1-0 2*(100\u0026frasl;2) = 100    Case 5.1:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n1-0-1\n NOTE: The same samples with children are valid for babies specifying AgeQualifyingCode = \u0026ldquo;7\u0026rdquo;.\n Message:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   1-1-0 2*(100\u0026frasl;2) = 100    Case 6:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n2-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   2-1-0 2*(100\u0026frasl;2) + ((100\u0026frasl;2) -40) = 60    Case 7:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;-15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10) = 160   4-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10) + ((100\u0026frasl;2) - 15) = 195    Case 8:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10) = 140   4-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10) + ((100\u0026frasl;2) - 10) = 180    Case 9:\nStandard occupancy = 3\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n4-0-0\n5-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;3\u0026quot; AmountAfterTax=\u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 3*(150\u0026frasl;3) = 150   4-0-0 (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10) = 190   5-0-0 (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10) + ((150\u0026frasl;3) + 15) = 255    Price per Room Case 1:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n1-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 100   1-1-0 100    Case 2:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n1-1-0\n3-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 100   3-0-0 100 + (100\u0026frasl;2 + 20) = 170   1-1-0 100   3-1-0 100 + (100\u0026frasl;2 + 20) + (100\u0026frasl;2 + 10) = 230    Case 3:\nStandard occupancy = 3\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;120.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 120   2-0-0 120   3-0-0 120   4-0-0 120 + (120\u0026frasl;3 + 20) = 180    Price per Occupancy Case 1:\nRoom uses\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot; Code = \u0026quot;2-0-0\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 100   3-0-0 -    Case 2:\nRoom uses\n2-1-0\n2-0-1\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;95.00\u0026quot; Code = \u0026quot;2-1-0\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;80.00\u0026quot; Code = \u0026quot;2-0-1\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     2-1-0 95   2-0-1 80     "
},
{
	"uri": "/hotelx/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "HotelX Quickstart",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/6972ecae51e849fe8c49305bf0032dfe\\/raw\\x22,\\x22divname\\x22:\\x22div_authorization\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/alexjmoya\\/b5dff8d1ec9c6f61dc0392a20558be67\\/raw\\x22,\\x22divname\\x22:\\x22div_search\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/alexjmoya\\/f6d343260df0e75ab636779c2e00db39\\/raw\\x22,\\x22divname\\x22:\\x22div_quote\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/alexjmoya\\/64dfb6604667ee86399b7857708830e9\\/raw\\x22,\\x22divname\\x22:\\x22div_book\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/alexjmoya\\/f2933df3054688d8a3551ca3cb16bf90\\/raw\\x22,\\x22divname\\x22:\\x22div_cancel\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/alexjmoya\\/78fcc6ec8ba6c7535d39f687aa0e714d\\/raw\\x22,\\x22divname\\x22:\\x22div_bookinglist\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  In this section you will find all the necessary queries in order to perform a booking flow using GraphQL Playground.\nStep by Step In order to perform a booking flow, please follow the steps below:\nAuthorization First of all, to be able to run any query you should have an Apikey as an authentication.\nIn case you have an Apikey, you can use it by introducing it in the HTTP Headers. Otherwise, you can use the following Apikey for test purposes:\n64780338-49c8-4439-7c7d-d03c2033b145\n  \nSearch By means of the following query, you will be able to perform an availability search for a given specific criteria. Modify \u0026ldquo;criteriaSearch\u0026rdquo; fields using valid dates and press the button play to send the query.\n   In case you need to replicate the search, there is a possibility to do so by using our token (see second tab). This token is obtained in the response of a search query and you will find it in each of the options returned.\nQuote This query aims to return the total price and cancellation policies of the option selected in the previous step. In the Query Variables, modify the optionRefId with the option id value returned in the search response and send the query:\n   In this case, you can modify the language, if you don’t indicate the language, it uses the same language of search.\nBook This query allows you to book a previously quoted option. In the Query Variables, modify the optionRefId with the optionRefId value returned in the quote response and send the query with the other mandatory information:\n--    Cancel This query allows you to perform a book cancellation. In Query Variables, you should introduce all the necessary information of the book that you want to cancel:\n--    Booking List You can retrieve the reservation details and status by performing one of the following three options (see tabs): 1. References - Introducing reservation locators 2. Per booking dates 3. Per arrival dates\n--   \n"
},
{
	"uri": "/travelgatex/concepts/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "/insights-x/datasets/dataset-reference/",
	"title": "Reference",
	"tags": [],
	"description": "Learn about how the information is stored in our datasets",
	"content": " On this page you will learn how the data is stored in Datasets.\nTables Data is stored in multiple tables depending on the kind of info that wants to be queried. Descriptions of each table and their correspondent fields are found below:\ninsights_daily_(buyer|seller) This table contains info from searches, quotes and bookings aggregated by day.\nfields\n client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). check_in (TIMESTAMP). Check in date in UTC (format: YYYY-MM-DD hh:mm:ss). nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. adults (NUMBER). Quantity of paxes older than 12 years (12 is not included). children (NUMBER). Quantity of paxes between 2 and 12 (both included). infants (NUMBER). Quantity of paxes younger than 2 years (2 is not included). search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, check_in\u0026hellip;). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok_net (NUMBER). Quantity of confirmed bookings for above key where we have the net amount in EUR. booking_ok_unknown (NUMBER). Quantity of confirmed bookings for above key where we have the amount in EUR but it may have applied commissions. booking_nok (NUMBER). Quantity of failed bookings for above key. min_amount_booking_net (NUMBER). Net amount of cheapest booking for above key. max_amount_booking_net (NUMBER). Net amount of most expensive booking for above key. tot_amount_booking_net (NUMBER). Total net amount of confirmed bookings for above key. min_amount_booking_net (NUMBER). Amount of cheapest booking for above key when we don\u0026rsquo;t know if any commission is applied. max_amount_booking_net (NUMBER). Amount of most expensive booking for above key when we don\u0026rsquo;t know if any commission is applied. tot_amount_booking_net (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied. hotels (STRUCT). Repeated field that contains info about hotels for above key.  code (STRING). Hotel unique ID. search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id cache search_date check_in nights nationality num_rooms adults children infants search_ok search_nok quote_ok quote_nok booking_ok_net booking_ok_unknow booking_nok min_amount_booking_net max_amount_booking_net tot_amount_booking_net min_amount_booking_unknown max_amount_booking_unknown tot_amount_booking_unknown hotels.code hotels.search_ok_net hotels.search_ok_unknown hotels.search_nok hotels.quote_ok_net hotels.quote_ok_unknown hotels.quote_nok hotels.booking_ok_net hotels.booking_ok_unknown hotels.booking_nok hotels.min_amount_search_net hotels.max_amount_search_net hotels.tot_amount_search_net hotels.min_amount_search_unknown hotels.max_amount_search_unknown hotels.tot_amount_search_unknown hotels.min_amount_quote_net hotels.max_amount_quote_net hotels.tot_amount_quote_net hotels.min_amount_quote_unknown hotels.max_amount_quote_unknown hotels.tot_amount_quote_unknown hotels.min_amount_booking_net hotels.max_amount_booking_net hotels.tot_amount_booking_net hotels.min_amount_booking_unknown hotels.max_amount_booking_unknown hotels.tot_amount_booking_unknown     client A provider X false 2019-01-13 00:00:00 UTC 2019-02-13 00:00:00 UTC 4 SE 1 1 null null 13 11 null null null null null null null null null null null 641443 13 null null null null null null null null null null null null null null null null null null null null null null null null null null                           551568 null 11 null null null null null null null null null null null null null null null null null null null null null null null null null   client B provider Y false 2019-01-13 00:00:00 UTC 2019-01-18 00:00:00 UTC 2 CN 1 2 null null 6 1 3 null 1 null null 398.84 398.84 398.84 null null null 299 null null 1 null null null null null null null null null null null null null null null null null null null null null null null null                           927 5 null null 3 null null 1 null null 198.84 598.84 2393.04 null null null 198.84 598.84 1196.52 null null null 398.84 398.84 398.84 null null null                           203 null 1 null null null null null null null null null null 2548.26 2548.26 2548.26 null null null null null null null null null null null null    insights_agg_daily_(buyer|seller) This table contains info similar to insights_daily_(buyer|seller) but with a bigger aggregation. The fields check_in, adults, children and infants have disapeared.\nfields\n client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). booking_window (NUMBER). It is an enumeration to describe how far away is the check-in date.  1 = Last second (0-1 day). 2 = Last minute (2-3 days). 3 = About 1 week (4-7 days). 4 = About 2 weeks (8-14 days). 5 = About 1 month (15-30 days) 6 = About 2 months (31-60 days). 7 = About 3 months (61-90 days). 8 = More than 3 months (90+ days).  nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. pax_type (NUMBER). It is an enumeration to describe a combination of paxes (adults + children + infants).  1 = Solo (Adults = 1, children = 0 and infants = 0). 2 = Couple (Adults = 2, children = 0 and infants = 0). 3 = Family (Adults = 2, children + infants \u0026gt; 0). 4 = Group (Adults \u0026gt; 2). 5 = Other.  search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, check_in\u0026hellip;). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok_net (NUMBER). Quantity of confirmed bookings for above key where we have the net amount in EUR. booking_ok_unknown (NUMBER). Quantity of confirmed bookings for above key where we have the amount in EUR but it may have applied commissions. booking_nok (NUMBER). Quantity of failed bookings for above key. min_amount_booking_net (NUMBER). Net amount of cheapest booking for above key. max_amount_booking_net (NUMBER). Net amount of most expensive booking for above key. tot_amount_booking_net (NUMBER). Total net amount of confirmed bookings for above key. min_amount_booking_net (NUMBER). Amount of cheapest booking for above key when we don\u0026rsquo;t know if any commission is applied. max_amount_booking_net (NUMBER). Amount of most expensive booking for above key when we don\u0026rsquo;t know if any commission is applied. tot_amount_booking_net (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied. hotels (STRUCT). Repeated field that contains info about hotels for above key.  code (STRING). Hotel unique ID. search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id cache search_date booking_window nights nationality num_rooms pax_type search_ok search_nok quote_ok quote_nok booking_ok_net booking_ok_unknow booking_nok min_amount_booking_net max_amount_booking_net tot_amount_booking_net min_amount_booking_unknown max_amount_booking_unknown tot_amount_booking_unknown hotels.code hotels.search_ok_net hotels.search_ok_unknown hotels.search_nok hotels.quote_ok_net hotels.quote_ok_unknown hotels.quote_nok hotels.booking_ok_net hotels.booking_ok_unknown hotels.booking_nok hotels.min_amount_search_net hotels.max_amount_search_net hotels.tot_amount_search_net hotels.min_amount_search_unknown hotels.max_amount_search_unknown hotels.tot_amount_search_unknown hotels.min_amount_quote_net hotels.max_amount_quote_net hotels.tot_amount_quote_net hotels.min_amount_quote_unknown hotels.max_amount_quote_unknown hotels.tot_amount_quote_unknown hotels.min_amount_booking_net hotels.max_amount_booking_net hotels.tot_amount_booking_net hotels.min_amount_booking_unknown hotels.max_amount_booking_unknown hotels.tot_amount_booking_unknown     client A provider X false 2019-01-13 00:00:00 UTC 3 4 SE 1 1 13 11 null null null null null null null null null null null 641443 13 null null null null null null null null null null null null null null null null null null null null null null null null null null                         551568 null 11 null null null null null null null null null null null null null null null null null null null null null null null null null   client B provider Y false 2019-01-13 00:00:00 UTC 3 2 CN 1 2 6 1 3 null 1 null null 398.84 398.84 398.84 null null null 299 null null 1 null null null null null null null null null null null null null null null null null null null null null null null null                         927 5 null null 3 null null 1 null null 198.84 598.84 2393.04 null null null 198.84 598.84 1196.52 null null null 398.84 398.84 398.84 null null null                         203 null 1 null null null null null null null null null null 2548.26 2548.26 2548.26 null null null null null null null null null null null null    effective_bookings_(buyer|seller) This table contains specific information about bookings done and their current status (Ok or cancelled).\nfields\n session_id (STRING). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. booking_date (TIMESTAMP). Booking date in UTC (format: YYYY-MM-DD hh:mm:ss). checkin_date (TIMESTAMP). Checkin date in UTC (format: YYYY-MM-DD hh:mm:ss). amount (NUMBER). Amount of booking in EUR. cancel_date (TIMESTAMP). Cancel date in UTC (format: YYYY-MM-DD hh:mm:ss) if the booking was cancelled else will be empty. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). market_name (STRING). Source market\u0026rsquo;s name. num_room (NUMBER). Quantity of rooms booked. nights (NUMBER). Length of stay. country (STRING). Country of destination (ISO 3166-1 alpha-2). zone_1 (STRING). Main zone of destination. zone_2 (STRING). Secondary zone of destination. city (STRING). Last level of destination. hotel_code (STRING). Hotel\u0026rsquo;s code in provider\u0026rsquo;s portfolio. hotel_name (STRING). Hotel\u0026rsquo;s name in provider\u0026rsquo;s portfolio.  Preview\n   session_id client_id provider_id booking_date checkin_date amount cancel_date market market_name num_room nights country zone_1 zone_2 city hotel_code hotel_name     123456789012 client 1 provider 1 2018-03-28 12:21:18 UTC 2018-05-28 12:00:00 UTC 244.72 null IT Italy 1 3 US Utah Garfield County Panguitch 123 Hotel Test    daily_portfolio_seller This table is used to know which hotels over supplier\u0026rsquo;s portfolio are being queried by the clients. This can be helpful to know which percentage over portfolio is mapped by the client.\nfields\n client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. hotel (STRING). Hotel unique ID. hotel_name_portfolio (STRING). Hotel name. hotel_country_portfolio (STRING). Hotel Country Code (ISO Alpha-2 code) status. It is an enumeration to describe the status of the hotel.  0 = Hotel code queried but it doesn\u0026rsquo;t appear in provider\u0026rsquo;s portfolio. It can be due to a wrong mapping in client\u0026rsquo;s system. 1 = Hotel code not queried but it appears in provider\u0026rsquo;s portfolio. It can be due to a mismapping in the client\u0026rsquo;s system. 2 = Hotel code queried and it appears in provider\u0026rsquo;s portfolio.   Preview\n   client_id provider_id hotel hotel_name_portfolio hotel_country_portfolio status     client A provider X 1 hotel_1 ES 1   client A provider X 2 hotel_2 IT 2   client A provider X V null null 0   client B provider Y 1 hotel_1 FR 1    daily_stats This table contains transactional info (response status, response time\u0026hellip;) of requests between clients and providers.\nfields\n st_date (TIMESTAMP) Search date in UTC (format: YYYY-MM-DD hh:mm:ss) client_id (STRING) Client unique ID provider_id (STRING) Provider unique ID speed (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). avail_ok (NUMBER). Quantity of searches with available results. avail_nok_results (NUMBER). Quantity of searches without available results. avail_nok_provider (NUMBER). Quantity of searches with generic error from provider. avail_nok_bad_request (NUMBER). Quantity of searches with error due a wrong request. avail_nok_integration (NUMBER). Quantity of searches with error due a failure in the connector. avail_nok_communication (NUMBER). Quantity of searches with error due a timeout. avail_nok_others (NUMBER). Quantity of searches with errors different to those above. avail_time (NUMBER). Total response time (in milliseconds) for all searches. quote_ok (NUMBER). Quantity of quotes with available results. quote_nok_results (NUMBER). Quantity of quotes without available results. quote_nok_provider (NUMBER). Quantity of quotes with generic error from provider. quote_nok_bad_request. Quantity of quotes with error due to a wrong request. quote_nok_integration. Quantity of quotes with error due a failure in the connector. quote_nok_communication (NUMBER). Quantity of quotes with error due to a timeout. quote_nok_others (NUMBER). Quantity of quotes with errors different to those above. quote_time (NUMBER). Total response time (in milliseconds) for all quotes. book_ok (NUMBER). Quantity of correct bookings. book_nok (NUMBER). Quantity of bookings with an error. book_time (NUMBER. Total response time (in milliseconds) for bookings. cancel_ok (NUMBER). Quantity of correct cancellations. cancel_nok (NUMBER). Quantity of cancellations with an error. cancel_time (NUMBER). Total response time (in milliseconds) for cancellations. other_ok (NUMBER). Quantity of transactions that cannot be included in one of above groups and that didn\u0026rsquo;t get an error. other_nok (NUMBER). Quantity of other transactions with an error. other_time (NUMBER). Total response time (in milliseconds) for other transactions.  Preview\n   st_date client_id provider_id speed avail_ok avail_nok_results avail_nok_provider avail_nok_bad_request avail_nok_integration avail_nok_communication avail_nok_others avail_time quote_ok quote_nok_results quote_nok_provider quote_nok_bad_request quote_nok_integration quote_nok_communication quote_nok_others quote_time book_ok book_nok book_time cancel_ok cancel_nok cancel_time other_ok other_nok other_time     2018-03-28 12:00:00 UTC client 1 provider 1 false 372408 159272 571 30093 0 40 0 206883360 182 0 0 0 0 0 0 38166 3 0 31848 0 0 0 0 0 0   2018-03-28 12:00:00 UTC client 1 provider 2 false 50 10 0 0 0 0 0 48754 419 6 0 0 0 4 0 374301 5 0 41257 1 0 6080 172 0 5116   2018-03-28 12:00:00 UTC client 2 provider 1 false 548214 0 577 0 714 0 0 47457579 3719 32 0 0 0 0 0 327425 18 0 81757 6 4 31803 230 0 42614    "
},
{
	"uri": "/mappea/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "/paymentx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "TravelgateX - The Ultimate Platform For The Travel Trade",
	"content": "The TravelgateX platform lets you build lightening fast applications and websites that connect to a wide range of travel suppliers in realtime. Integrations to new suppliers take less than 2 days to connect, rather than 2 weeks. Once the integration is in place, response times for showing hotel bookings is in the milliseconds, regardless of the size of the hotel booking database.\n  Overview TravelgateX Platform Information\n     Concepts Understand TravelgateX basic concepts\n     Reference Reference Documentation\n     Security Authorization \u0026amp; Authentication\n     Data Automation Automate bulk data operations\n     Tutorials Walkthrouhgs of common applications\n     Release Notes New Updates \u0026amp; Releases\n     Resources New Updates \u0026amp; Releases\n     FAQs Do you have specific questions about TravelgateX? Check out the FAQs\n    "
},
{
	"uri": "/hotelx/plugins/add_parameterx/",
	"title": "Add Parameter",
	"tags": [],
	"description": "Allows Add Parameter to the access created for a supplier",
	"content": " Add Parameter is an optional plugin that allows parameters to be added to accesses used by different suppliers at a request level.\nAdd Parameter Goals The add parameter plugin adds parameters in the configuration of the existing accesses. By doing this, you can add parameters dynamically in request time to the existing accesses (see Access configuration).\nParameters    key value type condition description     JSONConfiguration JSON mandatory JSON structure with parameters that you add by access or by supplier, or even for all accesses    Execution example { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;add_parameterX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;JSONConfiguration\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{\\\u0026quot;accesses\\\u0026quot;: [ {\\\u0026quot;codes\\\u0026quot;: [\\\u0026quot;1\\\u0026quot;,\\\u0026quot;2\\\u0026quot;],\\\u0026quot;parameters\\\u0026quot;: [ {\\\u0026quot;key\\\u0026quot;: \\\u0026quot;A\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;1\\\u0026quot;} ] } ], \\\u0026quot;suppliers\\\u0026quot;: [ {\\\u0026quot;codes\\\u0026quot;: [\\\u0026quot;XXX\\\u0026quot;], \\\u0026quot;parameters\\\u0026quot;: [ {\\\u0026quot;key\\\u0026quot;: \\\u0026quot;D\\\u0026quot;,\\\u0026quot;value\\\u0026quot;: \\\u0026quot;4\\\u0026quot;}] } ], \\\u0026quot;parameters\\\u0026quot;: [ {\\\u0026quot;key\\\u0026quot;: \\\u0026quot;C\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;valor\\\u0026quot; } ] }\u0026quot; } ] } ] }  "
},
{
	"uri": "/hotelx/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregate different Suppliers response based on different criteria.",
	"content": " Aggregation plugins extends HotelX allowing filtering Supplier options and responses using different business rules.\nKeyFilter Filters Supplier options based on field keys applying a selector function over field values.\nIt\u0026rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.\n Field Keys as a combination of:  SupplierCode  HotelCode BoardCode RoomCode Refundable Market PaymentType Promotion Supplement Surcharges Rate rules    Parameters    key value type condition description     primaryKey string mandatory It is the criteria used to aggregate, the value is a set of criteria separated by commas, the possible values are:\nexample: “hotel,supplier,room”    Processor It\u0026rsquo;s implemented as a Processor plugin\nExecution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION/RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;AGGREGATION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cheapest_price\u0026quot;, \u0026quot;parameters\u0026quot;: [ { {\u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;,\u0026quot;value\u0026quot;: \u0026quot;hotel,supplier,room\u0026quot;} } ] } ] } }  "
},
{
	"uri": "/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " What are Queries \u0026amp; Mutations There are two basic operations in GraphQL schemas:  Queries: Requesting data from a data model. An example Query would be: checking availability of hotels for a particular date and location  Mutations: Making changes and carrying out transactions on data in the data model. An example Mutation would be: making a booking to reserve a hotel room on a particular date.\nQueries Queries ask the system to provide some data, based on specfic parameters. This operation reads values from the server using a GraphQL Object and returns JSON text as a response.\nQueries are interactive. You can use our API Playground to test your queries.\nOur HotelX Getting Started guide shows you how to make queries to search for available hotels and get quotes. Mutations Mutations are methods that change the data on the server. That is, mutations make a physical change to the data. This can include inserting a new object in a database, or deleting, or updating a data record.\nOur HotelX Getting Started guide shows you how to make mutations to book and cancel reservations. Join us on Slack to talk with us about how to use HotelX in your websites, apps, and products. You can also send us a Jira service desk request. If you would like any new features or more information in our documentation, send us an issues request. "
},
{
	"uri": "/hotelx/concepts/search-mode/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": "   Booking Flow Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n     Search Single Mode \u0026amp; Multi Mode Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n    "
},
{
	"uri": "/hotelx/checkconfig/",
	"title": "Check configuration",
	"tags": [],
	"description": "Learn how to get your configuration",
	"content": "This query allows you to retrieve relevant information like supplier access code, supplier name, supplier configuration, supplier context, type of connection: test or live; active or not. You can then use this information to perform other queries/mutations.\nTo run this query, you should send within the headers your Apikey\n{ admin{ accesses{ edges{ node{ accessData{ name isActive code supplier{ supplierData{ code name isActive provider{ code name isActive isPublic } context } } isTest user password parameters{ key value } } } } } } }  "
},
{
	"uri": "/hotelx/plugins/net-price/",
	"title": "Commission",
	"tags": [],
	"description": "Convert Gross Prices into Net Prices.",
	"content": " CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration.\n CommissionX (NetpriceX Extended funcionality)  CommissionX Goals CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration. These commissions are defined through the plugin so as not to lose the options in which we do not know the type of price sent, since this information is established at contract level between client-supplier. Different commissions can be applied according to the different rules depending on the format that we will described next. The commission that is loaded in the FTP is interpreted like a Gross commission, that is, the commission or profit is included in the price.\nFiles needed to use this plugin  Sequential Commission file format (Mandatory). If the columns chainCodes,destinationCodes are informed then it is mandatory to upload group file.\n Group file format (Optional)\n This file will be necessary in case you want to apply rules depending on a grouping of codes that depend on a context. For this case, it is necessary that you pass with the entity.   Observation\nAlthough the group file is optional if this file is informed before the commission file the values will be used from the group file.\nHow we make it We read sequentially the commission file if the columns chainCodes,destinationCodes are informed then it is mandatory to upload group file to be able to read these values from the group file.\nPossible values entity filename    Entity chainCodes destinationCodes hotelCodes     hotel Yes Yes No   destination Yes No Yes    Execution example It is not necessary to specify it in Query (Settings-\u0026gt;Plugins)\n"
},
{
	"uri": "/hotelx/plugins/format-files/commission_supplier/",
	"title": "Commission supplier",
	"tags": [],
	"description": "Format commission supplier file.",
	"content": " The commission supplier file should be in the below format:\nCommission supplier File Format The file should be in the below format:\n Encoding: UTF-8  File Name: commission_supplier.csv  supplier commission  Extension file: csv Headers:  supplier → supplier code commission → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.csv\nData:\nSupplier,Commission AXI,0 AXI2,0  "
},
{
	"uri": "/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Basic concepts for all of the TravelgateX platform",
	"content": " The TravelgateX platform and APIs all use a consistent set of basic concepts so that whatever API you use on our platform, you can be confident that it will work with the same definitions as all of the others you are familiar with.\nHere is an overview of the key concepts of our platform.\nAccess An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier. To gain access, a Buyer needs to confirm with TravelgateX that they have an agreement in place with each Supplier with whom they want to integrate.\nAPI Gateway Our API gateway is stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. We provide realtime details of our uptime and status on our Status page and work at maintaining a minimum 99.99% service performance level.\nOur API gateway provides a single GraphQL endpoint which can be used to make queries against all of our APIs and travel services. This makes it easier for your clients (websites, applications and any other interface) to only call for the exact data that is needed, without parsing a heap of extra information in each API call. (Check out our GraphQL resources to learn more!)\nProfile An Organization uses profiles to determine what type of interaction is required on TravelgateX. At present, profiles are either a Buyer or a Seller.\nBuyer A Buyer Profile uses the TravelgateX platform to book travel services such as hotels for their customers. Buyers include online travel agents, tour operators, niche travel service providers, and travel and pricing apps.\nSeller A Seller Profile uses the TravelgateX platform to sell travel services such as hotels for their customers. Sellers include tour operators, niche travel service providers..\nOrganization An Organization is made up of Partners, Resources, Settings, Permissions and other Metadata.\nPartner A Partner interacts with the TravelgateX API platform. A partners can be a User (that is, a person) or a Service Account (that is, an application). A partner is a member of an Organization, and can be a member of mutiple organizations.\nSupplier A Supplier uses the TravelgateX platfrom to make travel services available to buyers. Suppliers can be suppliers with realtime databases of hotel room vacancies, tours, car rental providers, adventure and activity service suppliers, travel insurance providers or other travel industry service suppliers.\nContext A Context refers to the Supplier codes the request is using. It\u0026rsquo;s a way of specifiying which Supplier codes are being used so they can be transformed and standardized.\nCommon Resources Common resources define common objects that are consistent across all of our API products.\nHUB HUB is the command center of the TravelgateX platform. All connections pass through the HUB.\nProduct A Product is a TravelgateX platform API which is available for the consumption of Resources. We organize our APIs by similarity and common features. Our HotelX API is our first product now available for use in production environments.\nJoin us on Slack to talk with us about how to use TravelgateX APIs in your websites, apps, and products. You can also send us a Jira service desk request. If you would like any new features or more information in our documentation, send us an issues request.\n "
},
{
	"uri": "/hotelx/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "   Error and Warning List of errors and warnings in HotelX\n     Settings Learn about settings in HotelX\n     Access, Supplier and Context Learn about entities used in HotelX\n     Booking Flow Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n     Quotas \u0026amp; Limits      Search Single Mode \u0026amp; Multi Mode Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n     Management Flow Learn about Management Flow. Cancellations and Booking List\n     Content Learn about how to manage content data in your site: Hotels, Boards, Categories...\n     Ranking Learn about how to rank hotels\n    "
},
{
	"uri": "/hotelx/release-notes/graphql-schema-changes/",
	"title": "GraphQL Schema Changes",
	"tags": ["graphql-changelog"],
	"description": "It includes backwards-compatible changes, schema previews, and upcoming breaking changes.",
	"content": "The GraphQL HotelX schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\nCheck out this list of new releases and changes applied on the HotelX GraphQL API.\nUnder construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/travelgatex/release-notes/graphql-schema-changes/",
	"title": "GraphQL Schema Changes",
	"tags": ["graphql-changelog"],
	"description": "It includes backwards-compatible changes, schema previews, and upcoming breaking changes.",
	"content": " The GraphQL schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\nCheck out this list of new releases and changes applied on the TravelgateX GraphQL API.\n2019-02-11 🛑 Type Search was removed\n🛑 Type Quote was removed\n🛑 Type Booking was removed\n2019-02-07 ✅ Deprecation reason on field HotelOptionSearch.token has changed from `todeprecated from 2019-02-05.`\n✅ Field giataData was added to object type HotelData\n✅ Type GiataData was added\n2019-01-30 🛑 Input field audit was removed from input object type HotelXCommonSettingsDataInput\n🛑 Input field clientName was removed from input object type HotelXDefaultSettingsDataInput\n🛑 Field audit was removed from object type HotelXCommonSettingsData\n🛑 Field clientName was removed from object type HotelXDefaultSettingsData\n🛑 Field error was removed from object type Product\n🛑 Field error was removed from object type Operation\n🛑 Field error was removed from object type API\n🛑 Field error was removed from object type Resource\n🛑 Field error was removed from object type Role\n🛑 Field error was removed from object type Member\n🛑 Field error was removed from object type Group\n🛑 Field error was removed from object type Organization\n🛑 Type HotelXAuditInput was removed\n🛑 Type HotelXAudit was removed\n⚠️ Enum value COMMISSION was added to enum PluginType\n✅ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n✅ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n✅ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n✅ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n✅ Description The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026quot;es\u0026quot;. on type Language has changed to The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes \u0026quot;en\u0026quot;.\n✅ Field impersonationJWT was added to object type MemberData\n✅ Field domains was added to object type OrganizationData\n✅ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n✅ Argument domains: [DomainName!] added to field AdminQuery.organizations\n✅ Type JWTImpersonation was added\n✅ Type DomainName was added\n✅ Type DomainData was added\n✅ Type Domain was added\n2018-11-20 ✅ Input field CreateOrganizationInput.organization changed type from ID! to ID\n✅ Field country was added to object type GeonameData\n2018-11-07 🛑 Field asserts was removed from object type StatsInfo\n🛑 Type StatsAssert was removed\n✅ Field assets was added to object type StatsInfo\n✅ Type StatsAsset was added\n2018-10-28 ⚠️ Enum value COUNTRY was added to enum DestinationType\n✅ Field geoNames was added to object type Location\n✅ Type GeonameData was added\n✅ Type Geoname was added\n2018-10-18 🛑 Input field type was added to input object type CreateProfileInput\n🛑 Field errors was removed from object type HotelXCommonSettings\n🛑 Field warnings was removed from object type HotelXCommonSettings\n🛑 Field warnings was removed from object type HotelXDefaultSettings\n🛑 Field errors was removed from object type HotelXDefaultSettings\n🛑 Field downloadHotels was removed from object type HotelXQuery\n🛑 Field downloadRooms was removed from object type HotelXQuery\n🛑 Field isActive was removed from object type Member\n✅ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n✅ Input field type was added to input object type UpdateProfileInput\n✅ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n✅ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n✅ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n✅ Field adviseMessage was added to object type HotelXCommonSettings\n✅ Field adviseMessage was added to object type HotelXDefaultSettings\n✅ Field type was added to object type ProfileData\n✅ Field isActive was added to object type MemberData\n✅ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n✅ Type ProfileType was added\n2018-09-26 🛑 Input field mode was added to input object type StatsFilterInput\n✅ Input field clients was added to input object type StatsFilterInput\n✅ Field count was added to object type HotelConnection\n✅ Type ModeType was added\n2018-09-20 ✅ Input field UpdateProfileInput.label changed type from String! to String\n✅ Input field isPublished was added to input object type UpdateProfileInput\n✅ Input field isActive was added to input object type UpdateProfileInput\n✅ Input field isPublished was added to input object type CreateProfileInput\n✅ Input field isActive was added to input object type CreateProfileInput\n✅ Field isPublished was added to object type ProfileData\n✅ Field isActive was added to object type ProfileData\n2018-09-10 ✅ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\non type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n✅ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n✅ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n✅ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n✅ Field runtimeConfiguration was added to object type HotelXQuery\n✅ Input field isActive was added to input object type EntityFilter\n✅ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n✅ Type MetadataType was added\n✅ Type TagRuntimeType was added\n✅ Type HotelRuntimeParameter was added\n✅ Type HotelRuntimeConfigurationData was added\n✅ Type HotelRuntimeConfiguration was added\n2018-08-27 ✅ Description Input delta price, indicates price variation permitted by the client. An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation).This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n✅ Argument filter: HotelXFilterInput added to field HotelXMutation.cancel\n✅ Argument filter: HotelXFilterInput added to field HotelXMutation.book\n✅ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n✅ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n✅ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n✅ Argument filter: HotelXFilterInput added to field HotelXQuery.booking\n✅ Argument filter: HotelXFilterInput added to field HotelXQuery.quote\n✅ Argument filterSearch: HotelXFilterSearchInput added to field HotelXQuery.search\n✅ Deprecation reason on field Product.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Product\n✅ Deprecation reason on field Operation.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Operation\n✅ Deprecation reason on field API.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type API\n✅ Deprecation reason on field Resource.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Resource\n✅ Deprecation reason on field Role.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Role\n✅ Deprecation reason on field Member.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field Member.error description changed from `toErrors that abort services`\n✅ Field adviseMessage was added to object type Member\n✅ Deprecation reason on field Organization.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Organization\n✅ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n2018-08-22 🛑 Text kind changed from INTERFACE to OBJECT\n🛑 AdviseMessage kind changed from INTERFACE to OBJECT\n✅ Input field owner was added to input object type UpdateProfileInput\n✅ Input field owner was added to input object type CreateProfileInput\n✅ Input field owner was added to input object type UpdateClientInput\n✅ Input field owner was added to input object type CreateClientInput\n✅ Input field owner was added to input object type AccessInput\n✅ Field parents was added to object type OrganizationData\n✅ Field descendents was added to object type OrganizationData\n✅ Input field owner was added to input object type EntityFilter\n✅ Input field owner was added to input object type ProfileFilter\n✅ Field owner was added to object type ProfileData\n✅ Input field owner was added to input object type PointOfSaleFilter\n✅ Field owner was added to object type PointOfSaleData\n✅ Input field owner was added to input object type ClientFilter\n✅ Input field owner was added to input object type SupplierFilter\n✅ Input field owner was added to input object type AccessFilter\n✅ Field owner was added to object type ClientData\n✅ Field GroupData.parents description changed from Recursive call with all ascendant parents tree to Response all parents groups nodes for this group (nom-hierarchically)\n✅ Field descendents was added to object type GroupData\n✅ Field owner was added to object type SupplierData\n✅ Field isShedulerActive was added to object type AccessData\n✅ Field owner was added to object type AccessData\n✅ Type HotelXFilterSearchInput was added\n✅ Type HotelXFilterPluginTypeInput was added\n✅ Type HotelXPluginFilterInput was added\n✅ Type HotelXFilterInput was added\n2018-08-14 🛑 Type for argument input on field PaymentXMutation.storeCard changed from PaymentXStoreCardInput! to PaymentXStoredCardInput!\n🛑 Field PaymentXMutation.storeCard changed type from StoredCard! to PaymentXStoredCard!\n🛑 Field deleteCard was removed from object type PaymentXMutation\n🛑 Field PaymentXQuery.vaultStatusService changed type from ServiceStatus! to AdviseMessage!\n🛑 Field cards was removed from object type PaymentXQuery\n🛑 Type PaymentXBookingInfoDeleteInput was removed\n🛑 Type PointOfSaleInput was removed\n🛑 Type PaymentXBookingInfoInput was removed\n🛑 Type PaymentXStoreCardInput was removed\n🛑 Type PaymentXBookingInfoCriteriaInput was removed\n🛑 Type PaymentXBookingInfoFilterInput was removed\n🛑 Type ExpireDate was removed\n🛑 Type PaymentCard was removed\n🛑 Type PaymentXBookingInfo was removed\n🛑 Type StoredCardData was removed\n🛑 Type StoredCard was removed\n🛑 Type StoredCardEdge was removed\n🛑 Type StoredCardConnection was removed\n✅ Field deleteStoredCard was added to object type PaymentXMutation\n✅ Field PaymentXQuery.vaultStatusService description changed from Returns status of the search service. to Returns status of the vault service.\n✅ Field storedCard was added to object type PaymentXQuery\n✅ Field allStoredCards was added to object type PaymentXQuery\n✅ Input field countries was added to input object type HotelXHotelListInput\n✅ Type PaymentXStoredCardInput was added\n✅ Type PaymentXStoredCardIDInput was added\n✅ Type PaymentXStoredCardFilterInput was added\n✅ Type PaymentXExpireDate was added\n✅ Type PaymentXStoredCardData was added\n✅ Type PaymentXStoredCard was added\n✅ Type PaymentXStoredCardEdge was added\n✅ Type PaymentXStoredCardConnection was added\n2018-08-13 🛑 Field ProfileData.group changed type from Group! to Group\n🛑 Field ClientData.group changed type from Group! to Group\n🛑 Argument type: GroupType was removed from field GroupData.managedGroups\n🛑 Field GroupData.managedGroups changed type from GroupConnection to ManagedGroupConnection\n🛑 Field SupplierData.groups changed type from GroupConnection! to GroupConnection\n🛑 Field AccessData.groups changed type from GroupConnection! to GroupConnection\n✅ Argument role: [ID!] added to field GroupData.managedGroups\n✅ Argument resource: [ID!] added to field GroupData.managedGroups\n✅ Argument api: [ID!] added to field GroupData.managedGroups\n✅ Argument group: [ID!] added to field GroupData.managedGroups\n✅ Field GroupData.managedGroups description changed from Responses all groups in its group's childrens (hierarchically), to Responses all managed groups by this group.\n✅ Type ManagedGroupData was added\n✅ Type ManagedGroup was added\n✅ Type ManagedGroupEdge was added\n✅ Type ManagedGroupConnection was added\n2018-08-08 ✅ Input field currency was added to input object type SettingsBaseInput\n✅ Field parents was added to object type GroupData\n✅ Deprecation reason on field Group.error has changed from `todeprecated from 2018-08-01. Sustituted by adviseMessage`\n✅ Field adviseMessage was added to object type Group\n✅ Field group was added to object type ProfileData\n✅ Field group was added to object type ClientData\n✅ Field groups was added to object type SupplierData\n✅ Field groups was added to object type AccessData\n2018-07-31 ✅ Field StoredCard.adviseMessage description changed from List of advise messages. to List of messages\n✅ Deprecation reason on field AddOns.distribute has changed from You can find it in distribution AddOn to deprecated from 2018-05-21. You can find it in distribution AddOn\n✅ Field PointOfSale.adviseMessage description changed from List of messages to List of advise messages.\n✅ Field entities was added to object type AdminQuery\n✅ Type EntityFilter was added\n2018-07-26 ⚠️ Enum value ORG was added to enum GroupTypeInput\n⚠️ Enum value ROOT was added to enum GroupTypeInput\n⚠️ Enum value ROOT was added to enum `GroupType\n2018-07-25 🛑 Input field HotelSettingsInput.group changed type from String to ID\n🛑 Input field HotelSettingsInput.client changed type from String to ID\n✅ Input field HotelSettingsInput.client description changed from This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. to Client name, this field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n✅ Input field clientTokens was added to input object type HotelSettingsInput\n2018-07-16 🛑 Input field organizations was removed from input object type StatsFilterInput\n🛑 Field error was removed from object type Stats\n✅ Input field groups was added to input object type StatsFilterInput\n✅ Field adviseMessage was added to object type Stats\n✅ Field StoredCard.adviseMessage description changed from List of messages to List of advise messages.\n✅ Description `on typeAdviseMessagehas changed toList of advise messages.`\n2018-07-10 🛑 Field deleteDefaultSettings was removed from object type Mutation\n🛑 Field updateDefaultSettings was removed from object type Mutation\n🛑 Field createDefaultSettings was removed from object type Mutation\n🛑 Field loadFile was removed from object type Mutation\n🛑 Field hotelCancel was removed from object type Mutation\n🛑 Field hotelBook was removed from object type Mutation\n🛑 Field Destination.error changed type from [Error!] to [AdviseMessage!]\n🛑 Field Hotel.error changed type from [Error!] to [AdviseMessage!]\n🛑 Field mapping was removed from object type Query\n🛑 Field defaultSettings was removed from object type Query\n🛑 Field booking was removed from object type Query\n🛑 Field quote was removed from object type Query\n🛑 Field search was removed from object type Query\n✅ Input field AccessInput.name changed type from String! to String\n✅ Field removeEntitiesFromProfile was added to object type AdminMutation\n✅ Field addEntitiesToProfile was added to object type AdminMutation\n✅ Field updateProfile was added to object type AdminMutation\n✅ Field createProfile was added to object type AdminMutation\n✅ Input field PaymentXBookingInfoFilterInput.bookingReference changed type from String! to String\n✅ Input field PaymentXBookingInfoFilterInput.bookingReference description changed from Indicates the referece of the booking to Indicates the referece of the booking. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n✅ Input field PaymentXBookingInfoFilterInput.pointOfSaleCode changed type from ID! to ID\n✅ Input field PaymentXBookingInfoFilterInput.pointOfSaleCode description changed from Indicates the code of the booked property to Indicates the code of the booked property. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n✅ Input field PaymentXBookingInfoFilterInput.organization changed type from String! to String\n✅ Input field PaymentXBookingInfoFilterInput.organization description changed from Responsible organization of the booked property. to Responsible organization of the booked property. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n✅ Input field checkOut_gte was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkOut_gt was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkOut_lte was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkOut_lt was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkOut_not_in was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkOut_in was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_gte was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_gt was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_lte was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_lt was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_not_in was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field checkIn_in was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field OR was added to input object type PaymentXBookingInfoFilterInput\n✅ Input field AND was added to input object type PaymentXBookingInfoFilterInput\n✅ Argument bookingInfoCriteria: PaymentXBookingInfoCriteriaInput added to field PaymentXQuery.cards\n✅ Input field HotelXHotelListInput.access changed type from ID! to ID\n✅ Input field group was added to input object type HotelXHotelListInput\n✅ Field airports was added to object type Location\n✅ Input field maxSize was added to input object type HotelXRoomQueryInput\n✅ Field token was added to object type RoomConnection\n✅ Field HotelXQuery.destinationSearcher description changed from Returns hotels and destinations that contains the indicated text. to Returns hotels and destinations that contains the indicated text.\n✅ Argument filter: HotelXHotelFilterInput added to field HotelXQuery.hotels\n✅ Argument token: String added to field HotelXQuery.rooms\n✅ Field AdminQuery.products description changed from Members list; specify member codes to filter members to Product catalog; specify products codes to filter\n✅ Field jwt was added to object type AdminQuery\n✅ Type UpdateEntitiesInput was added\n✅ Type UpdateProfileInput was added\n✅ Type EntitiesInput was added\n✅ Type CreateProfileInput was added\n✅ Type PaymentXBookingInfoCriteriaInput was added\n✅ Type HotelXHotelFilterInput was added\n✅ Type AirportData was added\n✅ Type Airport was added\n✅ Type JWT was added\n2018-06-21 🛑 Field group was removed from object type PointOfSaleData\n✅ Field Stats.statsData description changed from `GUID\nThe data returned by a `Stats` query.toGUID\nThe data returned by a Stats query.`\n✅ Argument codeStartsWith: String added to field OrganizationData.children\n✅ Argument type: GroupType added to field OrganizationData.children\n✅ Argument codeStartsWith: String added to field GroupData.children\n✅ Field profiles was added to object type AdminQuery\n✅ Type ProfileFilter was added\n✅ Type EntityData was added\n✅ Type Entity was added\n✅ Type EntityEdge was added\n✅ Type EntityConnection was added\n✅ Type ProfileData was added\n✅ Type Profile was added\n✅ Type ProfileEdge was added\n✅ Type ProfileConnection was added\n2018-06-12 🛑 Input field group was added to input object type DeleteGroupInput\n🛑 Input field code was removed from input object type DeleteGroupInput\n🛑 Type LegacyData was removed\n✅ Description Input delta price, indicates price variation permitted by the client on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it’s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n✅ Input field DeltaPriceInput.applyBoth description changed from Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client. to Depending on the value of applyBoth: applyBoth = false: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth = true: Indicates that the new price cannot exceed the amount or percentage indicated by the client.\n✅ Deprecation reason on field HotelXMutation.loadFile has changed from `todeprecated from 2018-06-06`\n✅ Description `on typeAdminMutationhas changed toThe admin query root of TravelgateX\u0026rsquo;s for implementing GraphQL mutations.`\n✅ Description Mutations are operations that change or update data on the server on type Mutation has changed to The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server\n✅ Field paymentX was added to object type Mutation\n✅ Description LList of business rules for filtering options based on your interests. on type BusinessRules has changed to List of business rules for filtering options based on your interests.\n✅ Description for enum value ServiceApiType.PACKAGE changed from `toWhen the request has been done against the Package API`\n✅ Description for enum value ServiceApiType.PAYMENT changed from `toWhen the request has been done against the Payment API`\n✅ Description for enum value ServiceApiType.VIRTUALACCOUNT changed from `toWhen the request has been done against the Virtual Account API`\n✅ Description for enum value ServiceApiType.ACTIVITIES changed from `toWhen the request has been done against the Activities API`\n✅ Description for enum value ServiceApiType.TRANSFERS changed from `toWhen the request has been done against the Transfers API`\n✅ Description for enum value ServiceApiType.CAR changed from `toWhen the request has been done against the Car API`\n✅ Description for enum value ServiceApiType.TRANSPORTATION changed from `toWhen the request has been done against the Transportation API`\n✅ Description for enum value ServiceApiType.HOTEL changed from `toWhen the request has been done against the Hotel API`\n✅ Description for enum value ServiceOperationType.OTHER changed from `toWhen the type of the request is Other`\n✅ Description for enum value ServiceOperationType.BOOKING changed from `toWhen the type of the request is Booking`\n✅ Description for enum value ServiceOperationType.QUOTE changed from `toWhen the type of the request is Quote`\n✅ Description for enum value ServiceOperationType.SEARCH changed from `toWhen the type of the request is Search`\n✅ Field StatsAssert.url description changed from `toEndpoint to download the full XML of the request with its response`\n✅ Field StatsAssert.execTime description changed from `toExecution time of the request`\n✅ Field StatsAssert.startTime description changed from `toStart time of the request`\n✅ Description for enum value StatsInfoTypes.OTHER changed from `toStats in NOK state caused by other causes`\n✅ Description for enum value StatsInfoTypes.HUB changed from `toStats in NOK state caused by HUB issues`\n✅ Description for enum value StatsInfoTypes.COMMUNICATION changed from `toStats in NOK state caused by Timeout`\n✅ Description for enum value StatsInfoTypes.PROVIDER changed from `toStats in NOK state caused by supplier issues`\n✅ Description for enum value StatsInfoTypes.INTEGRATION changed from `toStats in NOK state caused by integration issues`\n✅ Description for enum value StatsInfoTypes.OK changed from `toStats in OK state`\n✅ Field StatsInfo.asserts description changed from `toDetails about errors.`\n✅ Field StatsInfo.time description changed from Total time (ms) to Average time (ms)\n✅ Field StatsInfo.hits description changed from Total hits. to Total hits\n✅ Field StatsInfo.type description changed from `toStats type`\n✅ Description `on typeOperationDetailedhas changed toStats information per operation`\n✅ Field OperationDetailed.cache description changed from `toResponsible for the execution of the this stats. If TRUE then cache, else client`\n✅ Field OperationDetailed.detailedHits description changed from Total time time: Time! to Hits grouped depending on their status\n✅ Field OperationDetailed.totalHits description changed from operation: String! operationType: ServiceOperationType! List of service apis. serviceApis: ServiceApiConnection! Total hits. to Total hits.\n✅ Field OperationDetailed.operation changed type from Operation to Operation!\n✅ Field OperationDetailed.operation description changed from `toOperation information`\n✅ Description Details of look to quote and look to book. on type Ratios has changed to Ratios details\n✅ Field Ratios.quoteToBook description changed from `toQuotes needed to do a booking`\n✅ Field Ratios.lookToBook description changed from `toSearches needed to do a booking`\n✅ Field Ratios.lookToQuote description changed from `toSearches needed to do a quote`\n✅ Field StatsData.operations description changed from `toStats information per operation`\n✅ Field StatsData.ratios description changed from Details of look to quote and look to book. to Ratios details\n✅ Field StatsData.client description changed from `toOwner client`\n✅ Field StatsData.access description changed from `toOwner access`\n✅ Field Stats.updatedAt description changed from Date updated to Update date\n✅ Field Stats.createdAt description changed from Date created to Create date\n✅ Field Stats.error description changed from Errors that abort services to Errors that will lead the service to abort\n✅ Field Stats.statsData description changed from `toGUID The data returned by a `Stats` query.`\n✅ Description Plugin Type on type PluginType has changed to Plugin Type. /hotelx/plugins/overview/\n✅ Description Plugin Step Type on type PluginStepType has changed to Plugin Step Type. /hotelx/plugins/overview/\n✅ Input field PluginStepInput.pluginsType description changed from `toIndicates the plugin that will be executed.`\n✅ Input field HotelSettingsInput.testMode description changed from Use test access to This flag allows only the accesses checked as test. By default is production.\n✅ Description `on typeMarkupRuleTypehas changed toIndicates what type of value is the markup, by percentage or is an import.`\n✅ Description Options status on type StatusType has changed to Indicartes options status\n✅ Field Response.stats description changed from Application stats in string format to Application stats\n✅ Field DestinationConnection.pageInfo description changed from `toIndicates info about page`\n✅ Field HotelConnection.pageInfo description changed from `toIndicates info about page`\n✅ Input field HotelXRoomQueryInput.access description changed from `toIndicates the access that you want use.`\n✅ Input field HotelXRoomQueryInput.roomCodes description changed from `toIndicates the room codes that you want filter.`\n✅ Field RoomConnection.pageInfo description changed from `toIndicates info about page`\n✅ Input field HotelXCategoryQueryInput.access description changed from `toIndicates the access that you want use.`\n✅ Input field HotelXCategoryQueryInput.categoryCodes description changed from `toIndicates the category codes that you want filter.`\n✅ Field CategoryConnection.pageInfo description changed from `toIndicates info about page`\n✅ Input field HotelXBoardQueryInput.access description changed from `toIndicates the access that you want use.`\n✅ Input field HotelXBoardQueryInput.boardCodes description changed from `toIndicates the board codes that you want filter.`\n✅ Field BoardConnection.pageInfo description changed from `toIndicates info about page`\n✅ Field HotelXQuery.mapping description changed from `toReturns map codes of a group. You can get hotel map, room map, and board map.`\n✅ Field HotelXQuery.bookingStatusService description changed from TODO: me no understand... Returns status of the booking service. to Returns status of the booking service.\n✅ Field ProductData.apis description changed from `toA Product has many APIs`\n✅ Description `on typeProducthas changed toAn APIs collection.`\n✅ Field Product.updatedAt description changed from `toDate updated`\n✅ Field Product.createdAt description changed from `toDate created`\n✅ Field Product.error description changed from `toErrors that abort services`\n✅ Field Operation.updatedAt description changed from `toDate updated`\n✅ Field Operation.createdAt description changed from `toDate created`\n✅ Field Operation.error description changed from `toErrors that abort services`\n✅ Description on type `APIData` has changed to\n✅ Field APIData.operations description changed from `towhich operations are asigned this API?`\n✅ Field APIData.resources description changed from `towhich resources are asigned this API?`\n✅ Field APIData.groups description changed from `towhich groups are asigned this API?`\n✅ Field APIData.label description changed from `toAPI label`\n✅ Field APIData.isEditable description changed from `toIs API Editable or not.`\n✅ Field APIData.code description changed from `toAPI Code`\n✅ Field APIData.id description changed from `toAPI ID`\n✅ Field API.updatedAt description changed from `toDate updated`\n✅ Field API.createdAt description changed from `toDate created`\n✅ Field API.error description changed from `toErrors that abort services`\n✅ Field ResourceData.roles description changed from `towhich roles are asigned or are possibles in this resource?`\n✅ Field ResourceData.apis description changed from `towhich API have asigned this resource?`\n✅ Description `on typeResourcehas changed toResources are those used in APIs and Products.`\n✅ Field Resource.updatedAt description changed from `toDate updated`\n✅ Field Resource.createdAt description changed from `toDate created`\n✅ Field Resource.error description changed from `toErrors that abort services`\n✅ Description for enum value RoleType.SPECIFIC changed from `toAllows a User to make othen kind of operation with the resource. Defined by API.`\n✅ Description for enum value RoleType.EXECUTOR changed from `toAllows a User to make use of reources only for extecutations queries.`\n✅ Description for enum value RoleType.ADMIN changed from `toAllows a User to make All (changes) to the resource`\n✅ Description for enum value RoleType.EDITOR changed from `toAllows a User to make Mutations (changes) to the resource data`\n✅ Description for enum value RoleType.VIEWER changed from `toAllows a User to make Queries of resources, but not change any resource data`\n✅ Field RoleData.resources description changed from `toResources used`\n✅ Field RoleData.special description changed from `toSpecial permission`\n✅ Field RoleData.isSpecial description changed from `toHas any other non-basic permission/s?`\n✅ Field RoleData.isExecutable description changed from `toHas resource Executable permission?`\n✅ Field RoleData.isEnable description changed from `toIs role enabled or not?`\n✅ Field RoleData.isDelete description changed from `toHas resource Delete permission?`\n✅ Field RoleData.isUpdate description changed from `toHas resource Update permission?`\n✅ Field RoleData.isRead description changed from `toHas resource Create permission?`\n✅ Field RoleData.isCreate description changed from `toHas resource Create permission?`\n✅ Description `on typeRolehas changed toPermissions determine what operations are allowed on a resource`\n✅ Field Role.updatedAt description changed from `toDate updated`\n✅ Field Role.createdAt description changed from `toDate created`\n✅ Field Role.error description changed from `toErrors that abort services`\n✅ Field MemberData.roles description changed from `towhich roles the member has in?`\n✅ Field MemberData.groups description changed from `towhich groups the member is in?`\n✅ Field MemberData.type description changed from `toMember Type`\n✅ Description `on typeMemberhas changed toYou grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.`\n✅ Field Member.updatedAt description changed from `toDate updated`\n✅ Field Member.createdAt description changed from `toDate created`\n✅ Field Member.isActive description changed from `toErrors that abort services`\n✅ Field GroupData.roles description changed from `toYou can grant roles to members, which define the roles catalog for a group.`\n✅ Field GroupData.clients description changed from `toClients resources in a group`\n✅ Field GroupData.suppliers description changed from `toSupplier resources in a group`\n✅ Field GroupData.accesses description changed from `toAccess resources in a group`\n✅ Field GroupData.allMembers description changed from `toResponse all members in this group\u0026rsquo;s childrens (hierarchically),`\n✅ Field GroupData.managedGroups description changed from `toResponses all groups in its group\u0026rsquo;s childrens (hierarchically),`\n✅ Field GroupData.apis description changed from `toAPIs assigned to this group. Products have APIs.`\n✅ Field GroupData.members description changed from `toOnly responses members in this group`\n✅ Field GroupData.children description changed from `toOnly responses children.(non-hierarchically)`\n✅ Description `on typeGrouphas changed toGroups are organized hierarchically.`\n✅ Field Group.updatedAt description changed from `toDate updated`\n✅ Field Group.createdAt description changed from `toDate created`\n✅ Field Group.error description changed from `toErrors that abort services`\n✅ Field OrganizationData.clients description changed from `toClients resources in a organization`\n✅ Field OrganizationData.suppliers description changed from `toSupplier resources in a organization`\n✅ Field OrganizationData.accesses description changed from `toAccess resources in a organization`\n✅ Field OrganizationData.allMembers description changed from `toResponse all members in this group\u0026rsquo;s childrens (hierarchically)`\n✅ Field OrganizationData.products description changed from `toProducts asign to a organization`\n✅ Field OrganizationData.apis description changed from `toAPIs assigned to this group. Products have APIs.`\n✅ Field OrganizationData.children description changed from `toOnly responses folders.(non-hierarchically)`\n✅ Description `on typeOrganizationhas changed toOrganization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.`\n✅ Field Organization.updatedAt description changed from `toDate updated`\n✅ Field Organization.createdAt description changed from `toDate created`\n✅ Field Organization.error description changed from `toErrors that abort services`\n✅ Description `on typeClienthas changed toClient identifies who is making the request and holds the configuration assigned to it.`\n✅ Description `on typeSupplierhas changed toA Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers`\n✅ Description `on typeAccesshas changed toAn Access is a set of credentials and configuration in order to access the system of a Supplier.`\n✅ Description `on typeAdminQueryhas changed toThe admin query root of TravelgateX\u0026rsquo;s GraphQL interface.`\n✅ Field pointsOfSale was added to object type AdminQuery\n✅ Description `on typeQueryhas changed toThe query root of TravelgateX\u0026rsquo;s GraphQL interface.`\n✅ Field Query.mappea description changed from `toThe Mappea product query root for implementing GraphQL query.`\n✅ Field Query.stats description changed from `toThe Stats product query root for implementing GraphQL query.`\n✅ Field Query.hotelX description changed from `toThe hotelX product query root for implementing GraphQL query.`\n✅ Field Query.admin description changed from `toThe admin query root of TravelgateX\u0026rsquo;s for implementing GraphQL query.`\n✅ Field paymentX was added to object type Query\n✅ Type PaymentXBookingInfoDeleteInput was added\n✅ Type PointOfSaleInput was added\n✅ Type PaymentXBookingInfoInput was added\n✅ Type PaymentXStoreCardInput was added\n✅ Type PaymentXMutation was added\n✅ Type PaymentXBookingInfoFilterInput was added\n✅ Type ExpireDate was added\n✅ Type CVC was added\n✅ Type CardNumber was added\n✅ Type PaymentCard was added\n✅ Type PaymentXBookingInfo was added\n✅ Type StoredCardData was added\n✅ Type StoredCard was added\n✅ Type StoredCardEdge was added\n✅ Type StoredCardConnection was added\n✅ Type PaymentXQuery was added\n✅ Type PointOfSaleFilter was added\n✅ Type PointOfSaleData was added\n✅ Type PointOfSale was added\n✅ Type PointOfSaleEdge was added\n✅ Type PointOfSaleConnection was added\n2018-06-01 🛑 Input field member was added to input object type DeleteMemberInput\n🛑 Input field code was removed from input object type DeleteMemberInput\n🛑 Input field UpdateGroupInput.api changed type from String! to ID!\n🛑 Input field group was added to input object type UpdateGroupInput\n🛑 Input field method was removed from input object type UpdateGroupInput\n🛑 Input field code was removed from input object type UpdateGroupInput\n🛑 Input field UpdateMemberInput.group changed type from String! to ID!\n🛑 Input field resources was added to input object type UpdateMemberInput\n🛑 Input field role was added to input object type UpdateMemberInput\n🛑 Input field member was added to input object type UpdateMemberInput\n🛑 Input field resource was removed from input object type UpdateMemberInput\n🛑 Input field roles was removed from input object type UpdateMemberInput\n🛑 Input field code was removed from input object type UpdateMemberInput\n🛑 Input field CreateGroupInput.type changed type from GroupType! to GroupTypeInput!\n🛑 Input field group was added to input object type CreateGroupInput\n🛑 Input field code was removed from input object type CreateGroupInput\n🛑 Input field CreateMemberInput.group changed type from String! to ID!\n🛑 Input field resources was added to input object type CreateMemberInput\n🛑 Input field role was added to input object type CreateMemberInput\n🛑 Input field resource was removed from input object type CreateMemberInput\n🛑 Input field roles was removed from input object type CreateMemberInput\n🛑 Input field code was removed from input object type CreateMemberInput\n🛑 Input field CreateOrganizationInput.user changed type from String! to ID!\n🛑 Input field organization was added to input object type CreateOrganizationInput\n🛑 Input field code was removed from input object type CreateOrganizationInput\n🛑 Argument method: Method! added to field AdminMutation.updateGroup\n🛑 Warning object type no longer implements AdviseMessage interface\n🛑 Field AdviseMessage.code changed type from String! to ID!\n🛑 Error object type no longer implements AdviseMessage interface\n🛑 Field error was removed from object type Node\n✅ Input field member was added to input object type CreateMemberInput\n✅ Input field testMode was added to input object type HotelSettingsInput\n✅ Input field HotelCriteriaSearchInput.hotels changed type from [String!]! to [String!]\n✅ Input field HotelCriteriaSearchInput.hotels description changed from Contains the list of hotels's ID to Hotel Codes.\n✅ Input field destinations was added to input object type HotelCriteriaSearchInput\n✅ Field isEditable was added to object type APIData\n✅ Argument type: RoleType added to field ResourceData.roles\n✅ Field isEditable was added to object type ResourceData\n✅ Field isEditable was added to object type RoleData\n✅ Field type was added to object type RoleData\n✅ Argument type: RoleType added to field MemberData.roles\n✅ Argument type: GroupType added to field GroupData.children\n✅ Field roles was added to object type GroupData\n✅ Field managedGroups was added to object type GroupData\n✅ Deprecation reason on field AdviseMessage.type has changed from `todeprecated from 2018-06-01.`\n✅ Field AdviseMessage.type description changed from `TODO:\nError type: The following types are valid:\nXXX: asd asdñoajskd lña ldtoError type: The following types are valid:`\n✅ Field AdviseMessage.code description changed from `TODO:\nError code: The following codes can be returned:\nXXX: XXXXXXXXX XXXXXXtoAM code: The following codes can be returned:`\n✅ Field correlationID was added to object type AdviseMessage\n✅ Field external was added to object type AdviseMessage\n✅ Field level was added to object type AdviseMessage\n✅ Argument type: RoleType added to field AdminQuery.roles\n✅ Deprecation reason on field Query.mapping has changed from deprecated from 2017-11-21. You can find it in query at Admin to deprecated from 2017-11-21. You can find it in query at HotelX\n✅ Deprecation reason on field Query.defaultSettings has changed from deprecated from 2017-11-21. You can find it in query at Admin to deprecated from 2017-11-21. You can find it in query at HotelX\n✅ Type ExternalMessage was added\n✅ Type AdviseMessageLevel was added\n✅ Type GroupTypeInput was added\n✅ Type RoleType was added\n2018-05-21 🛑 Input field AccessInput.name changed type from String to String!\n✅ Input field IdAccessConfigurationInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n✅ Input field ConnectUserGroupInput.isActive description changed from Indicates if the connect user is active for its connect user to Indicates if the connect user is active for its connected user\n✅ Input field ConnectUserGroupInput.groupCode description changed from group code of the group related to this connect user to Group code of the group related to this connected user\n✅ Input field AccessConfigurationInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n✅ Description Pair of groups and accesses. All accesses returned will belong to all the groups in groupCodes on type GroupAccess has changed to Pairs of Groups and Accesses. All Accesses returned will belong to all the Groups in groupCodes.\n✅ Field GroupAccess.groupCodes description changed from group identifiers to Group identifiers\n✅ Field ConnectUserGroup.isActive description changed from Indicates if the connect user is active for its connect user to Indicates if the connect user is active for its connected user\n✅ Field ConnectUserGroup.groupCode description changed from group code of the group related to this connect user to Group code of the group related to this connected user\n✅ Description data related to a connect user and its groups on type ConnectUser has changed to Data related to a connected user and its groups\n✅ Field ConnectUser.connectUserGroups description changed from connect user's related data of its groups to Connected user's related data based on its groups\n✅ Field ConnectUser.isActive description changed from indicates whether a connect user is active to Indicates whether a connected user is active\n✅ Field ConnectUser.code description changed from unique connect user of a supplier to Unique connected user of a supplier\n✅ Description Context type, for now only Code is necessary on type Context has changed to Context type. Currently, only Code is necessary.\n✅ Field Context.updatedAt description changed from Update date to Date updated\n✅ Field Context.createdAt description changed from Create date to Date created\n✅ Field Context.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Input field DefaultSettingsBusinessRulesInput.businessRulesType description changed from Different business rules to filter the options that you are interested. to Different business rules for filtering options that you are interested in\n✅ Input field DefaultSettingsBusinessRulesInput.optionsQuota description changed from Options quota per avail. Numbers of options wanted by avail. to Options quota per availability; numbers of options based on availability\n✅ Input field DefaultSettingsInput.businessRules description changed from Business rules. to Business rules\n✅ Input field DefaultSettingsInput.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n✅ Input field DefaultSettingsInput.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n✅ Input field DefaultSettingsInput.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n✅ Input field DefaultSettingsInput.language description changed from Language to be used in request. to Language to be used in request\n✅ Input field DefaultSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that\nhas been set by default in the preload.`\n✅ Field HotelCancelPayload.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n✅ Field HotelCancelPayload.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field HotelCancelPayload.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n✅ Description Holder object that contains the pax name and surname. on type HolderInput has changed to Holder object that contains the occupant's (pax's) name and surname.\n✅ Input field HotelBookInput.language description changed from Language to be used in request. to Language to be used in request\n✅ Field HotelBookPayload.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n✅ Field HotelBookPayload.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field HotelBookPayload.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n✅ Input field UpdateClientInput.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n✅ Input field CreateClientInput.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n✅ Input field AccessInput.shared description changed from Parent access if Shared access. to Parent Access if Shared Access.\n✅ Input field AccessInput.rateRules description changed from Business rules types for the access. to Business rule types for the Access\n✅ Input field AccessInput.markets description changed from Markets allowed for the access. to Markets allowed for the Access\n✅ Input field AccessInput.parameters description changed from List of parameters for additional information. to List of parameters for additional information\n✅ Input field AccessInput.urls description changed from Specific Urls to Specific URLs\n✅ Input field AccessInput.password description changed from Password for the connection. to Password for the connection\n✅ Input field AccessInput.user description changed from User code to connect to supplier. to User code to connect to supplier\n✅ Input field AccessInput.isTest description changed from Indicates if this access can be used for testing or not to Indicates if Access can be used for testing or not\n✅ Input field AccessInput.supplier description changed from supplier for this access. to Supplier for this Access\n✅ Input field AccessInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n✅ Input field AccessInput.name description changed from Access descriptive name to Access descriptive unique name\n✅ Field AdminMutation.deleteGroup description changed from Delete group and members from this group. to Delete group and members from this group\n✅ Field AdminMutation.deleteMember description changed from Delete member from specific group. to Delete a member from specific group\n✅ Field AdminMutation.updateGroup description changed from Update group adding or removing apis. to Update group additions or remove APIs\n✅ Field AdminMutation.updateMember description changed from Update member adding or removing roles. to Update member additions or remove roles\n✅ Field AdminMutation.createGroup description changed from Create group. Group \u0026quot;owner\u0026quot; is optional. to Create group; group \u0026quot;owner\u0026quot; is optional\n✅ Field AdminMutation.createMember description changed from Create member. Requires specific group and role. to Create member; requires specific group and role\n✅ Field AdminMutation.deleteSupplierFromGroup description changed from Removes Supplier visibility to groups. to Removes Supplier visibility to groups\n✅ Field AdminMutation.grantSupplierToGroup description changed from Grants Supplier visibility to a group. to Grants Supplier visibility to a group\n✅ Field AdminMutation.deleteAccessFromGroup description changed from Removes Access visibility to groups. to Removes Access visibility to groups\n✅ Field AdminMutation.grantAccessToGroup description changed from Grants Access visibility to a group. to Grants Access visibility to a group\n✅ Field AdminMutation.updateAccess description changed from Updates an Access. to Updates an Access\n✅ Field AdminMutation.createAccess description changed from Creates an Access. to Creates an Access\n✅ Field createOrganization was added to object type AdminMutation\n✅ Description Mutations are operations that change or update data in the server. on type Mutation has changed to Mutations are operations that change or update data on the server\n✅ Description List of business rules to filter the options that you are interested. on type BusinessRules has changed to LList of business rules for filtering options based on your interests.\n✅ Field BusinessRules.businessRulesType description changed from Different business rules to filter the options that you are interested. to Different business rules for filtering options that you are interested in\n✅ Field BusinessRules.optionsQuota description changed from Options quota per avail. Numbers of options wanted by avail. to Options quota per availability; numbers of options based on availability\n✅ Field DefaultSettings.businessRules description changed from Business rules. to Business rules\n✅ Field DefaultSettings.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n✅ Field DefaultSettings.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n✅ Field DefaultSettings.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n✅ Field DefaultSettings.language description changed from Language to be used in request. to Language to be used in request\n✅ Field DefaultSettings.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that\nhas been set by default in the preload.`\n✅ Input field organizations was added to input object type StatsFilterInput\n✅ Field Stats.updatedAt description changed from Update date to Date updated\n✅ Field Stats.createdAt description changed from Create date to Date created\n✅ Field Stats.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field Mapping.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Input field CriteriaBookingDatesInput.end description changed from `End date.\nFormat: yyyy-MM-dd.toEnd date.\nFormat: YYYY-MM-DD.`\n✅ Input field CriteriaBookingDatesInput.start description changed from `Start date.\nFormat: yyyy-MM-dd.toStart date.\nFormat: YYYY-MM-DD.`\n✅ Description for enum value BookStatusType.UNKNOWN changed from `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client’s responsibility to check if the booking is OKtoThe reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.ON_REQUEST changed from `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client’s responsibility to check if the booking is OKtoThe reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Field BookingRoom.description description changed from Description about the room. to Description about the room\n✅ Field BookingRoom.code description changed from Indicates the room code. to Indicates the room code\n✅ Field BookingRoom.occupancyRefId description changed from ID reference to the occupancy. to ID reference to the occupancy\n✅ Field BookingHotel.occupancies description changed from List of occupancies of the request. to List of occupancies for the request\n✅ Field BookingHotel.checkOut description changed from `Check-out date for the booking.\nFormat: yyyy-MM-ddtoCheck-out date for the booking.\nFormat: YYYY-MM-DD`\n✅ Field BookingHotel.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n✅ Field BookingHotel.creationDate description changed from `Creation date of the booking.\nFormat: yyyy-MM-ddtoCreation date of the booking.\nFormat: YYYY-MM-DD`\n✅ Description Holder object that contains the pax name and surname. on type Holder has changed to Holder object that contains the occupant's (pax's) name and surname.\n✅ Description Contains information about booking. on type HotelBookingDetail has changed to Contains information about booking\n✅ Field HotelBookingDetail.addOns description changed from Extra information about the option. to Additional information about the option\n✅ Field HotelBooking.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n✅ Field HotelBooking.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field HotelBooking.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n✅ Input field HotelCriteriaQuoteInput.language description changed from Language to be used in request. to Language to be used in request\n✅ Description Contains information about quote. on type HotelOptionQuote has changed to Contains information about quote(s)\n✅ Field HotelOptionQuote.addOns description changed from Extra information about the option. to Additional information about the option\n✅ Field HotelQuote.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n✅ Field HotelQuote.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field HotelQuote.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n✅ Description Urls Input on type UrlsInput has changed to URLs Input\n✅ Input field UrlsInput.book description changed from Specific Url for Valuation method. to Specific URL for Valuation method.\n✅ Input field UrlsInput.quote description changed from Specific Url for Reservation method. to Specific URL for Reservation method.\n✅ Input field UrlsInput.search description changed from Specific Url for Availability method. to Specific URL for Availability method.\n✅ Input field ConfigurationInput.markets description changed from Source markets allowed for the access. to Source Markets allowed for the Access\n✅ Input field ConfigurationInput.urls description changed from Url or endpoint for the connection. to URL or endpoint for the connection.\n✅ Input field ConfigurationInput.password description changed from Password for the connection. to Password for the connection\n✅ Input field SettingsBaseInput.businessRules description changed from Business rules. to Business rules\n✅ Input field HotelSettingsInput.businessRules description changed from Business rules. to Business rules\n✅ Input field HotelSettingsInput.client description changed from This field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload. to This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n✅ Input field HotelSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)toThis field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)`\n✅ Description `Criteria of search contains destination, travel dates and the number of pax in each room.\nYou must preload the other fields in our system by complete the fields absents.on typeHotelCriteriaSearchInputhas changed toSearch criteria contains destination, travel dates and the number of pax in each room.\nYou must preload the other fields in our system by complete the fields absents.`\n✅ Input field HotelCriteriaSearchInput.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n✅ Input field HotelCriteriaSearchInput.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n✅ Input field HotelCriteriaSearchInput.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n✅ Input field HotelCriteriaSearchInput.language description changed from Language to be used in request. to Language to be used in request\n✅ Input field HotelCriteriaSearchInput.occupancies description changed from `For multi room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.toFor multi-room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.`\n✅ Input field HotelCriteriaSearchInput.hotels description changed from Contains the list of hotels's ID. to Contains the list of hotels's ID\n✅ Input field HotelCriteriaSearchInput.checkOut description changed from `Check-out, date for the booking.\nFormat: yyyy-MM-ddtoCheck-out, booking date\nFormat: YYYY-MM-DD`\n✅ Input field HotelCriteriaSearchInput.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n✅ Description Extra information about the option. on type AddOn has changed to Additional information about the option\n✅ Field AddOn.value description changed from Contains the AddOn values. to Contains AddOn values.\n✅ Field AddOn.key description changed from Contains the keyword/Id to identify the AddOn. to Contains keyword/ID to identify the AddOn.\n✅ Description Extra information about the option. on type AddOns has changed to Additional information about the option\n✅ Deprecation reason on field AddOns.distribute has changed from deprecated from 2018-03-12. You can find it in distribution AddOn. to You can find it in distribution AddOn\n✅ Description Contains information about a cancel penalty. on type CancelPenalty has changed to Contains information for cancellation penalities..\n✅ Field CancelPenalty.value description changed from Value of the cancel policy. to Value of the cancellation policy\n✅ Field CancelPenalty.currency description changed from Currency used in the cancel policy. to Currency used in the cancellation policy\n✅ Field CancelPenalty.penaltyType description changed from Type of penalty. This can be Nights, Percent or Import. to Type of penalty; this can be Nights, Percent or Import\n✅ Field CancelPenalty.hoursBefore description changed from Cancellation fees applicable x number of hours before the check in date. to Cancellation fees applicable X number of hours before the check-in date\n✅ Description Contains information about a cancel policy. on type CancelPolicy has changed to Information about a policy cancellation.\n✅ Field CancelPolicy.cancelPenalties description changed from List of cancel penalties. to List of cancellation penalties\n✅ Field CancelPolicy.refundable description changed from Indicates if the option is refundable or not. to Indicates if the option is refundable or non-refundable\n✅ Field Bed.shared description changed from Specifies if the bed is shared or not. to Specifies if the bed is shared or not\n✅ Field Bed.count description changed from Indicates number of beds in the room. to Indicates number of beds in a room\n✅ Field Bed.description description changed from Description about the bed. to Description about the bed\n✅ Field Bed.type description changed from Specifies the bed type. to Specifies the bed type\n✅ Description Informs about the currency of origin, and the rate applied over result returned by the supplier. on type Exchange has changed to Provides information about the currency of original, and its rate applied over the results returned by the Supplier.\n✅ Field Exchange.rate description changed from Informs about the rate applied over result. to Provides information about the rate applied over results\n✅ Field Exchange.currency description changed from Informs about the currency of origin. to Provide information about the currency of origin\n✅ Description `Price indicates the value of the room/option.\nSupplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.on typePricehas changed toPrice indicates the value of the room/option.\nSupplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.`\n✅ Field Price.exchange description changed from `Informs about the currency of origin, and the rate applied over result returned by the supplier.\nThis information is mandatory.toProvides information about the currency of original, and its rate applied over the results returned by the Supplier.\nThis information is mandatory.`\n✅ Field Room.description description changed from Description about the room. to Description about the room\n✅ Field Room.code description changed from Indicates the room code. to Indicates the room code\n✅ Field Room.occupancyRefId description changed from ID reference to the occupancy. to ID reference to the occupancy\n✅ Description An option includes hotel information, meal plan, total price, conditions and room description. on type HotelOptionSearch has changed to An option includes hotel information, meal plan, total price, conditions and room description\n✅ Field HotelOptionSearch.addOns description changed from Extra information about the option. to Additional information about the option\n✅ Field HotelOptionSearch.occupancies description changed from List of occupancies of the request. to List of occupancies for the request\n✅ Description Criteria of search contains destination, travel dates and the number of pax in each room. on type CriteriaSearch has changed to Search criteria contains destination, travel dates and the number of pax in each room.\n✅ Field CriteriaSearch.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n✅ Field CriteriaSearch.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n✅ Field CriteriaSearch.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n✅ Field CriteriaSearch.language description changed from Language to be used in request. to Language to be used in request\n✅ Field CriteriaSearch.occupancies description changed from `For multi room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.toFor multi-room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.`\n✅ Field CriteriaSearch.hotels description changed from Contains the list of hotels's ID. to Contains the list of hotels's ID\n✅ Field CriteriaSearch.checkOut description changed from `Check-out, date for the booking.\nFormat: yyyy-MM-ddtoCheck-out, booking date\nFormat: YYYY-MM-DD`\n✅ Field CriteriaSearch.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n✅ Description Data sent \u0026amp; received in the supplier’s native format. on type AuditData has changed to Data sent and received in the supplier’s native format.\n✅ Field AuditData.transactions description changed from List of transactions data. to List of transactions data\n✅ Field Response.auditData description changed from Data sent \u0026amp; received in the supplier’s original format. to Data sent and received in the supplier’s original format.\n✅ Description Results of Avail Hotel. Contains all the available options for a given date and itinerary. on type HotelSearch has changed to Results from Avail Hotel; contains all the available options for a given date and itinerary\n✅ Field HotelSearch.errors description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field HotelSearch.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n✅ Field Destination.updatedAt description changed from Update date to Date updated\n✅ Field Destination.createdAt description changed from Create date to Date created\n✅ Field Destination.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field Media.updatedAt description changed from Update date. to Date updated.\n✅ Description Something, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people. on type Amenity has changed to An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\n✅ Field Amenity.type description changed from Indicates the type of the amenity. to Indicates the type of Amenity.\n✅ Field DestinationData.type description changed from Indicates destination type, zone or city. to Indicates destination type, zone or city\n✅ Field DestinationData.parent description changed from Parent destination code. to Parent destination code\n✅ Field DestinationData.closestDestinations description changed from Closest destinations, indicates the minimal destinations. to Closest destinations, indicates destinations in proximity\n✅ Field DestinationData.available description changed from Indicates if you can search by destination. to Indicates if you can search by destination\n✅ Description Indicates the location of the hotel. on type Location has changed to Indicates the location of the hotel\n✅ Field HotelData.location description changed from Indicates the location of the hotel. to Indicates the location of the hotel\n✅ Field Hotel.updatedAt description changed from Update date to Date updated\n✅ Field Hotel.createdAt description changed from Create date to Date created\n✅ Field Hotel.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field RoomData.roomCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel in the Supplier selected\n✅ Field RoomData.code description changed from Internal code to perform availability. to Internal code for checking availability\n✅ Field RoomStatic.updatedAt description changed from Update date to Date updated\n✅ Field RoomStatic.createdAt description changed from Create date to Date created\n✅ Field RoomStatic.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field CategoryData.categoryCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel based on the Supplier selected\n✅ Field CategoryData.code description changed from Internal code to perform availability. to Internal code for checking availability\n✅ Field Category.updatedAt description changed from Update date to Date updated\n✅ Field Category.createdAt description changed from Create date to Date created\n✅ Field Category.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field BoardData.boardCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel in the Supplier selected\n✅ Field BoardData.code description changed from Internal code to perform availability. to Internal code for checking availability\n✅ Description Board Type on type Board has changed to Board type.\n✅ Field Board.updatedAt description changed from Update date to Date updated\n✅ Field Board.createdAt description changed from Create date to Date created\n✅ Field Board.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field ClientData.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n✅ Field Client.updatedAt description changed from Update date to Date updated\n✅ Field Client.createdAt description changed from Create date to Date created\n✅ Field Client.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field Urls.book description changed from Specific Url for Valuation method. to Specific URL for Valuation method.\n✅ Field Urls.quote description changed from Specific Url for Reservation method. to Specific URL for Reservation method.\n✅ Field Urls.search description changed from Specific Url for Availability method. to Specific URL for Availability method.\n✅ Field Supplier.updatedAt description changed from Update date to Date updated\n✅ Field Supplier.createdAt description changed from Create date to Date created\n✅ Field Supplier.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field AccessData.shared description changed from Parent access if Shared access to Parent Access if Shared Access\n✅ Field AccessData.rateRules description changed from Business rules types for the access. to Business rule types for the Access\n✅ Field AccessData.markets description changed from Markets allowed for the access. to Markets allowed for the Access\n✅ Field AccessData.parameters description changed from List of parameters for additional information. to List of parameters for additional information\n✅ Field AccessData.urls description changed from Specific Urls to Specific URLs\n✅ Field AccessData.password description changed from Password for the connection. to Password for the connection\n✅ Field AccessData.user description changed from User code to connect to supplier. to User code to connect to supplier\n✅ Field AccessData.isTest description changed from Indicates if this access can be used for testing or not to Indicates if Access can be used for testing or not\n✅ Field AccessData.supplier description changed from supplier for this access. to Supplier for this Access\n✅ Field AccessData.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n✅ Field Node.updatedAt description changed from Update date to Date updated\n✅ Field Node.createdAt description changed from Create date to Date created\n✅ Field Node.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field Access.updatedAt description changed from Update date to Date updated\n✅ Field Access.createdAt description changed from Create date to Date created\n✅ Field Access.error description changed from Errors that will lead the service to abort to Errors that abort services\n✅ Field AdminQuery.operations description changed from Operations list. Specify operations codes to filter operations. to Operations list; specify operations codes to filter operations.\n✅ Field AdminQuery.roles description changed from Roles list. Specify role codes to filter roles. to Roles list; specify role codes to filter roles.\n✅ Field AdminQuery.resources description changed from Resources list. Specify resource codes to filter resources. to Resources list; specify resource codes to filter resources.\n✅ Field AdminQuery.apis description changed from Apis list. Specify api codes to filter apis. to Apis list; specify api codes to filter apis.\n✅ Field AdminQuery.groups description changed from Groups list. Specify group codes to filter groups. to Groups list; specify group codes to filter groups.\n✅ Field AdminQuery.members description changed from Members list. Specify member codes to filter members. to Members list; specify member codes to filter members.\n✅ Field AdminQuery.products description changed from Products list. Specify product codes to filter products. to Members list; specify member codes to filter members\n✅ Field AdminQuery.organizations description changed from Organizations list. Specify organization codes to filter organizations. to Organizations list; specify organization codes to filter organizations\n✅ Field AdminQuery.serviceApi description changed from Obtain a ServiceApi to Obtain a ServiceAPI\n✅ Field AdminQuery.accesses description changed from Obtain a list of accesses for a filter. to Obtain a list of accesses for a filter\n✅ Type OrganizationTemplate was added\n✅ Type CreateOrganizationInput was added\n2018-05-16 🛑 Type for argument input on field MappeaMutation.mapSupplier changed from MappeaXMapSupplierInput! to MappeaMapSupplierInput!\n🛑 Type for argument input on field MappeaMutation.uploadFile changed from MappeaXUploadFileInput! to MappeaUploadFileInput!\n🛑 Type for argument input on field MappeaMutation.confirmUpload changed from MappeaXConfirmUploadInput! to MappeaConfirmUploadInput!\n🛑 Type for argument input on field MappeaQuery.getMappeaStats changed from MappeaXGetMappeaStatsInput! to MappeaGetMappeaStatsInput!\n🛑 Field RoleData.label changed type from String! to String\n🛑 Type MappeaXEditOrganizationInput was removed\n🛑 Type MappeaXAddOrganizationInput was removed\n🛑 Type MappeaXMapSupplierInput was removed\n🛑 Type MappeaXUploadFileInput was removed\n🛑 Type MappeaXSupplierConfirmedInput was removed\n🛑 Type MappeaXConfirmUploadInput was removed\n🛑 Type MappeaXGetMappeaStatsInput was removed\n✅ Input field AccessInput.name changed type from String! to String\n✅ Field deleteClientFromGroup was added to object type AdminMutation\n✅ Field grantClientToGroup was added to object type AdminMutation\n✅ Field label was added to object type ProductData\n✅ Field label was added to object type OperationData\n✅ Field label was added to object type APIData\n✅ Field label was added to object type ResourceData\n✅ Field label was added to object type MemberData\n✅ Field label was added to object type GroupData\n✅ Field label was added to object type GroupCommonData\n✅ Field label was added to object type OrganizationData\n✅ Type MappeaEditOrganizationInput was added\n✅ Type MappeaAddOrganizationInput was added\n✅ Type MappeaMapSupplierInput was added\n✅ Type MappeaUploadFileInput was added\n✅ Type MappeaSupplierConfirmedInput was added\n✅ Type MappeaConfirmUploadInput was added\n✅ Type MappeaGetMappeaStatsInput was added\n2018-05-03 ✅ Field asserts was added to object type StatsInfo\n✅ Field clients was added to object type GroupData\n✅ Field suppliers was added to object type GroupData\n✅ Field clients was added to object type GroupCommonData\n✅ Field suppliers was added to object type GroupCommonData\n✅ Field clients was added to object type OrganizationData\n✅ Field suppliers was added to object type OrganizationData\n✅ Input field serviceAPI was added to input object type SupplierFilter\n✅ Input field isActive was added to input object type SupplierFilter\n✅ Input field groupID was added to input object type SupplierFilter\n✅ Type StatsAssert was added\n2018-05-02 🛑 Enum value BOOK was removed from enum OperationType\n⚠️ Enum value BOOKING was added to enum OperationType\n✅ Input field accesses was added to input object type StatsFilterInput\n✅ Field accesses was added to object type GroupData\n✅ Field allMembers was added to object type GroupData\n✅ Field accesses was added to object type GroupCommonData\n✅ Field allMembers was added to object type GroupCommonData\n✅ Field accesses was added to object type OrganizationData\n✅ Field allMembers was added to object type OrganizationData\n2018-04-25 ⚠️ Field DestinationData.type changed type from DestinationType! to DestinationType\n⚠️ Field type was removed from object type OperationData\n⚠️ Field memberType was removed from object type MemberData\n⚠️ Argument Last: Int was removed from field AdminQuery.clients\n⚠️ Argument Last: Int was removed from field AdminQuery.suppliers\n⚠️ Argument Last: Int was removed from field AdminQuery.accesses\n✅ Enum value ORG was added to enum GroupType\n✅ Field types was added to object type OperationData\n✅ Argument type: OperationType added to field APIData.operations\n✅ Argument type: GroupType added to field APIData.groups\n✅ Argument type: GroupType added to field MemberData.groups\n✅ Field type was added to object type MemberData\n✅ Argument type: MemberType added to field GroupData.members\n✅ Argument type: MemberType added to field GroupCommonData.members\n✅ Argument type: MemberType added to field OrganizationData.members\n✅ Argument type: OperationType added to field AdminQuery.operations\n✅ Argument last: Int added to field AdminQuery.clients\n✅ Argument last: Int added to field AdminQuery.suppliers\n✅ Argument last: Int added to field AdminQuery.accesses\n2018-04-24 ⚠️ Input field groupUsers was removed from input object type StatsFilterInput\n✅ Input field StatsFilterInput.operation changed type from [ServiceOperationType!]! to [ServiceOperationType!]\n✅ Field OperationData.type description changed from `totype: [OperationType!]!`\n✅ Field error was added to object type ServiceApi\n✅ Input field name was added to input object type ClientFilter\n✅ Type OperationType was added\n2018-04-18 ⚠️ Type for argument input on field AdminMutation.updateClient changed from ClientInput! to UpdateClientInput!\n⚠️ Type for argument input on field AdminMutation.createClient changed from ClientInput! to CreateClientInput!\n⚠️ Field StatsData was removed from object type Stats\n⚠️ ClientInput was removed\n✅ Field statsData was added to object type Stats\n✅ Type MappeaXEditOrganizationInput was added\n✅ Type MappeaXAddOrganizationInput was added\n✅ Type UpdateClientInput was added\n✅ Type CreateClientInput was added\n2018-04-17 ⚠️ Field MemberData.roles changed type from String to RoleConnection\n✅ Field mappea was added to object type Mutation\n✅ Field operations was added to object type APIData\n✅ Field children was added to object type GroupData\n✅ Argument codes: [ID!] added to field MemberData.roles\n✅ Argument after: String added to field MemberData.roles\n✅ Argument before: String added to field MemberData.roles\n✅ Argument last: Int added to field MemberData.roles\n✅ Argument first: Int added to field MemberData.roles\n✅ Field children was added to object type GroupCommonData\n✅ Field children was added to object type OrganizationData\n✅ Field travelOperation was added to object type ServiceOperation\n✅ Field operations was added to object type AdminQuery\n✅ Input field HotelSettingsInput.client description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.`\n✅ Input field HotelSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)`\n✅ Input field group was added to input object type HotelSettingsInput\n✅ Field mappea was added to object type Query\n✅ Field stats was added to object type Query\n✅ Type LegacyData was added\n✅ Type MappeaXMapSupplierInput was added\n✅ Type MappeaXUploadFileInput was added\n✅ Type SupplierDetected was added\n✅ Type UploadFileData was added\n✅ Type UploadFileResponse was added\n✅ Type MappeaXSupplierConfirmedInput was added\n✅ Type MappeaXConfirmUploadInput was added\n✅ Type OnlyStatusResponse was added\n✅ Type MappeaMutation was added\n✅ Type MappeaXGetMappeaStatsInput was added\n✅ Type GetMappeaStatsData was added\n✅ Type GetMappeaStatsResponse was added\n✅ Type File was added\n✅ Type GetUploadedFilesData was added\n✅ Type GetUploadedFilesResponse was added\n✅ Type MappeaQuery was added\n✅ Type ServiceApiType was added\n✅ Type StatsFilterInput was added\n✅ Type ServiceOperationType was added\n✅ Type StatsInfoTypes was added\n✅ Type StatsInfo was added\n✅ Type OperationDetailed was added\n✅ Type Ratios was added\n✅ Type StatsData was added\n✅ Type Stats was added\n✅ Type StatsEdge was added\n✅ Type StatsConnection was added\n✅ Type StatsQuery was added\n✅ Type OperationData was added\n✅ Type Operation was added\n✅ Type OperationEdge was added\n✅ Type OperationConnection was added\n2018-04-03 ⚠️ Input field accesses was removed from input object type ClientInput\n⚠️ Field accesses was removed from object type ClientData\n✅ Input field groupID was added to input object type ClientFilter\n✅ Field serviceApi was added to object type AdminQuery\n✅ Description for enum value BookStatusType.UNKNOWN changed from `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the clientâ€™s responsibility to check if the booking is OKtoThe reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.ON_REQUEST changed from `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the clientâ€™s responsibility to check if the booking is OKtoThe reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Description The information and credentials required to access the supplierâ€™s system. on type ConfigurationInput has changed to The information and credentials required to access the supplier’s system.\n✅ Description Data sent \u0026amp; received in the supplierâ€™s native format. on type AuditData has changed to Data sent \u0026amp; received in the supplier’s native format.\n✅ Field Response.auditData description changed from Data sent \u0026amp; received in the supplierâ€™s original format. to Data sent \u0026amp; received in the supplier’s original format.\n✅ Field AdviseMessage.type description changed from `TODO:\nError type: The following types are valid:\nXXX: asd asdÃ±oajskd lÃ±a ldtoTODO:\nError type: The following types are valid:\nXXX: asd asdñoajskd lña ld`\n✅ Type ServiceApiFilter was added\n✅ Type ServiceOperation was added\n✅ Type ServiceApi was added\n2018-03-20 ✅ Input field HotelSettingsInput.connectUser description changed from This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. to This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. @deprecated(reason: \u0026quot;deprecated from 2018-03-19. Redundant.\u0026quot;)\n✅ Input field client was added to input object type HotelSettingsInput\n2018-03-14 ✅ Deprecation reason on field AddOns.distribute has changed from `todeprecated from 2018-03-12. You can find it in distribution AddOn.`\n✅ Field distribution was added to object type AddOns\n✅ Type AddOn was added\n2018-03-08 ⚠️ Input field DestinationsCodes was removed from input object type HotelXDestinationListInput\n⚠️ Field boardData was removed from object type Destination\n⚠️ Input field ParameterInput.key changed type from ID! to String!\n⚠️ Field DestinationData.code changed type from String! to ID!\n⚠️ WebSearchResult was removed\n✅ Enum value NON_REFUNDABLE was added to enum RateRulesType\n✅ Enum value NORMAL was added to enum RateRulesType\n✅ Input field destinationCodes was added to input object type HotelXDestinationListInput\n✅ Field token was added to object type DestinationConnection\n✅ Field destinationData was added to object type Destination\n✅ Field destinationSearcher was added to object type HotelXQuery\n✅ Field destinations was added to object type HotelXQuery\n✅ Type HotelXDestinationSearcherInput was added\n✅ Type DestinationSearchResult was added\n2018-03-05 ⚠️ Input field AccessInput.parameters changed type from String to [ParameterInput]\n⚠️ Input field name was added to input object type AccessInput\n⚠️ Input field descriptiveInfoLimit was removed from input object type AccessInput\n⚠️ Input field serviceAPI was removed from input object type SupplierFilter\n⚠️ Input field isActive was removed from input object type SupplierFilter\n⚠️ Field updatedAt was removed from object type Parameter\n⚠️ Field createdAt was removed from object type Parameter\n⚠️ Field error was removed from object type Parameter\n⚠️ Field parameterData was removed from object type Parameter\n⚠️ Field code was removed from object type Parameter\n⚠️ Parameter object type no longer implements Node interface\n⚠️ Field SupplierData.accesses changed type from AccessConnection! to AccessConnection\n⚠️ Field legacy was removed from object type SupplierData\n⚠️ Argument after: String was removed from field AccessData.parameters\n⚠️ Argument before: String was removed from field AccessData.parameters\n⚠️ Argument Last: Int was removed from field AccessData.parameters\n⚠️ Argument first: Int was removed from field AccessData.parameters\n⚠️ Field AccessData.parameters changed type from ParameterConnection to [Parameter]\n⚠️ Field descriptiveInfoLimit was removed from object type AccessData\n⚠️ Input field ParameterInput.key changed type from String! to ID!\n⚠️ Input field filter was removed from input object type HotelXHotelListInput\n⚠️ Field Destination.code changed type from String! to ID!\n⚠️ Field texts was removed from object type Destination\n⚠️ Field available was removed from object type Destination\n⚠️ Field Location.closestDestination changed type from Destination! to DestinationData!\n⚠️ Field HotelConnection.token changed type from String! to String\n⚠️ SupplierInput was removed\n⚠️ ProviderInput was removed\n⚠️ LegacyDataInput was removed\n⚠️ ParameterData was removed\n⚠️ ParameterEdge was removed\n⚠️ ParameterConnection was removed\n⚠️ LegacyData was removed\n✅ Destination object implements Node interface\n✅ Input field isTest was added to input object type AccessInput\n✅ Field updateClient was added to object type AdminMutation\n✅ Field createClient was added to object type AdminMutation\n✅ Description `on typeParameterhas changed toParameters for additional information for the supplier\u0026rsquo;s configuration.`\n✅ Field value was added to object type Parameter\n✅ Field key was added to object type Parameter\n✅ Description TGX Platform API implementation on type Provider has changed to Temporary type to use only during SQL server's lifetime\n✅ Field SupplierData.accesses description changed from Accesses in a Supplier to Accesses where the supplier is referenced\n✅ Field SupplierData.supplierGroup description changed from SupplierGroup to SupplierGroup Internal Supplier grouping\n✅ Field isTest was added to object type AccessData\n✅ Field name was added to object type AccessData\n✅ Field clients was added to object type AdminQuery\n✅ Description Parameters for additional information for the supplier's configuration. on type ParameterInput has changed to Parameters Input.\n✅ Input field ParameterInput.value description changed from Contains the parameter values. to `Contains the parameter values.\nThis information is mandatory.`\n✅ Input field ParameterInput.key description changed from Contains the keyword/Id to identify a parameter. to `Contains the keyword/Id to identify a parameter.\nThis information is mandatory.`\n✅ Description Url's Input on type UrlsInput has changed to Urls Input\n✅ Input field destinationCodes was added to input object type HotelXHotelListInput\n✅ Description Information about destinantion on type Destination has changed to Destination Type\n✅ Field Destination.code description changed from Destination Code to Destination ID\n✅ Field updatedAt was added to object type Destination\n✅ Field createdAt was added to object type Destination\n✅ Field error was added to object type Destination\n✅ Field boardData was added to object type Destination\n✅ Type HotelXDestinationListInput was added\n✅ Type WebSearchResult was added\n✅ Type DestinationEdge was added\n✅ Type DestinationConnection was added\n✅ Type ClientInput was added\n✅ Type ClientFilter was added\n✅ Type ClientData was added\n✅ Type Client was added\n✅ Type ClientEdge was added\n✅ Type ClientConnection was added\n✅ Type DestinationType was added\n✅ Type DestinationData was added\n2018-02-21 ⚠️ Field updateHotel was removed from object type HotelXMutation\n⚠️ Input field SupplierFilter.serviceAPI changed type from Int to [Int]\n⚠️ Field avail was removed from object type Destination\n⚠️ Field name was removed from object type Destination\n⚠️ Field Contact.web changed type from URI! to URI\n⚠️ Field Location.zipCode changed type from String! to String\n⚠️ Field Location.city changed type from String! to String\n⚠️ Field Location.address changed type from String! to String\n⚠️ Field geocode was removed from object type Location\n⚠️ Field Amenity.code changed type from ID! to String!\n⚠️ Field updatedAt was removed from object type Amenity\n⚠️ Field createdAt was removed from object type Amenity\n⚠️ Field error was removed from object type Amenity\n⚠️ Field AmenityData was removed from object type Amenity\n⚠️ Amenity object type no longer implements Node interface\n⚠️ Field Media.code changed type from ID! to String\n⚠️ Field createdAt was removed from object type Media\n⚠️ Field error was removed from object type Media\n⚠️ Field mediaData was removed from object type Media\n⚠️ Media object type no longer implements Node interface\n⚠️ Field HotelData.rank changed type from Rank! to [Int!]!\n⚠️ Field HotelData.contact changed type from Contact! to Contact\n⚠️ Argument after: String was removed from field HotelData.amenities\n⚠️ Argument before: String was removed from field HotelData.amenities\n⚠️ Argument last: Int was removed from field HotelData.amenities\n⚠️ Argument first: Int was removed from field HotelData.amenities\n⚠️ Argument language: String was removed from field HotelData.amenities\n⚠️ Field HotelData.amenities changed type from AmenityConnection to [Amenity!]\n⚠️ Argument after: String was removed from field HotelData.medias\n⚠️ Argument before: String was removed from field HotelData.medias\n⚠️ Argument last: Int was removed from field HotelData.medias\n⚠️ Argument first: Int was removed from field HotelData.medias\n⚠️ Argument type: ApplicationArea was removed from field HotelData.medias\n⚠️ Field HotelData.medias changed type from MediaConnection to [Media!]\n⚠️ Field destination was removed from object type HotelData\n⚠️ Field generalDescription was removed from object type HotelData\n⚠️ Field additionalInformation was removed from object type HotelData\n⚠️ Field name was removed from object type HotelData\n⚠️ Type for argument relay on field HotelXQuery.hotels changed from RelayInput to RelayInput!\n⚠️ Argument criteria: HotelXHotelListInput! added to field HotelXQuery.hotels\n⚠️ Argument hotels: HotelXHotelQueryInput was removed from field HotelXQuery.hotels\n⚠️ StatusResponse was removed\n⚠️ HotelStatus was removed\n⚠️ GiataID was removed\n⚠️ HotelXHotelDataInput was removed\n⚠️ HotelXHotelMutationInput was removed\n⚠️ RankInput was removed\n⚠️ HotelXHotelQueryInput was removed\n⚠️ Rank was removed\n⚠️ Geocode was removed\n⚠️ Information was removed\n⚠️ AmenityData was removed\n⚠️ AmenityEdge was removed\n⚠️ AmenityConnection was removed\n⚠️ ApplicationArea was removed\n⚠️ MediaData was removed\n⚠️ MediaEdge was removed\n⚠️ MediaConnection was removed\n✅ Field accesses was added to object type SupplierData\n✅ Description Destination type on type Destination has changed to Information about destinantion\n✅ Field Destination.code changed type from String to String!\n✅ Field Destination.code description changed from Destination code. to Destination Code\n✅ Field texts was added to object type Destination\n✅ Field available was added to object type Destination\n✅ Description Contact type on type Contact has changed to Contact Data.\n✅ Field Contact.web description changed from Web. to Web\n✅ Field Contact.fax description changed from Fax. to Fax\n✅ Field Contact.telephone description changed from Telephone. to Telephone\n✅ Field Contact.email description changed from Email. to Email\n✅ Description Location on type Location has changed to Indicates the location of the hotel.\n✅ Field Location.country description changed from Country ISO Code to Country where is the Hotel.\n✅ Field Location.zipCode description changed from Zip Code to Contains the zipCode.\n✅ Field Location.city description changed from City to Contains the city\n✅ Field Location.address description changed from Street Address to Contains Hotel Address\n✅ Field closestDestination was added to object type Location\n✅ Field coordinates was added to object type Location\n✅ Description `on typeAmenityhas changed toSomething, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people.`\n✅ Field Amenity.code description changed from `toCode`\n✅ Field texts was added to object type Amenity\n✅ Field type was added to object type Amenity\n✅ Description `on typeMediahas changed toContains media information.`\n✅ Field Media.updatedAt description changed from Update date to Update date.\n✅ Field Media.code description changed from `toCode.`\n✅ Field texts was added to object type Media\n✅ Field url was added to object type Media\n✅ Field type was added to object type Media\n✅ Field order was added to object type Media\n✅ Field HotelData.rank description changed from `toRank indicates the supplier categorization.`\n✅ Field HotelData.contact description changed from Contact information. to Contact cotains information about hotel contact.\n✅ Field HotelData.location description changed from `toIndicates the location of the hotel.`\n✅ Field HotelData.amenities description changed from `toAmenities`\n✅ Field HotelData.medias description changed from `toMedias`\n✅ Field HotelData.hotelCode description changed from Code of the hotel in the Supplier selected. to Code to perform availability.\n✅ Field HotelData.code description changed from Internal code to perform availability to Internal code.\n✅ Field descriptions was added to object type HotelData\n✅ Field cardTypes was added to object type HotelData\n✅ Field chainCode was added to object type HotelData\n✅ Field property was added to object type HotelData\n✅ Field hotelName was added to object type HotelData\n✅ Field hotelCodeSupplier was added to object type HotelData\n✅ Description Hotel type on type Hotel has changed to Hotel Type\n✅ Field token was added to object type HotelConnection\n✅ Argument token: String added to field HotelXQuery.hotels\n✅ Field rooms was added to object type HotelXQuery\n✅ Field categories was added to object type HotelXQuery\n✅ Field boards was added to object type HotelXQuery\n✅ Type HotelXRoomQueryInput was added\n✅ Type RoomData was added\n✅ Type RoomStatic was added\n✅ Type RoomEdge was added\n✅ Type RoomConnection was added\n✅ Type HotelXHotelListInput was added\n✅ Type DescriptionType was added\n✅ Type Description was added\n✅ Type ApplicationAreaType was added\n✅ Type Coordinates was added\n✅ Type Property was added\n✅ Type HotelXCategoryQueryInput was added\n✅ Type CategoryData was added\n✅ Type Category was added\n✅ Type CategoryEdge was added\n✅ Type CategoryConnection was added\n✅ Type HotelXBoardQueryInput was added\n✅ Type Text was added\n✅ Type BoardData was added\n✅ Type Board was added\n✅ Type BoardEdge was added\n✅ Type BoardConnection was added\n2018-01-30 ⚠️ Input field hotelCode was added to input object type HotelXHotelDataInput\n⚠️ Input field supplierCode was removed from input object type HotelXHotelDataInput\n⚠️ Field rsAccess was removed from object type StatAccess\n⚠️ Field rqAccess was removed from object type StatAccess\n⚠️ Field dockerID was removed from object type StatAccess\n⚠️ Field dockerID was removed from object type StatPlugin\n⚠️ Field rsPlugin was removed from object type StatsRequest\n⚠️ Field rqPlugin was removed from object type StatsRequest\n⚠️ Field rs was removed from object type StatsRequest\n⚠️ Field rq was removed from object type StatsRequest\n⚠️ Field config was removed from object type StatsRequest\n⚠️ Field supplierCode was removed from object type HotelData\n✅ Description for enum value BookStatusType.UNKNOWN changed from The status of the booking is unknown to `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.ON_REQUEST changed from The status of the booking is on request to `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.OK changed from The status of the booking is available to The reservation was completed with no problems\n✅ Field StatTransaction.parseResponse description changed from `toParse response time`\n✅ Field StatTransaction.workerCommunication description changed from `toWorker connection time`\n✅ Field StatTransaction.buildRequest description changed from `toBuild request time`\n✅ Field StatTransaction.total description changed from `toTotal transaction time`\n✅ Field StatTransaction.reference description changed from `toExtra information about transaction.`\n✅ Field StatAccess.plugins description changed from `toPlugin execution time`\n✅ Field StatAccess.transactions description changed from `toDetail transaction time`\n✅ Field StatAccess.cities description changed from `toNumber of cities`\n✅ Field StatAccess.zones description changed from `toNumber of zones`\n✅ Field StatAccess.hotels description changed from `toNumber of hotels`\n✅ Field StatAccess.staticConfiguration description changed from `toStatic configuration time`\n✅ Field StatAccess.total description changed from `toTotal access time`\n✅ Field StatAccess.name description changed from `toAccess name`\n✅ Field responseAccess was added to object type StatAccess\n✅ Field requestAccess was added to object type StatAccess\n✅ Field StatPlugin.total description changed from `tototal plugin time`\n✅ Field StatPlugin.name description changed from `toPlugin name`\n✅ Field StatsRequest.Accesses description changed from `toDetail access time`\n✅ Field StatsRequest.dockerID description changed from `toDocker Id`\n✅ Field StatsRequest.cities description changed from `toNumber of cities`\n✅ Field StatsRequest.zones description changed from `toNumber of zones`\n✅ Field StatsRequest.hotels description changed from `toNumber of hotels`\n✅ Field StatsRequest.process description changed from `toProcess time. Contains communication time, parse time and plugin time.`\n✅ Field StatsRequest.validation description changed from `toRequest validation time`\n✅ Field StatsRequest.total description changed from `toTotal transaction time`\n✅ Field responsePlugin was added to object type StatsRequest\n✅ Field requestPlugin was added to object type StatsRequest\n✅ Field response was added to object type StatsRequest\n✅ Field request was added to object type StatsRequest\n✅ Field configuration was added to object type StatsRequest\n✅ Field hotelCode was added to object type HotelData\n2018-01-29 ⚠️ Field HotelCancelPayload.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelBookPayload.stats changed type from RequestStats to StatsRequest\n⚠️ Input field supplierCode was added to input object type HotelXHotelDataInput\n⚠️ Input field code was removed from input object type HotelXHotelDataInput\n⚠️ Type for argument relay on field HotelXMutation.updateHotel changed from HotelXRelayInput to RelayInput\n⚠️ Field HotelBooking.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelQuote.stats changed type from RequestStats to StatsRequest\n⚠️ Field external was removed from object type StatAccess\n⚠️ Field Response.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelSearch.stats changed type from RequestStats to StatsRequest\n⚠️ Input field codes was removed from input object type HotelXHotelQueryInput\n⚠️ Type for argument language on field HotelData.generalDescription changed from Language to String\n⚠️ Type for argument language on field HotelData.additionalInformation changed from Language to String\n⚠️ Type for argument language on field HotelData.amenities changed from Language to String\n⚠️ Type for argument relay on field HotelXQuery.hotels changed from HotelXRelayInput to RelayInput\n⚠️ RequestStats was removed\n⚠️ HotelXRelayInput was removed\n✅ Input field supplierGroup was added to input object type SupplierInput\n✅ Input field serviceAPI was added to input object type SupplierFilter\n✅ Input field isActive was added to input object type SupplierFilter\n✅ Field supplierGroup was added to object type SupplierData\n✅ Description Url's on type UrlsInput has changed to Url's Input\n✅ Field plugins was added to object type StatAccess\n✅ Field rsAccess was added to object type StatAccess\n✅ Field rqAccess was added to object type StatAccess\n✅ Field dockerID was added to object type StatAccess\n✅ Field cities was added to object type StatAccess\n✅ Field zones was added to object type StatAccess\n✅ Field hotels was added to object type StatAccess\n✅ Input field supplierCodes was added to input object type HotelXHotelQueryInput\n✅ Field HotelData.code description changed from Internal code to perform availability and/or supplier code. to Internal code to perform availability\n✅ Field supplierCode was added to object type HotelData\n✅ Type StatPlugin was added\n✅ Type StatsRequest was added\n✅ Type RelayInput was added\n2018-01-17 ⚠️ Field AccessEdge.node changed type from Supplier to Access\n⚠️ Field value was removed from object type Parameter\n⚠️ Field key was removed from object type Parameter\n⚠️ Field supplierGroups was removed from object type SupplierData\n⚠️ Field hotelCodes was removed from object type SupplierData\n⚠️ Field dll was removed from object type SupplierData\n⚠️ Field Supplier.supplierData changed type from SupplierData! to SupplierData\n⚠️ Field AccessData.parameters changed type from [Parameter!] to ParameterConnection\n⚠️ Field AccessData.urls changed type from Urls! to Urls\n⚠️ Field AccessData.supplier changed type from String! to Supplier!\n⚠️ Field AccessData.code changed type from String! to ID!\n⚠️ Field id was removed from object type AccessData\n⚠️ Field suppliers was removed from object type AccessData\n⚠️ Field Access.accessData changed type from AccessData! to AccessData\n✅ Parameter object implements Node interface\n✅ Description Parameters for additional information for the supplier's configuration. on type Parameter has changed to ``\n✅ Field updatedAt was added to object type Parameter\n✅ Field createdAt was added to object type Parameter\n✅ Field error was added to object type Parameter\n✅ Field parameterData was added to object type Parameter\n✅ Field code was added to object type Parameter\n✅ Field legacy was added to object type SupplierData\n✅ Field serviceApi was added to object type SupplierData\n✅ Field context was added to object type SupplierData\n✅ Field provider was added to object type SupplierData\n✅ Field name was added to object type SupplierData\n✅ Argument after: String added to field AccessData.parameters\n✅ Argument before: String added to field AccessData.parameters\n✅ Argument Last: Int added to field AccessData.parameters\n✅ Argument first: Int added to field AccessData.parameters\n✅ Field AccessData.code description changed from Access code. to Unique AccessConfiguration identifier\n✅ Field shared was added to object type AccessData\n✅ Field rateRules was added to object type AccessData\n✅ Field descriptiveInfoLimit was added to object type AccessData\n✅ Field deleteSupplierFromGroup was added to object type AdminMutation\n✅ Field grantSupplierToGroup was added to object type AdminMutation\n✅ Field deleteAccessFromGroup was added to object type AdminMutation\n✅ Field grantAccessToGroup was added to object type AdminMutation\n✅ Field updateAccess was added to object type AdminMutation\n✅ Field createAccess was added to object type AdminMutation\n✅ Input field RankInput.rank4 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank3 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank2 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank1 changed type from Boolean! to Boolean\n✅ Field suppliers was added to object type AdminQuery\n✅ Field accesses was added to object type AdminQuery\n✅ Field CancelPolicy.refundable description changed from Indicates if the option is refundable or not. This information is mandatory. to Indicates if the option is refundable or not.\n✅ Input field ranks was added to input object type HotelXHotelQueryInput\n✅ Type SupplierInput was added\n✅ Type ProviderInput was added\n✅ Type LegacyDataInput was added\n✅ Type Context was added\n✅ Type GroupInput was added\n✅ Type AccessInput was added\n✅ Type SupplierFilter was added\n✅ Type SupplierEdge was added\n✅ Type SupplierConnection was added\n✅ Type AccessFilter was added\n✅ Type ParameterData was added\n✅ Type ParameterEdge was added\n✅ Type ParameterConnection was added\n✅ Type LegacyData was added\n✅ Type Provider was added\n2018-01-11 ⚠️ Field codes was removed from object type Map\n⚠️ Field supplierCode was removed from object type Map\n⚠️ Field maps was removed from object type MappingEntity\n⚠️ Argument BoardCodes: [String!] was removed from field MappingContext.boards\n⚠️ Argument roomCodes: [String!] was removed from field MappingContext.rooms\n⚠️ Argument hotelCodes: [String!] was removed from field MappingContext.hotels\n⚠️ Field rates was removed from object type MappingContext\n⚠️ Field contextCode was removed from object type MappingContext\n⚠️ Argument supplierCodes: [String!] was removed from field Mapping.contexts\n⚠️ Argument contextCodes: [String!] was removed from field Mapping.contexts\n⚠️ Field DefaultSettings.market changed type from String! to String\n⚠️ Field DefaultSettings.connectUser changed type from String! to String\n⚠️ Input field HotelSettingsInput.suppliers changed type from [SupplierInput!] to [HotelXSupplierInput!]\n⚠️ Field HotelSearch.requestCriteria changed type from CriteriaSearch! to CriteriaSearch\n⚠️ Field HotelSearch.context changed type from String! to String\n⚠️ Field Geocode.longitude changed type from String! to Float!\n⚠️ Field Geocode.latitude changed type from String! to Float!\n⚠️ Argument after: String was removed from field HotelXQuery.hotels\n⚠️ Argument before: String was removed from field HotelXQuery.hotels\n⚠️ Argument last: Int was removed from field HotelXQuery.hotels\n⚠️ Argument first: Int was removed from field HotelXQuery.hotels\n⚠️ Argument language: String was removed from field HotelXQuery.hotels\n⚠️ Argument codes: [String!] was removed from field HotelXQuery.hotels\n⚠️ HotelInput was removed\n⚠️ AccessInput was removed\n⚠️ SupplierInput was removed\n✅ Field loadFile was added to object type HotelXMutation\n✅ Field updateHotel was added to object type HotelXMutation\n✅ Field maps was added to object type Map\n✅ Field code was added to object type Map\n✅ Field contexts was added to object type MappingEntity\n✅ Argument codes: [String!] added to field MappingContext.boards\n✅ Field MappingContext.boards description changed from Mapping of boards. Filter by board code. to Mapping of boards, you can filter by board code.\n✅ Argument codes: [String!] added to field MappingContext.rooms ✅ Field MappingContext.rooms description changed from Mapping of rooms. Filter by room code. to Mapping of rooms, you can filter by room code.\n✅ Argument codes: [String!] added to field MappingContext.hotels ✅ Field MappingContext.hotels description changed from Mapping of hotels. Filter by hotel code. to Mapping of hotels, you can filter by hotel code.\n✅ Field code was added to object type MappingContext\n✅ Argument codes: [String!] added to field Mapping.contexts\n✅ Field warnings was added to object type Mapping\n✅ Field errors was added to object type Mapping\n✅ Argument type: GroupType added to field AdminQuery.groups\n✅ Argument type: MemberType added to field AdminQuery.members\n✅ Field rank was added to object type HotelData\n✅ Argument relay: HotelXRelayInput added to field HotelXQuery.hotels\n✅ Argument hotels: HotelXHotelQueryInput added to field HotelXQuery.hotels\n✅ Field mapping was added to object type HotelXQuery\n✅ Type StatusResponse was added\n✅ Type HotelStatus was added\n✅ Type RankInput was added\n✅ Type HotelXHotelDataInput was added\n✅ Type HotelXHotelMutationInput was added\n✅ Type HotelXAccessInput was added\n✅ Type HotelXSupplierInput was added\n✅ Type HotelXRelayInput was added\n✅ Type HotelXHotelQueryInput was added\n✅ Type Rank was added\n"
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-mappea/",
	"title": "Mappea",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/plugins/markup/",
	"title": "Markup",
	"tags": [],
	"description": "Mark up or down the price coming from the Supplier based on different criteria.",
	"content": " Markups type plugins permits to apply markup percentages over a price, markup is a field in price composed of a set of rules and a new price with an added percentage, the percentage is the sum of every rule applied.\nAlthough this plugin can be customized, we already offer an implementation.\nMarkupX This markup implementation is supported by our web application which permits the management of an organization\u0026rsquo;s rules, the modification of these rules are applied in your product at real time.\nIn this plugin, a rule is a set of criteria with an associated percentage, an option will apply a rule when it matches every rule’s criteria.\nThe available criteria of a rule are:\n supplier  hotel, city or zone  board  market  price range  cancellation Policies (refundable or not refundable)  rate (b2b or b2c)  check in date  booking date  channel   Additionally, a rule has an ‘override’ flag that permits it to be the only rule applied (ignoring the rest) when set to true. We only let a rule to be overriding when it contains at least the criterion: hotel, city or zone. If multiple override rules are valid for an option, the rule with the heavier weight is applied. The hotel criterion is heavier than city, and city is heavier than zone.\nParameters    key value type condition description     channel string optional channel is a rule criterion   applyNegativeCom bool optional if not set or set to false, if the sum of rules percentages is negative the percentage won’t apply   rules json optional an array of rules in json is expected, if found, those rules will apply to each option, doesn’t matter if an option matches the criteria, it will have the rules applied    Files Format In order to manage city and zone criteria, a previous batch load must be done to make a relation with hotel codes.\nTwo file are needed:\nFrom hotel code to his minimum city code:  Encoding: UTF-8  File Name: [Context Source]_Porfolio.csv  Header Row: HotelCode, CityCode Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Markup  Destination trees:  Encoding: UTF-8  File Name: [Context Source]_DestinationsTree.csv  Header Row: DestinationCode, ParentCode, ISOCountryCode  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Markup   Execution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\\_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;MARKUP\u0026quot; \u0026quot;name\u0026quot;: \u0026quot;markupX\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;channel\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;1000\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;applyNegativeCom\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;true\u0026quot; } ] } ] } }  "
},
{
	"uri": "/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Try our API now",
	"content": " Try it For Yourself API Playground is an interactive, fun, and super quick way to get to know our APIs.\nIn the API Playground, as you start to type the query, it will autocomplete with the fields available to complete your query parameters. You can also click on the green Schema button on the right of the Playground window to learn more about our data model and to see all of the options available for building your query.\nYou can set Query variables in the bottom left pane of the Playground. This lets you customize the response you will receive so that only the fields you need are returned in the response.\n(insert a GIF like the one in the launchpad blog post)\nYour First Query Try to make a query now for searching for hotels available:\nquery (hotels in Mallorca)  Click on the big play button in the middle of the playground to see the response.\nYou should get the following:\n(put in query response)   const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/ba0469dda654a1639294edaadfed1a65\\/raw\\x22,\\x22divname\\x22:\\x22div_main_playground\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }    \nMore Queries Now try these query examples:\n1. Add query variables to search for a particular date range - explain/show\n2. Search for hotels in Mallorca with a swimming pool - explain/show\nOnce you are comfortable with making queries in the API Playground, you can use the same query structure in your applications. Check out the pages Learning GraphQL to learn more about including queries in the code of your client applications.\nFurther Reading  https://dev-blog.apollodata.com/4-simple-ways-to-call-a-graphql-api-a6807bcdb355 https://medium.com/graphql-mastery/graphql-quick-tip-how-to-pass-variables-into-a-mutation-in-graphiql-23ecff4add57  "
},
{
	"uri": "/hotelx/plugins/preference/",
	"title": "Preference",
	"tags": [],
	"description": "To give preference to the options that match the preference rules.",
	"content": " Preference is an optional plugin and allows to offer options preferentially in relation to the rules informed by the client.\nPreference Goals The preference plugin Gives preference to the options that match the preference rules By doing this, the options will be returned in a preferential way.\nSequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the preference will be evaluated. In the same way, if the rule is not found, the option will be validated.\nThe matching process uses client Tokens filed, which identify the provided by the client and it is used to filter which business rules can be applied in the request sent.\nFiles needed in order to use this plugin  Preference file format (Mandatory)  Execution example { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;preference\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [{ \u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;hotel,currency\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;optionsPerKey\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;4\u0026quot; }] }] }  Possible values in \u0026ldquo;key\u0026rdquo;:\u0026ldquo;primaryKey\u0026rdquo; are supplier, hotel, market, board, payment, room, promotion, supplement, surcharges, rateRules or/and cancelPolicy\n Example of use Percentage = 1, Supplier A: 126 €, Supplier B: 125 €\n126 - 126 * 0.01 = 124,74 \u0026lt;= 125 €, then the selected one is supplier A\nPercentage = 1, Supplier A: 128 €, Supplier B: 125 €\n128 - 128 * 0.01 = 126.72\u0026gt; 125 €, then the selected one is supplier B\n"
},
{
	"uri": "/hotelx/concepts/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "HotelX limits the maximum rate of requests and graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice\n"
},
{
	"uri": "/stats/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "/travelgatex/concepts/request-headers/",
	"title": "Request Headers",
	"tags": [],
	"description": "HTTP request headers required in all API requests",
	"content": " The following HTTP request headers are relevant to all request methods (GET, PUT, POST and DELETE) and they are required in all API requests.\nAuthorization (Required) The HTTP Authorization request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header.\nSyntax Authorization: \u0026lt;type\u0026gt; \u0026lt;credentials\u0026gt;  Directives \u0026lt;type\u0026gt;:\n ApiKey Bearer  \u0026lt;credential\u0026gt;: String\nExample Authorization: Apikey q8ggx-poVDW76Kw9-18hwnnRvxlZm-AP2QZ\nTGX-Audit (Optional) Force audit the request in TravelgateX systems.\nSyntax TGX-Audit: \u0026lt;number\u0026gt;  Directives \u0026lt;number\u0026gt;:\n 0: The requester prefers not to be tracked on the target system. 1: The requester prefers to allow tracking on the target system.  TGX-Tracing (Optional) When activated, it returns performance traces alongside the data requested.\nSyntax TGX-Tracing: \u0026lt;number\u0026gt;  Directives \u0026lt;number\u0026gt;:\n 0: Default value. Tracing not enabled. 1: Tracing enabled.  "
},
{
	"uri": "/hotelx/plugins/safety_margin/",
	"title": "Safety Margin",
	"tags": [],
	"description": "Discards those options that have a commission higher than expected.",
	"content": " Safety Margin is an optional plugin that allows discarding options that have a commission lower than expected. The expected commission has to be loaded in safety-margin file, and is the commission over gross, in other words, the commission/profit is already included in the price.\nSafety Margin Goals The safety margin plugin discards those options that have a commission lower than expected. By doing this, only options that have a commission over gross, equal or lower than those reported in the file will be returned.\nSequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the commission will be evaluated. In the same way, if the rule is not found, the option will be validated.\nThe matching process uses client Tokens filed, which identify the provided by the client and it is used to filter which business rules can be applied in the request sent.\nFiles needed in order to use this plugin  Margin safe file format (Mandatory)  Execution example {\n \u0026ldquo;plugins\u0026rdquo;: {\n \u0026ldquo;step\u0026rdquo;: \u0026ldquo;RESPONSE_OPTION\u0026rdquo;,\n \u0026ldquo;pluginsType\u0026rdquo;: [\n {\n \u0026ldquo;type\u0026rdquo;: \u0026ldquo;POST_STEP\u0026rdquo;\n \u0026ldquo;name\u0026rdquo;: \u0026ldquo;safety_margin\u0026rdquo;\n }\n ]\n }\n} ```\n"
},
{
	"uri": "/hotelx/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/mappea/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/paymentx/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/stats/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/travelgatex/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/hotelx/howtos/bookingflow/search/",
	"title": "Search",
	"tags": [],
	"description": "Search step",
	"content": " Search is the first operation in the booking flow. It allows to check which available rooms there are for the requested hotels or for the hotels in the requested destination for a given range of dates and for a given pax distribution.\nAdvanced criteria It explains different parameters that can be set up in the request Mandatory\n CheckIn: check-in date for the booking. Format: YYYY-MM-DD CheckOut: check-out date for the booking. Format YYYY-MM-DD Hotels*: List of hotel codes Destinations*: List of destination codes Occupancies: The occupancy you are requesting for each room.  For multi-room bookings, this array will contain multiple elements (rooms). For each room you should specify its own occupancy.   * Hotels and Destinations parameters are exclusive between them\nHow to request There are different ways to request a Search. Below are shown different examples for different casuistry:\n    002160e4c2822635ef3b1a3c81b1d44d In this availability case, you will not receive results due to the hotel\u0026rsquo;s restriction of minimum stay. In this case, if you change the date range to 3 days or more, you will receive availability /002160e4c2822635ef3b1a3c81b1d44d\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = \"\"; const default_user = \"\"; const gists = [{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"77c80792a415b1be6c92b474f2949d84\",\"n\":\"1 Room - 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"5ac8995ed02d876cb3cf87fcc47efd3a\",\"n\":\"1 Room - 2 Adults 1 Child\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"72e51e75ecf971c4e92b4227e88420df\",\"n\":\"2 Rooms - 2 Adults + 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"12799fd0a67acb73f030b1f9eae10a4e\",\"n\":\"2 Rooms - 2 Adults 1 Child + 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"002160e4c2822635ef3b1a3c81b1d44d\",\"n\":\"3 days minimmum stay\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"a0370f6041d58b67bf1e32363a968abf\",\"n\":\"Destination\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { renderGist({ gist: gist, data: data }); resolve(); }); }) } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nBear in mind Please, bear in mind that within the room structure response there is a refundable field. If that field is filled with false it means that the room has 100% cancellation cost, so the room is not refundable. If the field returns a null value it means that the provider is not able to return this info at this step.\n "
},
{
	"uri": "/hotelx/concepts/search-mode/search-single-mode/",
	"title": "Search Single Mode &amp; Multi Mode",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " On this page you will learn about Transactional Booking Flow to Search, quote and confirm a reservation. You will also see the difference between the Search Single Mode VS Search Multi Mode.\nSearch Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that they want to use. In the request have to use the access filter, you can find a sample here:\n{ \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }                                                                   \nSearch Multi Mode If you don’t have any filter in the request and you have permissions for multimode, the search is multimode. By default, the request is for all the accesses that you have configured in the product, if you want to apply some filter, you have to use the filter and to indicate the rules that you want. Is important to know that you only can use includes or excludes in the same request, but never both in the same request.\n                                                                        \nIncludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;,\u0026quot;yourAccess2\u0026quot;] } } }  Excludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;excludes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }  "
},
{
	"uri": "/hotelx/concepts/search-single-mode/",
	"title": "Search Single Mode &amp; Multi Mode",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " On this page you will learn about the Transactional Booking Flow to Search, Quote and Confirm a reservation. You will also be able to see the difference between the Search Single Mode VS Search Multi Mode. In this sense, you can find the necessary access codes used by using the admin-query\nSearch Single Mode This mode is used when the client only wants to receive options from a single access. In this case, the client should indicate in the request the access code they want to use within the filter access - You can find a sample here:\n{ \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }                                                                   \nSearch Multi-Mode If you don’t apply any filters in the request and you have permissions for multi-mode, the Search is multi-ode. By default, the request is run for all the accesses that you have configured in the product, if you want to apply some filters, you should use the filter and indicate the rules that you want to apply. Is important to know that you can only use \u0026ldquo;includes\u0026rdquo; or \u0026ldquo;excludes\u0026rdquo; in the same request, but never both in the same request.\n                                                                        \nIncludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;,\u0026quot;yourAccess2\u0026quot;] } } }  Excludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;excludes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }  "
},
{
	"uri": "/insights-x/datasets/dataset-tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "Tools for Dataset exploration",
	"content": " On this page you will learn more about TravelgateX free tools to Insights-X Datasets.\nTemplate reportings If you don\u0026rsquo;t have your own reporting tools as Tableau or PowerBI, the easiest way to interact with Insights-X datasets is via our free Google Data Studio Templates.\n   Dataset Version GDS Template     Partner buyer 1.0    Partner seller 1.0    Hotelier 1.0    Industry partner public 1.0    Industry partner private 1.0     "
},
{
	"uri": "/hotelx/howtos/certification_process/usecases/",
	"title": "Use cases",
	"tags": [],
	"description": "Different use cases you have to attach during certification process",
	"content": "To ensure that your connection to our HotelX API is set up correctly, you’ll need to make the following test scenario. You can choose the hotel and dates you prefer:\n Case 1: 1 room with 2 Adults for a Package rate rule. Case 2: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old for a non-refundable rate. Case 3: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old and 1 room for 3 adults for a refundable rate.  "
},
{
	"uri": "/hotelx/howtos/certification_process/",
	"title": "Certification process",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The following is a quick reference to the certification process. In this section we will give you all the necessary information to complete the Certification process, which will ensure that your integration is ready to go Live. Please, consider that reading this section carefully and planning your implementation ahead (knowing what is going to be specifically requested by us) can lead to a much better experience and a sooner reaching of the goal: Being Live and ready to buy.\nOf course, you can contact us with any doubts or questions at: info@xmltravelgate.com\nThe guides   Certification Goals Why we ask for certification process\n     How to apply How you can apply for certification process\n     Use cases Different use cases you have to attach during certification process\n    "
},
{
	"uri": "/hotelx/plugins/converter/",
	"title": "Currency Converter",
	"tags": [],
	"description": "Convert currency in order to have a unified response.",
	"content": " Currency converter is an optional plugin and allows to apply currency conversion over all the prices in one Option.\nCurrencyX This plugin receives an Option and a currency and returns the same option with currency conversion applied over all the prices. It reads the information about rates from a file located in our ftp. Is mandatory that this file exists in the ftp and satisfies all the requirements below. Otherwise, an error will be returned. The node in graphQL that indicates the currency exchange rate is:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;currency\u0026quot;, \u0026quot;rate\u0026quot;: 1 },  If the plugin is not executed, you will receive:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, //Same currency of option with no currency exchange applied \u0026quot;rate\u0026quot;: 1 //No currency exchange applied },  otherwise, you will receive:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, //New currency \u0026quot;rate\u0026quot;: 0.86 //Rate exchange applied },  File Format The file should be in the below format:\n Encoding: UTF-8  File Name: currency_map.csv  Header Row: Code, Rate  Decimal separator for rate must be point (\u0026ldquo;.\u0026rdquo;)  Delimiter: Comma (“,”)  Directory: /[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: currency_map.csv\nData:\nCode,Rate AED,4.74 CAD,1.61 CHF,1.26 EUR,1.09 GBP,1.00 INR,84.40 MAD,12.17 THB,42.91 USD,1.29  The rate with value 1.00 is the base rate. Other rates are calculated from it.\nThe value of step, type, and name is always the specified in the example below. The two parameters are mandatory and their value means:\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;currency\u0026rdquo;: It is a string value in ISO 4217 standard (\u0026ldquo;XXX\u0026rdquo;). It is the currency to which you want to convert.\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;exclude\u0026rdquo;: is a Boolean value (true / false). This parameter only has an effect on the search query. It determines if the options on which the currency change cannot be applied (no currency found in ftp) are excluded. In addition, it is necessary that option and parameter currencies are in ftp file.\nExecution example { \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;CURRENCY_CONVERSION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;currency_exchange\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;currency\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;GBP\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;exclude\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;true\u0026quot; } ] } ] } ] }  "
},
{
	"uri": "/hotelx/plugins/format-files/commission_netprice/",
	"title": "Hotel Commission",
	"tags": [],
	"description": "Format hotel commission file.",
	"content": " The commission file should be in the below format:\nHotel Commission File Format The hotel commission file should be in the below format:\n Encoding: UTF-8  File Name: commission_hotel.csv  commission hotel  Extension file: csv Headers:  supplier → supplier code  hotel → hotel code  commission → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)  Delimiter: Comma (“,”) Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;) Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: commission_supplier.csv\nData:\nSupplier,Hotel,Commission HOTELTEST,1,19 TTHOTTEST,1,11  "
},
{
	"uri": "/hotelx/",
	"title": "HotelX",
	"tags": [],
	"description": "HotelX: NextGen Hotel Search API",
	"content": "With HotelX, you can connect to multiple Suppliers and add business logic to reflect your pricing and unique offers.\nThere are no integration costs and you can integrate with hundreds of hotel Suppliers. HotelX has been designed from the ground up to be fast, reliable and capable of scaling to millions of requests.\nJoin us on Slack to discuss your integrations, or ask us questions via our Jira Service desk.   Overview HotelX Overview\n     Quickstart HotelX Quickstart\n     Reference Reference Documentation\n     Check configuration Learn how to get your configuration\n     Concepts Understand TravelgateX basic concepts\n     How-to guides Perform specific tasks\n     Plugins Additional logic to your App\n     Release Notes New Updates \u0026amp; Releases\n     FAQs Do you have specific questions about HotelX? Check out the FAQs\n    "
},
{
	"uri": "/hotelx/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides   Connect a New Supplier How to connect to a new Supplier\n     Integrate How to integrate with HotelX booking process\n     Certification process Perform specific tasks\n     Useful information Some concepts and particularities\n    "
},
{
	"uri": "/insights-x/",
	"title": "Insights-X",
	"tags": [],
	"description": "Grow your business with data",
	"content": "Insights-X is a powerful data product that will let you get back in control of your business.\nThe innovative way we store, manage and process data allows us to produce real-time data, historical trends and forecast the travel industry to match your own needs.\nJoin us on Slack to discuss your integrations, or ask us questions via our Jira Service desk.   Overview Insights-X Overview\n     Datasets Understand Insights-X Datasets concepts\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "/hotelx/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/mappea/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/paymentx/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/stats/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/travelgatex/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-inventory/",
	"title": "Inventory",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/concepts/management-flow/",
	"title": "Management Flow",
	"tags": [],
	"description": "Learn about Management Flow. Cancellations and Booking List",
	"content": " On this page you will learn how to manage and control bookings and management flow. Managing operations can be used in order to operate above Seller\u0026rsquo;s bookings.\nCancellation Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;cancel\u0026quot;: { } } } }  PlayGround Samples  cancel   Booking Performs a seller booking list.\nIn this case you can search the bookings with references or by dates, the dates can be arrival dates or booking dates.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;booking\u0026quot;: { } } } }  PlayGround Samples  booking   "
},
{
	"uri": "/hotelx/plugins/processor/",
	"title": "Processor",
	"tags": [],
	"description": "Modify objects on both request and response.",
	"content": "Processor plugins extends HotelX allowing multiple operation types. It can modify request and response messages, allowing a full range of operations:\n Split arrays Join arrays Modify object values Add or remove object instances  "
},
{
	"uri": "/stats/howtos/howto-query-stats/",
	"title": "Query Stats",
	"tags": [],
	"description": "How to query about your performance",
	"content": " This page shows you how to query Stats using API or TravelgateX Web.\nHow to request You can query about your performance as a buyer or as a seller.\nBelow are shown different examples for different casuistry:\n    002160e4c2822635ef3b1a3c81b1d44d In this availability case, you will not receive results due to the hotel\u0026rsquo;s restriction of minimum stay. In this case, if you change the date range to 3 days or more, you will receive availability /002160e4c2822635ef3b1a3c81b1d44d\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = \"\"; const default_user = \"\"; const gists = [{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"666b32bc15f794d941a0549f56576994\",\"n\":\"Buyer\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"22146f0cf8f73939e0a55c0274def86c\",\"n\":\"Seller\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { renderGist({ gist: gist, data: data }); resolve(); }); }) } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "/hotelx/howtos/bookingflow/quote/",
	"title": "Quote",
	"tags": [],
	"description": "How to valuate an availability option",
	"content": " Quote is an operation used to assess and valuate the rate before the actual booking. It returns the same information as the Search response for a hotel rate with up-to-date price, along with additional information regarding the rate: rate breakdown and cancellation policies.\nAdvanced criteria It explains different parameters that can be set up in the request (it indicates which ones are mandatory)\n optionRefId: Identifier of the option chosen in Search. Mandatory language: Language to be used in the request  How to request Here you can find 2 examples of how to valuate an availability option, one for 1 room and the other one for multi-room. \n    666b32bc15f794d941a0549f56576994 Please, bear in mind that you should place on optionRefId field the value from the id field of the option you want to valuate from availability. /666b32bc15f794d941a0549f56576994\n22146f0cf8f73939e0a55c0274def86c Please, bear in mind that you should place on optionRefId field the value from the id field of the option you want to valuate from availability. /22146f0cf8f73939e0a55c0274def86c\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = \"\"; const default_user = \"\"; const gists = [{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"666b32bc15f794d941a0549f56576994\",\"n\":\"1 Room\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"22146f0cf8f73939e0a55c0274def86c\",\"n\":\"2 Rooms\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { renderGist({ gist: gist, data: data }); resolve(); }); }) } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nPlease, bear in mind Please, bear in mind that there are some mandatory data you should include at this step:\n Cancellation policies: Within the cancelPolicy structure response there is a refundable field. If this field is filled in with false, it means that the room has 100% cancellation cost, so the room is non-refundable. Remarks Taxes   "
},
{
	"uri": "/hotelx/plugins/search_by_destination/",
	"title": "Search by destination",
	"tags": [],
	"description": "Enables search query to request per destinations by converting destination codes to hotel codes",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/74a01699ccc7f7a8f043f6583e64fcde\\/raw\\x22,\\x22divname\\x22:\\x22div_admin_destinations\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/f820c0508f7d47432eaad34823d426e0\\/raw\\x22,\\x22divname\\x22:\\x22div_searchbydestinations\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Search by destination is a feature to search by destinations codes in the Search query. To use it, codes must be sent in \u0026lsquo;CriteriaSearch\u0026rsquo;. Destination codes will be converted to hotel codes, then merged with the hotel codes sent in criteria if any, and finally the request will be sent to the supplier. In order to achieve the destination to hotel conversion, a source must be specified in a plugin.\nPlugin The conversion must be done at the \u0026lsquo;REQUEST\u0026rsquo; step, either in type \u0026lsquo;PRE_STEP\u0026rsquo; or \u0026lsquo;POST_STEP\u0026rsquo;. The parameter with key \u0026ldquo;accessID\u0026rdquo; is mandatory and is the access used to convert destinations to hotel from its hotel list, which means that the hotel codes obtained are in the same context as the access.\nQuery get hotels \u0026amp; destination Get hotels \u0026amp; destinations\nQuery execute plugin search by destination Plugin search by destination\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;search_by_destination\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;accessID\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;x\u0026quot; } ] } ] } }  Example query destinations \u0026amp; hotels by access First of all, you need to know destinations by access.    ## Example query with execution plugin search by destinations {#pluginsearchbydestinations}   \n"
},
{
	"uri": "/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization &amp; Authentication",
	"content": "Providing secure access to our capabilities and data is a core priority for us.\nOur security measures include: A test API key that allows anyone to make queries and experiment with our APIs without exposing private data or enabling anyone to corrupt or change our data Confirmation that new businesses have signed appropriate contracts before they are provided with access to supplier databases Authentication through API tokenization Use of JSON web tokens Identity and Access Management control for registered users to that you can administer how your developers are able to access TravelgateX functionalities Support for creating and maintaining internal security policies Use of rate limiting and error messages where usage is outside our normal business experience.\n  Overview Learn platform security\n     Identity and access management Advanced security management\n    "
},
{
	"uri": "/stats/",
	"title": "Stats-X",
	"tags": [],
	"description": "",
	"content": "Stats-X is a powerful data product that will let you evaluate real-time minute-by-minute buyer and/or seller performance.\nJoin us on Slack to discuss your integrations, or ask us questions via our Jira Service desk.    Overview Stats-X Overview\n     How-to guides Perform specific tasks\n     Reference Reference Documentation\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. With GraphQL, you can choose exactly what data you want to retrieve. GraphQL is a typed query language. That means that it has a lot of predictability, as each piece of data has its own type, so we know what sort of data we will be getting back. This is something we really appreciate, especially since we deal with so many third party APIs, and often we have no control of what\u0026rsquo;s going on on the other side! At TravelgateX we take away all of those headaches, by offering you an integration platform to 600+ suppliers, all accessible via a single GraphQL endpoint.\nUnderstanding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is a contract between the client and the server. It defines how clients and servers can talk to each other and sets out what they expect from each other. This way, both know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that.\nThere are a number of ways you can understand our Schema: You can see all elements of our data model by clicking on the green Schema button on the right hand side of our API playground. You can review our Reference Documentation which provides a page by page analysis of all Objects and fields used in our Schema. You can see how all of the data fields are connected by exploring the GraphQL Voyager tool.\nAt TravelgateX we would like to give a hat tip to API Guru and their excellent tool graphql-faker. This helped us write the schema in one window while seeing the results in another window. Besides being a super cool feature, this helped us think through each and every node in our data Schema. Building Queries You can test a Query in the API playground.\nA query has the following components: Operation type: When searching data in GraphQL, we use Query to indicate the operation type (see below for Mutation operation type) Operation name: (optional) You can give your Query a name so that it is easy to find in later code. This is the similar to creating a function in other programming languages. Variable definitions: You can set what variables need to be completed in order to run your query. You declare a name for the variables you will use by using a $. A common variable name we use is $criteriaSearch. After declaring a variable name, use the colon and then describe what inputs are needed. You can choose from some of the input objects we have already created. For example, we often use the HotelCriteriaSearchInput input object. This input object requires the following fields as mandatory (indicate by a !): Check in date, check out date, number of hotels to be returned in a response, and number of people to occupy the rooms. You can also add language, currency, nationality and market fields as variables to this input object, for more filtered responses. Selection set: After the variables have been defined, you can use the { brackets to start listing what objects you want to query to get the data you need. Each selection set starts with a { and ends with a }. You can nest (indent) these selection sets so it is easier to read a query. Response: Once you have completed defining your query, you will receive a response in JSON format. This will be nested as well, so it is easier to read.\nFurther reading We recommend the following resources to learn more about making GraphQL queries: The Anatomy of a GraphQL query by Sashko Stubailo GraphQL explained by Jonas Helfer Queries and Mutations by GraphQL.org\nBuilding Mutations You can test a Mutation in the API playground. We recommend that you work through our example HotelX mutation to book a hotel.\nA query has the following components: Operation type: When searching data in GraphQL, we use Mutation to indicate the operation type, that is, we are going to change some data on the server Operation name: (optional) You can give your Mutation a name so that it is easy to find in later code. This is similar to creating a function in other programming languages. Variable definitions: You can set what variables need to be completed in order to run your mutation. You declare a name for the variables you will use by using a $. A common variable name we use is $bookInput. After declaring a variable name, use the colon and then describe what inputs are needed. You can choose from some of the input objects we have already created. For example, we often use the HotelBookInput input object. We added an ! in our example. The ! in GraphQL means it is mandatory. So while only three fields of the HotelBookInput are usually mandatory, by adding the ! to our variable definition, we have made all input object fields mandatory. Selection set: After the variables have been defined, you can use the { brackets to start listing what objects you want to query to get the data you need. Each selection set starts with a { and ends with a }. You can nest (indent) these selection sets so it is easier to read a query.  Response: Once you have completed defining your mutation, you will receive a response in JSON format. This will be nested as well, so it is easier to read. Look for the field Status and make sure it has OK to confirm that the data has been added/updated/deleted.\nWe have identified pagination as a topic we need to cover on this page as part of our learning resources. Check our Roadmap for updates on when we will be preparing this content.\nIf you need any additional information for this page, or suggestions on how we can improve our documentation, send us an issue via our Issues Tracker.\n "
},
{
	"uri": "/hotelx/howtos/bookingflow/book/",
	"title": "Book",
	"tags": [],
	"description": "How to perform a booking",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/31d4d32ea8e8bc8ab5d7bc3910df72c0\\/raw\\x22,\\x22divname\\x22:\\x22div_booking\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  The Book operation requests a reservation confirmation for the specified optionId.\nAdvanced criteria Detail advanced criteria if it’s necessary auditTransactions: Returns all the transactions exchanged with the supplier. to send register to \u0026ldquo;true\u0026rdquo; and return provider traces to claim them It would be good to \u0026ldquo;true\u0026rdquo; it in order to make these claims to supplier\nHow to confirm a reservation   \n"
},
{
	"uri": "/channelx/release-notes/breaking-changes/",
	"title": "ChannelX breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/concepts/content/",
	"title": "Content",
	"tags": [],
	"description": "Learn about how to manage content data in your site: Hotels, Boards, Categories...",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aeb082e484710ebf6b7a4ec5173064cc\\/raw\\x22,\\x22divname\\x22:\\x22div_hotels\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/4737228c495b09566474fa2db38fc72d\\/raw\\x22,\\x22divname\\x22:\\x22div_destinations\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/519b4223de8b44cb20c5c33212c62654\\/raw\\x22,\\x22divname\\x22:\\x22div_boards\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/0815561e9c25ce49bc416dbc73f36388\\/raw\\x22,\\x22divname\\x22:\\x22div_rooms\\x22},{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aa1be23b8c9229c8363c142036afb1f5\\/raw\\x22,\\x22divname\\x22:\\x22div_categories\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  On this page you will learn how to manage content data such as hotels, boards, categories, etc. in your site.\nHotels Hotels Query returns a hotel list from one supplier\u0026rsquo;s access. This entity contains static data about the hotel requested, such as code, name, location, and other information - You can find all these fields in the graph. You can receive hotels with hotel codes or with minimal destination codes, you can also filter the results based on rank. In this sense, note that there are mandatory and optional fields that allow filtering the hotels returned in the response. As for the response, the full response is split into pages: By default, the maximum number of hotels returned in each page (response) is 1000, but it is allowed to request between 100 and 10000 hotels by filling in the field maxSize in the criteria. In order to obtain the next page of hotels, you need to fill in the token field, accordingly. Input parameters are explained above.\nCriteria Mandatory fields\n- access-\u0026gt; It represents the access for which you want to receive the hotels information.\nOptional fields\n- hotelCodes-\u0026gt; it allows to filter by hotel codes\n- ranks-\u0026gt; it allows to filter by ranks\n- maxSize-\u0026gt; it allows to specify the number of elements per page\nToken The token allows to request the next page of hotels. The correct way of obtaining multiple pages of hotels is mantaining this field empty for the first execution, and request the token field in the response graph. Then, send subsequent queries filling in the token field with the value returned in the previous response.\nPlayground Samples  Hotels     Destinations Destinations Query returns a list of static data about destinations for a supplier access. By default, if you don’t set any destination codes, you will receive all the codes. As it is the case with the Query Hotels, you will be able to receive subsequent pages of destinations by filling in the continuation token field. It is possible that you filter by language and you receive the texts only in the language specified by parameter in DestinationData /texts/languages.\nPlayground Samples  Destinations     Boards Boards Query returns a simple boards map that can include translations to other languages.\nPlayground Samples  Boards     Rooms Rooms Query returns a simple rooms map that can include translations to other languages. You can search by room codes, if you don\u0026rsquo;t introduce any room codes, you will receive all of them. The full response is split into pages. By default, the number of rooms in each page is 1000, however, you can choose the size with a value between 100 and 10000.\nCriteria Mandatory fields\n- access-\u0026gt; It represents the access for which you want to receive the room description.\nOptional fields\n- roomCodes-\u0026gt; it allows to filter by room codes\n- maxSize-\u0026gt; it allows to specify the number of elements per page\nToken The token allows to request the next page of rooms. The correct way of obtaining multiple pages of rooms is mantaining this field empty for the first execution and request the token field in the response graph. Then, subsequent queries filling in the token field with the value returned in the previous response.\nPlayground Samples  Rooms     Categories Category static data returns a simple categories map that can include translations to other languages.\nPlayground Samples  Categories     "
},
{
	"uri": "/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate bulk data operations",
	"content": " Bulk Data Automation Several of our TravelgateX API products use your data in order to perform tasks.\nFor example, your application may use certain field names to describe rooms, hotel amenities, and rates. These need to be matched to field names for your suppliers.\nYou can upload your data to our platform by: - Uploading it via SFTP or - Changing data via a mutation.\nYou can decide what is the best way for you to get your updated data into our servers.\nOur APIs have been built from the ground up with performance in mind. That means we must store data inside the application in order to keep the response time to a minimum.\nThe data we must store following specificitations:\nHotelX  Mappings Custom hotel lists    Uploading Strategies How to Upload data\n    "
},
{
	"uri": "/flightx/",
	"title": "FlightX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n  Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06.To be removed soon. Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05.Expected removal on 2019-05-06.   2019-02-05  Deprecated token from HotelOptionSearch. Reason: . Expected removal on 2019-05-06 .  \n2018-07-26  Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 .   2018-07-24  Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 .   2018-07-09  Removed quote from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed deleteDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed updateDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed createDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed loadFile from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed hotelCancel from Mutation. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotelBook from Mutation. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed search from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed booking from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed defaultSettings from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed mapping from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 .   2018-06-06  Deprecated loadFile from HotelXMutation. Reason: . Expected removal on 2018-09-04 .  \n2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-07-24 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-26 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-26 .   2017-11-21  Deprecated quote from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated deleteDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated updateDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated createDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated loadFile from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated hotelCancel from Mutation. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated hotelBook from Mutation. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated search from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated booking from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated defaultSettings from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated mapping from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 .   "
},
{
	"uri": "/mappea/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .  \n2018-08-08  Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed hotel from Booking. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Quote. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Search. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Booking. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Quote. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Search. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .  \n2018-08-03  Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 .  \n2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .  \n2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 . Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 . Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 . Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 . Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 .   2017-11-21  Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 .   "
},
{
	"uri": "/paymentx/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .  \n2018-08-03  Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-07-31 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-07-31 .  \n2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-07-31  Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   "
},
{
	"uri": "/travelgatex/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12.To be removed soon. Removal of connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06.To be removed soon. Removal of token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05.Expected removal on 2019-05-06. Removal of FilterInput used on HotelXQuery.search and Search.hotel. Reason: Please, use filterSearch. Deprecated on 2018-08-20.To be removed soon.   2019-02-11  Removed hotel from Booking. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Quote. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Search. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 .  \n2019-02-05  Deprecated token from HotelOptionSearch. Reason: . Expected removal on 2019-05-06 .   2019-01-11  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .    Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 .  \n2018-08-03  Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 .   2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 .   2018-07-31  Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 .   2018-06-06  Deprecated loadFile from HotelXMutation. Reason: . Expected removal on 2018-09-04 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Expected removal on 2018-08-19 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-31 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-31 .   2017-11-21  Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 .   "
},
{
	"uri": "/hotelx/plugins/format-files/group/",
	"title": "Group",
	"tags": [],
	"description": "Format group file.",
	"content": " The hotel group file should be in the below format:\n Encoding: UTF-8  File Name: context_entity_group.csv  Context Entity (file will be indexed by this field). Format (indicates format file)  Extension file: csv Headers:  key → Entity. hotelCodes → hotel code chainCodes → chain code destinationCodes → destination code  Delimiter: Comma (“,”)  Directory: /F[folder code]\\Maps/HotelX\\Hotel/  Sample File Name: context_entity_group.csv\nData:\nHotel entity example\nkey,chainCodes,destinationCodes 1,OHTEL,DNBFQ;BYWRS;BUJSY;BTENE;CGGSZ;CGUNN;COMERCIAL152 2,000-INDEP,3PR;BYQIW;GCNR;BUJSF;BTENB;CGGSZ;CGUNN;COMERCIAL76  "
},
{
	"uri": "/hotelx/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/mappea/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/paymentx/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/stats/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/travelgatex/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/paymentx/",
	"title": "PaymentX",
	"tags": [],
	"description": "",
	"content": "   Reference Reference Documentation\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "/hotelx/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your App",
	"content": "HotelX Plugins are the secret sauce of the HotelX API. They can be used to fully customize the request and response in any way one can think.\nHotelX Plugins are a separate Go application, that get compiled into the main application and run natively in our servers.\nAnyone can write a HotelX Plugin, and which Plugins get executed can be specified at the request level, or be configured by default.\nFollowing is the list of Plugins TravelgateX has already developed.\n  Overview Plugins Overview. What they are, when they get executed and how to execute them.\n     Blacklist Hotel codes Blacklist: filter out specific hotels from the Search query.\n     Mapping Map different codes from different suppliers in order to get a de-duped response.\n     Add Parameter Allows Add Parameter to the access created for a supplier\n     Aggregation Aggregate different Suppliers response based on different criteria.\n     Commission Convert Gross Prices into Net Prices.\n     Markup Mark up or down the price coming from the Supplier based on different criteria.\n     Preference To give preference to the options that match the preference rules.\n     Safety Margin Discards those options that have a commission higher than expected.\n     Currency Converter Convert currency in order to have a unified response.\n     Processor Modify objects on both request and response.\n     Search by destination Enables search query to request per destinations by converting destination codes to hotel codes\n     Development Learn how to develop your own plugins and addd your magic to the API.\n     Format files Format files explanation.\n     Entities Table entities processed values.\n    "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-speed/",
	"title": "Speed",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/learning-graphql/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": " Top tools to develop in GraphQL Here is a collection of tools we\u0026rsquo;ve been using that have help us develop in GraphQL:\nSchemas Design  APIs Guru\u0026rsquo;s graphql-faker  Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n GraphQL server - Focused on ease of use Redis  NodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use: * GraphQL server\nSchema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators Generate beaultiful static documentation sites directly from schema or introspection query\n GraphQL Playground - GraphQL IDE for docs \u0026amp; coollaboration Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n GraphQL Playground: our favorite online client Insomnia: just like Postman, but GraphQL ready GraphiQL: the original  Big List Here\u0026rsquo;s a list of even more tools, resources, etc.\n Awesome GraphQL  "
},
{
	"uri": "/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform   Build An OTA Build your own full fledged OTA\n     Configure HotelX Security Configure your own HotelX security model\n    "
},
{
	"uri": "/hotelx/howtos/bookingflow/booklist/",
	"title": "Booking List",
	"tags": [],
	"description": "How to request for booking detail",
	"content": " The Booking operation allows to retrieve a booking (or bookings) with all its details from the booking reference locator. The most important information returned for each booking in the list is: - Booking reference - Booking holder - Booking pax - Hotel, rooms and boards confirmed - Booking rates\nAdvanced criteria Explain different parameters can be set up on the request (indicate which ones are mandatory)\nHow to request     a5b25332a7a5683d602efeb87233a9c7 You can ask for bookings by client reference (XTG-XXXXXX) or by supplier reference. /a5b25332a7a5683d602efeb87233a9c7\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = \"\"; const default_user = \"\"; const gists = [{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"2bee5af21dd6f2cc61eec736bb95aead\",\"n\":\"By Dates\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"64780338-49c8-4439-7c7d-d03c2033b145\",\"g\":\"a5b25332a7a5683d602efeb87233a9c7\",\"n\":\"By Reference\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { renderGist({ gist: gist, data: data }); resolve(); }); }) } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nBear in mind Remember that you can choose which information you want to show\nReference: To show client or supplier booking reference\nStatus: To show the booking status\nIf you want to ask for one booking, you can send the client/supplier booking reference on the HotelCriteriaBooking\n "
},
{
	"uri": "/hotelx/plugins/format-files/commission/",
	"title": "Commission",
	"tags": [],
	"description": "Format commission file.",
	"content": " The commission file should be in the below format:\n Encoding: UTF-8 File Name:  context sequential commission  Extension file: csv Headers:\n ruleId → rule identifier supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkin date Date format checkInTo → checkout date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) force → (boolean value true/false)\n false value (if the value is false, the rule will not be applied despite of matching all its conditions criteria if a commission is received from the supplier through the integration). true value if the value is true, the rule will be applied if matching all its conditions criteria, regardless of a commission being received or not from the supplier through the integration). Example\n  commission received,forced,result from supplier no,no,rule applied (if matching all its criteria conditions) no,yes,rule applied (if matching all its criteria conditions) yes,no,rule NOT applied regardless of matching all its criteria conditions yes,yes,rule applied (if matching all its criteria conditions)   List of file fields      Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   creationDateFrom No - No   creationDateTo No - No   checkInFrom No - No   checkInTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes - No   force Yes - No    *Excluded fields Informed fields will be ignored\n  Delimiter: Comma (“,”)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: context_sequential_commission.csv\nData:\nSimple value field\nruleId,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,force CE1,DIN,,,,2018-04-01,2018-10-31,3846,,,,,,18.50,false CE2,DIN,,,,,,3846,,,,,,15.00,false  Multivalue field\nruleId,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,force CE1,DIN;HOB;JMB,,,,2018-04-01,2018-10-31,3846,,,,,,18.50,false CE2,DIN,,,,,,3846,,,,,,15.00,false  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": "   Style Guide Community Style Guide\n     Writting release notes Release notes, document with the changelog\n    "
},
{
	"uri": "/hotelx/plugins/development/",
	"title": "Development",
	"tags": [],
	"description": "Learn how to develop your own plugins and addd your magic to the API.",
	"content": "On this page you will learn how to develop your own HotelX Plugin.\n"
},
{
	"uri": "/hotelx/plugins/format-files/entity_table/",
	"title": "Entity Table values",
	"tags": [],
	"description": "Table entity values.",
	"content": "We have different combinations values from entities values this table show this combinations:\n   entity chainCodes destinationCodes hotelCodes     chain Yes No No   hotel No No Yes   destination No Yes No    "
},
{
	"uri": "/hotelx/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/mappea/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/paymentx/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/stats/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/travelgatex/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\n "
},
{
	"uri": "/hotelx/plugins/format-files/",
	"title": "Format files",
	"tags": [],
	"description": "Format files explanation.",
	"content": "   Commission supplier Format commission supplier file.\n     Hotel Commission Format hotel commission file.\n     Group Format group file.\n     Commission Format commission file.\n     Entity Table values Table entity values.\n     Safety margin Format safety margin file.\n     Supplier Order Format supplier order.\n     Net compare Format Net compare file.\n     Preference Format preference file.\n    "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-insights/",
	"title": "Insights",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/mappea/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": "   Overview ChannelX Information\n     Reference Reference Documentation\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/",
	"title": "Products changelogs",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes by product",
	"content": "   ChannelX Contains a curated, chronologically ordered list of notable changes\n     FlightsX Contains a curated, chronologically ordered list of notable changes\n     Mappea Contains a curated, chronologically ordered list of notable changes\n     Inventory Contains a curated, chronologically ordered list of notable changes\n     Speed Contains a curated, chronologically ordered list of notable changes\n     Insights Contains a curated, chronologically ordered list of notable changes\n     Distribution Contains a curated, chronologically ordered list of notable changes\n     Stats Contains a curated, chronologically ordered list of notable changes\n     travelgatex.com Contains a chronologically ordered list of notable changes at our website\n    "
},
{
	"uri": "/hotelx/concepts/ranking/",
	"title": "Ranking",
	"tags": [],
	"description": "Learn about how to rank hotels",
	"content": " On this page you will learn how to rank hotels.\nOverview On this page, you will learn how to manage content data such as hotels, boards, categories, etc. in your site. Hotel Content operations allow changes to be made into static methods on HotelX, so that hotels can be divided into different rankings or priorities in order to facilitate the mapping process.\nThe main goal of this process is to create a hotel ranking and divide the whole portfolio in order to make the hotel list more manageable. Each classification or sub-list responds to specific commercial criteria, such as direct contracting hotels, the best offers, the best sales, etc.\nOnce the hotel ranking file/s have been uploaded, the static hotel list method can filter hotels according to this ranking. In order to set up hotel ranking lists you must upload a file in csv format using a specific name to identify the ranking in your organisation\u0026rsquo;s FTP.\nFile Names (mandatory) Each file can have different meanings. It\u0026rsquo;s up to the file creator to give it a meaning according to their business needs. In order to process files correctly, they must be named according to the following naming convention:\n   File Name Description     rank1.csv Rank 1, for example direct contracts   rank2.csv Rank 2, for example best deals   rank3.csv Rank 3, for example top sales   rank4.csv Rank 4, for example competitive hotels   rankN.csv Rank N, any type of information.    Header fields (mandatory) In order for them to be correctly processed, the header fields must have the following format:\n   Field Name Data Type     provider_id string   hotel_code string   rank boolean [1,0]    Example:    provider_id hotel_code rank     travelgatex 2018 1   travelgatex 2017 1    Process file To process the file, it must be uploaded to your organization\u0026rsquo;s FTP folder in the TravelgateX Platform. For more info on how to upload files, you can access our data automation section.\nTemplate File Feel free to download a template CSV file.\n"
},
{
	"uri": "/hotelx/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Roadmap We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.\n     Changelog Contains an accurated, chronologically-ordered list of notable changes\n     GraphQL Schema Changes It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "/insights-x/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Roadmap We have created a GitHub Project where we will keep you updated with all the future modifications regarding this Project\n     Changelog Contains an accurated, chronologically-ordered list of notable changes\n    "
},
{
	"uri": "/stats/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Changelog Contains an accurated, chronologically-ordered list of notable changes\n    "
},
{
	"uri": "/travelgatex/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Roadmap We have put together a GitHub Project where we will keep updating on the things we’ve in our plans.\n     Changelog Contains a curated, chronologically ordered list of notable changes\n     GraphQL Schema Changes It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Products changelogs Contains a curated, chronologically ordered list of notable changes by product\n    "
},
{
	"uri": "/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "New Updates &amp; Releases",
	"content": "  "
},
{
	"uri": "/hotelx/plugins/format-files/safety_margin/",
	"title": "Safety margin",
	"tags": [],
	"description": "Format safety margin file.",
	"content": " The safety margin file should be in the below format:\n Encoding: UTF-8 File Name:  context sequential safetymargin  Extension file: csv Headers:\n ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code creationDateFrom → start creation date Date format creationDateTo → end creation date Date format checkInFrom → checkinfrom date Date format checkInTo → checkinto date Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)\n  client tokens Identifier provided by the client that serves to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fileds* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   creationDateFrom No - No   creationDateTo No - No   checkInFrom No - No   checkInTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes - No    *Excluded fileds Informed field will be ignored\n  Delimiter: Comma (“,”)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: context_sequential_safetymargin.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage CE1,XXX,DIN,,,,2018-04-01,2018-10-31,3846,,,,,,18.50 CE2,YYY,DIN,,,,,,3846,,,,,,15.00  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage CE1,XXX,DIN;HOB;JMB,,,,2018-04-01,2018-10-31,3846,,,,,,18.50 CE2,YYY,DIN,,,,,,3846,,,,,,15.00  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " Although GraphQL is a very young technology, it\u0026rsquo;s quickly gaining momentum and already has a fast growing yet vast ecosystem. Apart from Facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, there are more and more development teams embracing this technology and you can now find a lot of articles, tutorial and videos talking about it.\nWe want to be part of this community and hopefully help you discover this new technology and its features. That\u0026rsquo;s why we have gathered some of the best articles and tutorials for you to get to know GraphQL and learn how to use it step by step. Have a look at the list bellow and click on any of the resources, materials, podcast and documentation to start.\nEnjoy it!\nGraphQL Articles and discussions  REST APIs are REST-in-Peace APIs. Long Live GraphQL. Hacker News Thread Living APIs and the Case for GraphQL  GraphQL Tutorials  Learn GraphQL with GitHub The free and open-source tutorial to learn all around GraphQL to go from zero to production. Learn GraphQL by querying a schema based on JSON data  GraphQL Resources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps GraphQL User List  GraphQL Books  Introducing The GraphQL Guide by John Resig Learn To Build Fullstack Graphql Applications by Julian Mayorga  Other Graph Related Resources  Graph Data Structures for Beginners   "
},
{
	"uri": "/hotelx/howtos/bookingflow/cancellation/",
	"title": "Cancellation",
	"tags": [],
	"description": "How to cancel a booking",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"64780338-49c8-4439-7c7d-d03c2033b145\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x2264780338-49c8-4439-7c7d-d03c2033b145\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/1b160cfcf47b1c4d1deada1a18ae98b6\\/raw\\x22,\\x22divname\\x22:\\x22div_cancellation\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Cancellation operation that cancels the booking. Which time zone applies for the cancellation policies? NOTE: Cancellation always takes into account the day and time of the destination in order to calculate what cancellation policy should be applied. UTC time\n When the booking is cancelled, the details of the cancelled booking are returned with the following information: The booking status: CANCELLED Cancellation fees if applicable Hotel, rooms and rates of the cancelled booking Holder name  Advanced criteria Explain different parameters can be set up on the request (indicate which ones are mandatory)\nHow to cancel   \n"
},
{
	"uri": "/channelx/",
	"title": "ChannelX",
	"tags": [],
	"description": "",
	"content": "It is a tool that allows a third partner to receive the product of the different channel managers in an unique standardized API. The objective of this platform is to speed up the extraction and the combination of the product for the Client. In order for this to work, Clients should build up an internal service to be able to receive the messages sent from ChannelX.\n  Overview ChannelX Information\n     Documentation Guide to ChannelX\n     FaQ Discover ChannelX\n     ChannelX breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-distribution/",
	"title": "Distribution",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/plugins/entity_table_file/",
	"title": "Entities",
	"tags": [],
	"description": "Table entities processed values.",
	"content": " Entities processed types: Sequential Type of processing sequentially, the first rule that coincides will be the one applied.\nSupplier Rules applied or indexed at the supplier level.\nAccess Rules applied or indexed at the access level.\nHotel The key to indexing is of the hotel type, we hope that the reference is by a hotel code where the type will be given by the context.\nDestination Idem hotel.\n"
},
{
	"uri": "/hotelx/faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "Do you have specific questions about HotelX? Check out the FAQs",
	"content": " Faqs pages FAQs and common errors pages:\n  FAQs Do you have any specific questions about HotelX? Check out the FAQs\n     Common Errors FAQs on common errors\n    "
},
{
	"uri": "/travelgatex/frequently-asked-questions/",
	"title": "FAQs",
	"tags": ["faq"],
	"description": "Do you have specific questions about TravelgateX? Check out the FAQs",
	"content": " What is TravelgateX? TravelgateX platform provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface). Instead of having to deal with REST APIs, you\u0026rsquo;ll be able to use full poser of GraphQL to interact with your data.\nGraphQL is the future of API development, many big companies (like Facebook, Twitter, Yelp, IBM and more) as well as smaller startups and teams are using it in production already today.\nHow can I use TravelgateX? There are three major ways for using TravelgateX:\n Implement TravelgateX API as a app-to-app communication Access TravelgateX API directly from the frontend Use TravelgateX Site  Which Apikey do I have to use?  I already have the TGX Welcome Pack: Then you should use the Api Key facilitated. I did not receive TGX Welcome Pack: Then you should use our dummy Api Key facilitated on our sample Playground.  "
},
{
	"uri": "/hotelx/plugins/format-files/supplier_order/",
	"title": "Supplier Order",
	"tags": [],
	"description": "Format supplier order.",
	"content": " The supplier order file should be in the below format:\n Encoding: UTF-8 File Name:  supplier_order  Extension file: csv Headers:\n ruleId → rule identifier supplierCodes → supplier code  List file fields\n|Field | Mandatory | Excluded fileds* | Multi-value | |---|---|---|---| |ruleId| Yes | - | No | |supplierCodes| Yes | - | Yes |  Delimiter: Comma (“,”)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: supplier_order.csv\nData:\nSimple value field\nruleId,supplierCodes 1,BAR 2,RIU 3,SEN 4,HOBV2 5,GTA 6,TOU 7,NWJ 8,OLV2 9,EPL  Multivalue field\nruleId,supplierCodes 1,BAR;DIN;HOB;JMB 2,RIU 3,SEN 4,HOBV2 5,GTA 6,TOU 7,NWJ 8,OLV2 9,EPL  "
},
{
	"uri": "/hotelx/howtos/howto-book/",
	"title": "Useful information",
	"tags": [],
	"description": "Some concepts and particularities",
	"content": " HotelX Settings In HotelX there are different configuration level settings for a request. With these settings, you can configure some aspect of the request:\n   Field Description     context It indicates the context codes that you want to send and to receive.   Timeout It sets the requested timeout in the different query and mutation types:* search * quote * book (includes cancel and booking)    Language The language you want to use in the request.   Currency It indicates the currency you are going to send to the supplier or suppliers.   Nationality It indicates the nationality you are going to send to the supplier or suppliers.   Market It indicates the market you are going to send to the supplier or suppliers.   Business Rules These rules are sent directly via the integration, and they affect the supplier\u0026rsquo;s response.\n* Options Quota: number of options returned via the integration.\n* Type: Choose priority of product    As we have previously stated, we have three ways to indicate these settings.\nWe are going to start with the most specific until the most general.\nSettings per request These settings overwrite all others.\nYou must have permission to overwrite settings, if you don\u0026rsquo;t have this permission you won\u0026rsquo;t be able to change the configuration on runtime, that is, to each request.\nThese fields are the same in the three levels, only that the information is overwritten in lower levels. So, the request settings overwrite all other settings.\nSettings per client The settings in this level are used when you don’t overwrite settings to the request level.\nHowever, if you have the same client in different groups, you can set different settings to each one. In this case, you should specify which group you want to use in the request, in order to choose which configuration to use.\nSettings per HotelX And the last one, settings per HotelX instance. These settings are in the highest level, in the case that you don\u0026rsquo;t have the client\u0026rsquo;s settings and you don\u0026rsquo;t specify them in the request, settings are obtained from HotelX instance, this setting is mandatory.\nHow to execute a plugin A plugin execution can be specified in any request’s HotelSettingsInput and it must specify in which step it should be executed. The plugin type and name are mandatory in order to identify a plugin instance.\n\u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: PluginStepType, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: PluginType, \u0026quot;name\u0026quot;: plugin name (its unique), \u0026quot;parameters\u0026quot;: [] } ] }  Develop your own plugin Plugins are a Go language feature and we are using the native package in order to implement them. Therefore, a plugin is simply a go file that contains a set of functions that we will specify, the interface is yet to be defined.\n"
},
{
	"uri": "/hotelx/plugins/format-files/netcompare/",
	"title": "Net compare",
	"tags": [],
	"description": "Format Net compare file.",
	"content": " The net compare file should be in the format below:\n Encoding: UTF-8 File Name:  context sequential netCompare  Extension file: csv Headers:\n ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) amount → amount\n  client tokens Identifier provided by the client that is used to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   bookingDateFrom No - No   bookingDateTo No - No   startDateFrom No - No   startDateTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes amount No   amount Yes percentage No    *Excluded fields Informed field will be ignored\n  Delimiter: Comma (“,”)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: context_sequential_netCompare.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,amount 2795,,SUN2,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-2,1 2796,,EPL,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-1,2 2327,,TEC,,,,,2019-04-30,59735,,,,,,-3,3 2429,,CFT,,,,,2019-04-30,,,,,,,2.5, 2193,,DIN,,,,,2018-12-31,16038,,,,,,-2, 1315,,CIM,,,,,2018-12-31,39088,,,,,,-2, 1272,,TEC,,,,,2018-12-31,40912,,,,,,-4, 1332,,DIN,,,,,2018-12-31,40371,,,,,,3.5, 1323,,SMD,,,,,2018-12-31,,,DCHOT,,,,-3, 2213,,GNA,,,,,2018-12-31,,,GHT,,,,-2.5, 2225,,PRS,,,,,2019-04-30,,,MEDIT,,,,-4, 1019,,MED,,,,,2019-04-30,,,MEDP,,,,-3, 1020,,SEN,,,,,2019-04-30,,,PLYHT,,,,-4.25,  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,amount 2795,,SUN2;DIN;HOB;JMB,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-2,1 2796,,EPL,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-1,2 2327,,TEC,,,,,2019-04-30,59735,,,,,,-3,3 2429,,CFT,,,,,2019-04-30,,,,,,,2.5, 2193,,DIN,,,,,2018-12-31,16038,,,,,,-2, 1315,,CIM,,,,,2018-12-31,39088,,,,,,-2, 1272,,TEC,,,,,2018-12-31,40912,,,,,,-4, 1332,,DIN,,,,,2018-12-31,40371,,,,,,3.5, 1323,,SMD,,,,,2018-12-31,,,DCHOT,,,,-3, 2213,,GNA,,,,,2018-12-31,,,GHT,,,,-2.5, 2225,,PRS,,,,,2019-04-30,,,MEDIT,,,,-4, 1019,,MED,,,,,2019-04-30,,,MEDP,,,,-3, 1020,,SEN,,,,,2019-04-30,,,PLYHT,,,,-4.25,  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-stats/",
	"title": "Stats",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Join us on Slack and let us know what resources you need us to prirotize Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "/hotelx/plugins/format-files/preference/",
	"title": "Preference",
	"tags": [],
	"description": "Format preference file.",
	"content": " The preference file should be in the below format:\n Encoding: UTF-8 File Name:  context sequential preference  Extension file: csv Headers:\n ruleId → rule identifier clientTokens → client Tokens* supplierCodes → supplier code notSupplierCodes → supplier code bookingDateFrom → booking date from Date format bookingDateTo → booking date to Date format startDateFrom → start date from Date format startDateTo → start date to Date format hotelCodes → hotel code nothotelCodes → hotel code chainsCodes → chain code notChainCodes → chain code destinationCodes → destination code notDestinationCodes → destination code percentage → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) _filtercompetitors → filter competitors\n  client tokens Identifier provided by the client that is used to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   bookingDateFrom No - No   bookingDateTo No - No   startDateFrom No - No   startDateTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes - No   filter_competitors Yes - Yes    *Excluded fields Informed field will be ignored\n  Delimiter: Comma (“,”)\n Separator for multiple codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: context_sequential_preference.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,filter_competitors T1,,RIU,,,,,,,,,,,,999.00,TRUE T3,,BAR,,,,,,,,,,,,999.00,FALSE T4,,SEN,,,,,,,,,,,,999.00,FALSE T7,,RHO,,,,,,,,,,,,10.0,FALSE T9,subcanal-EROSKI_B2B,INT,,,,,,,,,,,BTEMX,5.0,TRUE  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,filter_competitors T1,,RIU,,,,,,,,,,,,999.00,TRUE T3,,BAR,,,,,,,,,,,,999.00,FALSE T4,,SEN,,,,,,,,,,,,999.00,FALSE T7,,RHO,,,,,,,,,,,,10.0,FALSE T9,subcanal-EROSKI_B2B,INT,,,,,,,,,,,BTEMX,5.0,TRUE T10,,GTA;HOBV2;TOU,,,,,,,,,,ACDMS,,5.5,FALSE  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "/travelgatex/release-notes/products-changelogs/changelog-web/",
	"title": "travelgatex.com",
	"tags": [],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " To make it easier for users and contributors to see precisely what notable changes have been made on the web.\nWeb site Link\nAll notable changes to this product will be documented in this page. 2018-10-09  Added press module with releases, asses, medias, newsletter, blog and contact. Added the possiblity to add apis to a team. Added second functional version of stats.    Changed the query to obtain team permissions.    Minor styling and logic global fixes.   2018-09-25  Added admin toggle to entities to allow the creation of accesses, clients and suppliers. Added link button on accesses, clients and suppliers toggles, to link the resource at the current group level.   2018-07-31  Added columns to IAM members user table \u0026ldquo;WHOLESALER\u0026rdquo; seller added to filter list of partners Added option to assign roles through templates of macro roles to IAM members   2018-07-30  Improvements on the organization selector  Sorted organizations in alphabetical order. Autoselect when there is just one org. available. Popup when there is no org. selected. Prettier component.     Iam members  Label, created at and updated at columns on members table. Option to assign roles by macro-roles  Seller \u0026ldquo;WHOLESALER\u0026rdquo; to the partners filter on the directory and partners screen. New admin permissions  \n Groups function filters   "
},
{
	"uri": "/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "   GraphQL Overview      Basic Concepts      Thinking in GraphQL      Tools      Tutorials \u0026amp; Resources     "
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/breaking-changes/",
	"title": "Breaking Changes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo    "
},
{
	"uri": "/tags/errors/",
	"title": "Errors",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/faq/",
	"title": "Faq",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/graphql-changelog/",
	"title": "Graphql Changelog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/products-changelog/",
	"title": "Products Changelog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
}]